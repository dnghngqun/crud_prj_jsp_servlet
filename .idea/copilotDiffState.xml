<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/dao/CartDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/dao/CartDAO.java" />
              <option name="originalContent" value="package org.example.crud_prj_ex.dao;&#10;&#10;import org.example.crud_prj_ex.model.CartItem;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class CartDAO {&#10;    private String jdbcURL = &quot;jdbc:mysql://localhost:3306/gomsu&quot;;&#10;    private String jdbcUsername = &quot;root&quot;;&#10;    private String jdbcPassword = &quot;&quot;;&#10;&#10;    private Connection getConnection() throws SQLException {&#10;        try {&#10;            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#10;        } catch (ClassNotFoundException e) {&#10;            throw new SQLException(&quot;MySQL JDBC Driver not found&quot;, e);&#10;        }&#10;        return DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);&#10;    }&#10;&#10;    public List&lt;CartItem&gt; getByUserId(String userId) throws SQLException {&#10;        String sql = &quot;SELECT c.*, p.name AS product_name, p.image_url, p.price, p.discount &quot; +&#10;                &quot;FROM cart c &quot; +&#10;                &quot;JOIN products p ON c.product_id = p.product_id &quot; +&#10;                &quot;WHERE c.user_id = ?&quot;;&#10;&#10;        List&lt;CartItem&gt; items = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, userId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                CartItem item = new CartItem();&#10;                item.setId(rs.getInt(&quot;cart_id&quot;));&#10;                item.setUserId(rs.getString(&quot;user_id&quot;));&#10;                item.setProductId(rs.getInt(&quot;product_id&quot;));&#10;                item.setQuantity(rs.getInt(&quot;quantity&quot;));&#10;                item.setProductName(rs.getString(&quot;product_name&quot;));&#10;                item.setImageUrl(rs.getString(&quot;image_url&quot;));&#10;                item.setPrice(rs.getBigDecimal(&quot;price&quot;));&#10;                item.setDiscount(rs.getBigDecimal(&quot;discount&quot;));&#10;                items.add(item);&#10;            }&#10;        }&#10;        return items;&#10;    }&#10;&#10;    public CartItem getByUserAndProduct(String userId, int productId) throws SQLException {&#10;        String sql = &quot;SELECT c.*, p.name AS product_name, p.image_url, p.price, p.discount &quot; +&#10;                &quot;FROM cart c &quot; +&#10;                &quot;JOIN products p ON c.product_id = p.product_id &quot; +&#10;                &quot;WHERE c.user_id = ? AND c.product_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, userId);&#10;            stmt.setInt(2, productId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                CartItem item = new CartItem();&#10;                item.setId(rs.getInt(&quot;cart_id&quot;));&#10;                item.setUserId(rs.getString(&quot;user_id&quot;));&#10;                item.setProductId(rs.getInt(&quot;product_id&quot;));&#10;                item.setQuantity(rs.getInt(&quot;quantity&quot;));&#10;                item.setProductName(rs.getString(&quot;product_name&quot;));&#10;                item.setImageUrl(rs.getString(&quot;image_url&quot;));&#10;                item.setPrice(rs.getBigDecimal(&quot;price&quot;));&#10;                item.setDiscount(rs.getBigDecimal(&quot;discount&quot;));&#10;                return item;&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public void addToCart(String userId, int productId, int quantity) throws SQLException {&#10;        // Check if item already exists in cart&#10;        CartItem existing = getByUserAndProduct(userId, productId);&#10;&#10;        if (existing != null) {&#10;            // Update quantity if item exists&#10;            updateQuantity(existing.getId(), existing.getQuantity() + quantity);&#10;        } else {&#10;            // Add new item to cart&#10;            String sql = &quot;INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)&quot;;&#10;&#10;            try (Connection conn = getConnection();&#10;                 PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setString(1, userId);&#10;                stmt.setInt(2, productId);&#10;                stmt.setInt(3, quantity);&#10;                stmt.executeUpdate();&#10;            }&#10;        }&#10;    }&#10;&#10;    public void updateQuantity(int cartId, int quantity) throws SQLException {&#10;        String sql = &quot;UPDATE cart SET quantity = ? WHERE cart_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, quantity);&#10;            stmt.setInt(2, cartId);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void removeItem(int cartId) throws SQLException {&#10;        String sql = &quot;DELETE FROM cart WHERE cart_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, cartId);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void clearCart(String userId) throws SQLException {&#10;        String sql = &quot;DELETE FROM cart WHERE user_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, userId);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;    public List&lt;CartItem&gt; getCartItems(String userId) throws SQLException {&#10;        List&lt;CartItem&gt; cartItems = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT c.cart_id, c.product_id, c.quantity, p.name as product_name, &quot; +&#10;                &quot;p.price, p.discount, p.image_url &quot; +&#10;                &quot;FROM cart c &quot; +&#10;                &quot;JOIN products p ON c.product_id = p.product_id &quot; +&#10;                &quot;WHERE c.user_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, userId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                CartItem item = new CartItem();&#10;                item.setId(rs.getInt(&quot;id&quot;));&#10;                item.setProductId(rs.getInt(&quot;product_id&quot;));&#10;                item.setProductName(rs.getString(&quot;product_name&quot;));&#10;                item.setPrice(rs.getBigDecimal(&quot;price&quot;));&#10;                item.setDiscount(rs.getBigDecimal(&quot;discount&quot;));&#10;                item.setQuantity(rs.getInt(&quot;quantity&quot;));&#10;                item.setImageUrl(rs.getString(&quot;image_url&quot;));&#10;&#10;                // Calculate total price for this item&#10;                BigDecimal price = item.getPrice();&#10;                BigDecimal discount = item.getDiscount() != null ? item.getDiscount() : BigDecimal.ZERO;&#10;                BigDecimal finalPrice = price.subtract(discount);&#10;                BigDecimal total = finalPrice.multiply(new BigDecimal(item.getQuantity()));&#10;                item.setPrice(total);&#10;&#10;                cartItems.add(item);&#10;            }&#10;        }&#10;&#10;        return cartItems;&#10;    }&#10;&#10;}" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.dao;&#10;&#10;import org.example.crud_prj_ex.model.CartItem;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class CartDAO {&#10;    private String jdbcURL = &quot;jdbc:mysql://localhost:3306/gomsu&quot;;&#10;    private String jdbcUsername = &quot;root&quot;;&#10;    private String jdbcPassword = &quot;&quot;;&#10;&#10;    private Connection getConnection() throws SQLException {&#10;        try {&#10;            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#10;        } catch (ClassNotFoundException e) {&#10;            throw new SQLException(&quot;MySQL JDBC Driver not found&quot;, e);&#10;        }&#10;        return DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);&#10;    }&#10;&#10;    public List&lt;CartItem&gt; getByUserId(String userId) throws SQLException {&#10;        String sql = &quot;SELECT c.*, p.name AS product_name, p.image_url, p.price, p.discount &quot; +&#10;                &quot;FROM cart c &quot; +&#10;                &quot;JOIN products p ON c.product_id = p.product_id &quot; +&#10;                &quot;WHERE c.user_id = ?&quot;;&#10;&#10;        List&lt;CartItem&gt; items = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, userId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                CartItem item = new CartItem();&#10;                item.setId(rs.getInt(&quot;cart_id&quot;));&#10;                item.setUserId(rs.getString(&quot;user_id&quot;));&#10;                item.setProductId(rs.getInt(&quot;product_id&quot;));&#10;                item.setQuantity(rs.getInt(&quot;quantity&quot;));&#10;                item.setProductName(rs.getString(&quot;product_name&quot;));&#10;                item.setImageUrl(rs.getString(&quot;image_url&quot;));&#10;                item.setPrice(rs.getBigDecimal(&quot;price&quot;));&#10;                item.setDiscount(rs.getBigDecimal(&quot;discount&quot;));&#10;                items.add(item);&#10;            }&#10;        }&#10;        return items;&#10;    }&#10;&#10;    public CartItem getByUserAndProduct(String userId, int productId) throws SQLException {&#10;        String sql = &quot;SELECT c.*, p.name AS product_name, p.image_url, p.price, p.discount &quot; +&#10;                &quot;FROM cart c &quot; +&#10;                &quot;JOIN products p ON c.product_id = p.product_id &quot; +&#10;                &quot;WHERE c.user_id = ? AND c.product_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, userId);&#10;            stmt.setInt(2, productId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                CartItem item = new CartItem();&#10;                item.setId(rs.getInt(&quot;cart_id&quot;));&#10;                item.setUserId(rs.getString(&quot;user_id&quot;));&#10;                item.setProductId(rs.getInt(&quot;product_id&quot;));&#10;                item.setQuantity(rs.getInt(&quot;quantity&quot;));&#10;                item.setProductName(rs.getString(&quot;product_name&quot;));&#10;                item.setImageUrl(rs.getString(&quot;image_url&quot;));&#10;                item.setPrice(rs.getBigDecimal(&quot;price&quot;));&#10;                item.setDiscount(rs.getBigDecimal(&quot;discount&quot;));&#10;                return item;&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public void addToCart(String userId, int productId, int quantity) throws SQLException {&#10;        // Check if item already exists in cart&#10;        CartItem existing = getByUserAndProduct(userId, productId);&#10;&#10;        if (existing != null) {&#10;            // Update quantity if item exists&#10;            updateQuantity(existing.getId(), existing.getQuantity() + quantity);&#10;        } else {&#10;            // Add new item to cart&#10;            String sql = &quot;INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)&quot;;&#10;&#10;            try (Connection conn = getConnection();&#10;                 PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setString(1, userId);&#10;                stmt.setInt(2, productId);&#10;                stmt.setInt(3, quantity);&#10;                stmt.executeUpdate();&#10;            }&#10;        }&#10;    }&#10;&#10;    public void updateQuantity(int cartId, int quantity) throws SQLException {&#10;        String sql = &quot;UPDATE cart SET quantity = ? WHERE cart_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, quantity);&#10;            stmt.setInt(2, cartId);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void removeItem(int cartId) throws SQLException {&#10;        String sql = &quot;DELETE FROM cart WHERE cart_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, cartId);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void clearCart(String userId) throws SQLException {&#10;        String sql = &quot;DELETE FROM cart WHERE user_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, userId);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;    public List&lt;CartItem&gt; getCartItems(String userId) throws SQLException {&#10;        List&lt;CartItem&gt; cartItems = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT c.cart_id, c.product_id, c.quantity, p.name as product_name, &quot; +&#10;                &quot;p.price, p.discount, p.image_url &quot; +&#10;                &quot;FROM cart c &quot; +&#10;                &quot;JOIN products p ON c.product_id = p.product_id &quot; +&#10;                &quot;WHERE c.user_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, userId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                CartItem item = new CartItem();&#10;                item.setId(rs.getInt(&quot;cart_id&quot;));&#10;                item.setProductId(rs.getInt(&quot;product_id&quot;));&#10;                item.setProductName(rs.getString(&quot;product_name&quot;));&#10;                item.setPrice(rs.getBigDecimal(&quot;price&quot;));&#10;                item.setDiscount(rs.getBigDecimal(&quot;discount&quot;));&#10;                item.setQuantity(rs.getInt(&quot;quantity&quot;));&#10;                item.setImageUrl(rs.getString(&quot;image_url&quot;));&#10;&#10;                // Calculate total price for this item&#10;                BigDecimal price = item.getPrice();&#10;                BigDecimal discount = item.getDiscount() != null ? item.getDiscount() : BigDecimal.ZERO;&#10;                BigDecimal finalPrice = price.subtract(discount);&#10;                BigDecimal total = finalPrice.multiply(new BigDecimal(item.getQuantity()));&#10;                item.setPrice(total);&#10;&#10;                cartItems.add(item);&#10;            }&#10;        }&#10;&#10;        return cartItems;&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/model/Order.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/model/Order.java" />
              <option name="originalContent" value="package org.example.crud_prj_ex.model;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.Timestamp;&#10;&#10;public class Order {&#10;    private int orderId;&#10;    private String userId;&#10;    private BigDecimal totalPrice;&#10;    private String status; // enum ('pending', 'delivered', 'success', 'cancel', 'error')&#10;    private Integer addressBookId;&#10;    private String shippingAddress;&#10;    private String phoneNumber;&#10;    private String customerName;&#10;    private String note;&#10;    private Integer discountId;&#10;    private Timestamp createdAt;&#10;    private Timestamp updatedAt;&#10;    private Timestamp deletedAt;&#10;&#10;    // Constructors&#10;    public Order() {&#10;    }&#10;&#10;    public Order(int orderId, String userId, BigDecimal totalPrice, String status, Integer addressBookId,&#10;                 String shippingAddress, String phoneNumber, String customerName, String note,&#10;                 Integer discountId, Timestamp createdAt, Timestamp updatedAt, Timestamp deletedAt) {&#10;        this.orderId = orderId;&#10;        this.userId = userId;&#10;        this.totalPrice = totalPrice;&#10;        this.status = status;&#10;        this.addressBookId = addressBookId;&#10;        this.shippingAddress = shippingAddress;&#10;        this.phoneNumber = phoneNumber;&#10;        this.customerName = customerName;&#10;        this.note = note;&#10;        this.discountId = discountId;&#10;        this.createdAt = createdAt;&#10;        this.updatedAt = updatedAt;&#10;        this.deletedAt = deletedAt;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getOrderId() {&#10;        return orderId;&#10;    }&#10;&#10;    public void setOrderId(int orderId) {&#10;        this.orderId = orderId;&#10;    }&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public BigDecimal getTotalPrice() {&#10;        return totalPrice;&#10;    }&#10;&#10;    public void setTotalPrice(BigDecimal totalPrice) {&#10;        this.totalPrice = totalPrice;&#10;    }&#10;&#10;    public String getStatus() {&#10;        return status;&#10;    }&#10;&#10;    public void setStatus(String status) {&#10;        this.status = status;&#10;    }&#10;&#10;    public Integer getAddressBookId() {&#10;        return addressBookId;&#10;    }&#10;&#10;    public void setAddressBookId(Integer addressBookId) {&#10;        this.addressBookId = addressBookId;&#10;    }&#10;&#10;    public String getShippingAddress() {&#10;        return shippingAddress;&#10;    }&#10;&#10;    public void setShippingAddress(String shippingAddress) {&#10;        this.shippingAddress = shippingAddress;&#10;    }&#10;&#10;    public String getPhoneNumber() {&#10;        return phoneNumber;&#10;    }&#10;&#10;    public void setPhoneNumber(String phoneNumber) {&#10;        this.phoneNumber = phoneNumber;&#10;    }&#10;&#10;    public String getCustomerName() {&#10;        return customerName;&#10;    }&#10;&#10;    public void setCustomerName(String customerName) {&#10;        this.customerName = customerName;&#10;    }&#10;&#10;    public String getNote() {&#10;        return note;&#10;    }&#10;&#10;    public void setNote(String note) {&#10;        this.note = note;&#10;    }&#10;&#10;    public Integer getDiscountId() {&#10;        return discountId;&#10;    }&#10;&#10;    public void setDiscountId(Integer discountId) {&#10;        this.discountId = discountId;&#10;    }&#10;&#10;    public Timestamp getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(Timestamp createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public Timestamp getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(Timestamp updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    public Timestamp getDeletedAt() {&#10;        return deletedAt;&#10;    }&#10;&#10;    public void setDeletedAt(Timestamp deletedAt) {&#10;        this.deletedAt = deletedAt;&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.model;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.Timestamp;&#10;&#10;public class Order {&#10;    private int orderId;&#10;    private String userId;&#10;    private BigDecimal totalPrice;&#10;    private String status; // enum ('pending', 'delivered', 'success', 'cancel', 'error')&#10;    private Integer addressBookId;&#10;    private String shippingAddress;&#10;    private String phoneNumber;&#10;    private String customerName;&#10;    private String note;&#10;    private Integer discountId;&#10;    private Timestamp createdAt;&#10;    private Timestamp updatedAt;&#10;    private Timestamp deletedAt;&#10;    private String paymentMethod;&#10;&#10;    // Constructors&#10;    public Order() {&#10;    }&#10;&#10;    public Order(int orderId, String userId, BigDecimal totalPrice, String status, Integer addressBookId,&#10;                 String shippingAddress, String phoneNumber, String customerName, String note,&#10;                 Integer discountId, Timestamp createdAt, Timestamp updatedAt, Timestamp deletedAt, String paymentMethod) {&#10;        this.orderId = orderId;&#10;        this.userId = userId;&#10;        this.totalPrice = totalPrice;&#10;        this.status = status;&#10;        this.addressBookId = addressBookId;&#10;        this.shippingAddress = shippingAddress;&#10;        this.phoneNumber = phoneNumber;&#10;        this.customerName = customerName;&#10;        this.note = note;&#10;        this.discountId = discountId;&#10;        this.createdAt = createdAt;&#10;        this.updatedAt = updatedAt;&#10;        this.deletedAt = deletedAt;&#10;        this.paymentMethod = paymentMethod;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getOrderId() {&#10;        return orderId;&#10;    }&#10;&#10;    public void setOrderId(int orderId) {&#10;        this.orderId = orderId;&#10;    }&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public BigDecimal getTotalPrice() {&#10;        return totalPrice;&#10;    }&#10;&#10;    public void setTotalPrice(BigDecimal totalPrice) {&#10;        this.totalPrice = totalPrice;&#10;    }&#10;&#10;    public String getStatus() {&#10;        return status;&#10;    }&#10;&#10;    public void setStatus(String status) {&#10;        this.status = status;&#10;    }&#10;&#10;    public Integer getAddressBookId() {&#10;        return addressBookId;&#10;    }&#10;&#10;    public void setAddressBookId(Integer addressBookId) {&#10;        this.addressBookId = addressBookId;&#10;    }&#10;&#10;    public String getShippingAddress() {&#10;        return shippingAddress;&#10;    }&#10;&#10;    public void setShippingAddress(String shippingAddress) {&#10;        this.shippingAddress = shippingAddress;&#10;    }&#10;&#10;    public String getPhoneNumber() {&#10;        return phoneNumber;&#10;    }&#10;&#10;    public void setPhoneNumber(String phoneNumber) {&#10;        this.phoneNumber = phoneNumber;&#10;    }&#10;&#10;    public String getCustomerName() {&#10;        return customerName;&#10;    }&#10;&#10;    public void setCustomerName(String customerName) {&#10;        this.customerName = customerName;&#10;    }&#10;&#10;    public String getNote() {&#10;        return note;&#10;    }&#10;&#10;    public void setNote(String note) {&#10;        this.note = note;&#10;    }&#10;&#10;    public Integer getDiscountId() {&#10;        return discountId;&#10;    }&#10;&#10;    public void setDiscountId(Integer discountId) {&#10;        this.discountId = discountId;&#10;    }&#10;&#10;    public Timestamp getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(Timestamp createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public Timestamp getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(Timestamp updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    public Timestamp getDeletedAt() {&#10;        return deletedAt;&#10;    }&#10;&#10;    public void setDeletedAt(Timestamp deletedAt) {&#10;        this.deletedAt = deletedAt;&#10;    }&#10;&#10;    public String getPaymentMethod() {&#10;        return paymentMethod;&#10;    }&#10;&#10;    public void setPaymentMethod(String paymentMethod) {&#10;        this.paymentMethod = paymentMethod;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>