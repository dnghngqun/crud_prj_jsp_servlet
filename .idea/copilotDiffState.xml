<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/dao/CartDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/dao/CartDAO.java" />
              <option name="originalContent" value="package org.example.crud_prj_ex.dao;&#10;&#10;import org.example.crud_prj_ex.model.CartItem;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class CartDAO {&#10;    private String jdbcURL = &quot;jdbc:mysql://localhost:3306/gomsu&quot;;&#10;    private String jdbcUsername = &quot;root&quot;;&#10;    private String jdbcPassword = &quot;&quot;;&#10;&#10;    private Connection getConnection() throws SQLException {&#10;        try {&#10;            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#10;        } catch (ClassNotFoundException e) {&#10;            throw new SQLException(&quot;MySQL JDBC Driver not found&quot;, e);&#10;        }&#10;        return DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);&#10;    }&#10;&#10;    public List&lt;CartItem&gt; getByUserId(String userId) throws SQLException {&#10;        String sql = &quot;SELECT c.*, p.name AS product_name, p.image_url, p.price, p.discount &quot; +&#10;                &quot;FROM cart c &quot; +&#10;                &quot;JOIN products p ON c.product_id = p.product_id &quot; +&#10;                &quot;WHERE c.user_id = ?&quot;;&#10;&#10;        List&lt;CartItem&gt; items = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, userId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                CartItem item = new CartItem();&#10;                item.setId(rs.getInt(&quot;cart_id&quot;));&#10;                item.setUserId(rs.getString(&quot;user_id&quot;));&#10;                item.setProductId(rs.getInt(&quot;product_id&quot;));&#10;                item.setQuantity(rs.getInt(&quot;quantity&quot;));&#10;                item.setProductName(rs.getString(&quot;product_name&quot;));&#10;                item.setImageUrl(rs.getString(&quot;image_url&quot;));&#10;                item.setPrice(rs.getBigDecimal(&quot;price&quot;));&#10;                item.setDiscount(rs.getBigDecimal(&quot;discount&quot;));&#10;                items.add(item);&#10;            }&#10;        }&#10;        return items;&#10;    }&#10;&#10;    public CartItem getByUserAndProduct(String userId, int productId) throws SQLException {&#10;        String sql = &quot;SELECT c.*, p.name AS product_name, p.image_url, p.price, p.discount &quot; +&#10;                &quot;FROM cart c &quot; +&#10;                &quot;JOIN products p ON c.product_id = p.product_id &quot; +&#10;                &quot;WHERE c.user_id = ? AND c.product_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, userId);&#10;            stmt.setInt(2, productId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                CartItem item = new CartItem();&#10;                item.setId(rs.getInt(&quot;cart_id&quot;));&#10;                item.setUserId(rs.getString(&quot;user_id&quot;));&#10;                item.setProductId(rs.getInt(&quot;product_id&quot;));&#10;                item.setQuantity(rs.getInt(&quot;quantity&quot;));&#10;                item.setProductName(rs.getString(&quot;product_name&quot;));&#10;                item.setImageUrl(rs.getString(&quot;image_url&quot;));&#10;                item.setPrice(rs.getBigDecimal(&quot;price&quot;));&#10;                item.setDiscount(rs.getBigDecimal(&quot;discount&quot;));&#10;                return item;&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public void addToCart(String userId, int productId, int quantity) throws SQLException {&#10;        // Check if item already exists in cart&#10;        CartItem existing = getByUserAndProduct(userId, productId);&#10;&#10;        if (existing != null) {&#10;            // Update quantity if item exists&#10;            updateQuantity(existing.getId(), existing.getQuantity() + quantity);&#10;        } else {&#10;            // Add new item to cart&#10;            String sql = &quot;INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)&quot;;&#10;&#10;            try (Connection conn = getConnection();&#10;                 PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setString(1, userId);&#10;                stmt.setInt(2, productId);&#10;                stmt.setInt(3, quantity);&#10;                stmt.executeUpdate();&#10;            }&#10;        }&#10;    }&#10;&#10;    public void updateQuantity(int cartId, int quantity) throws SQLException {&#10;        String sql = &quot;UPDATE cart SET quantity = ? WHERE cart_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, quantity);&#10;            stmt.setInt(2, cartId);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void removeItem(int cartId) throws SQLException {&#10;        String sql = &quot;DELETE FROM cart WHERE cart_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, cartId);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void clearCart(String userId) throws SQLException {&#10;        String sql = &quot;DELETE FROM cart WHERE user_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, userId);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;    public List&lt;CartItem&gt; getCartItems(String userId) throws SQLException {&#10;        List&lt;CartItem&gt; cartItems = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT c.cart_id, c.product_id, c.quantity, p.name as product_name, &quot; +&#10;                &quot;p.price, p.discount, p.image_url &quot; +&#10;                &quot;FROM cart c &quot; +&#10;                &quot;JOIN products p ON c.product_id = p.product_id &quot; +&#10;                &quot;WHERE c.user_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, userId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                CartItem item = new CartItem();&#10;                item.setId(rs.getInt(&quot;id&quot;));&#10;                item.setProductId(rs.getInt(&quot;product_id&quot;));&#10;                item.setProductName(rs.getString(&quot;product_name&quot;));&#10;                item.setPrice(rs.getBigDecimal(&quot;price&quot;));&#10;                item.setDiscount(rs.getBigDecimal(&quot;discount&quot;));&#10;                item.setQuantity(rs.getInt(&quot;quantity&quot;));&#10;                item.setImageUrl(rs.getString(&quot;image_url&quot;));&#10;&#10;                // Calculate total price for this item&#10;                BigDecimal price = item.getPrice();&#10;                BigDecimal discount = item.getDiscount() != null ? item.getDiscount() : BigDecimal.ZERO;&#10;                BigDecimal finalPrice = price.subtract(discount);&#10;                BigDecimal total = finalPrice.multiply(new BigDecimal(item.getQuantity()));&#10;                item.setPrice(total);&#10;&#10;                cartItems.add(item);&#10;            }&#10;        }&#10;&#10;        return cartItems;&#10;    }&#10;&#10;}" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.dao;&#10;&#10;import org.example.crud_prj_ex.model.CartItem;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class CartDAO {&#10;    private String jdbcURL = &quot;jdbc:mysql://localhost:3306/gomsu&quot;;&#10;    private String jdbcUsername = &quot;root&quot;;&#10;    private String jdbcPassword = &quot;&quot;;&#10;&#10;    private Connection getConnection() throws SQLException {&#10;        try {&#10;            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#10;        } catch (ClassNotFoundException e) {&#10;            throw new SQLException(&quot;MySQL JDBC Driver not found&quot;, e);&#10;        }&#10;        return DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);&#10;    }&#10;&#10;    public List&lt;CartItem&gt; getByUserId(String userId) throws SQLException {&#10;        String sql = &quot;SELECT c.*, p.name AS product_name, p.image_url, p.price, p.discount &quot; +&#10;                &quot;FROM cart c &quot; +&#10;                &quot;JOIN products p ON c.product_id = p.product_id &quot; +&#10;                &quot;WHERE c.user_id = ?&quot;;&#10;&#10;        List&lt;CartItem&gt; items = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, userId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                CartItem item = new CartItem();&#10;                item.setId(rs.getInt(&quot;cart_id&quot;));&#10;                item.setUserId(rs.getString(&quot;user_id&quot;));&#10;                item.setProductId(rs.getInt(&quot;product_id&quot;));&#10;                item.setQuantity(rs.getInt(&quot;quantity&quot;));&#10;                item.setProductName(rs.getString(&quot;product_name&quot;));&#10;                item.setImageUrl(rs.getString(&quot;image_url&quot;));&#10;                item.setPrice(rs.getBigDecimal(&quot;price&quot;));&#10;                item.setDiscount(rs.getBigDecimal(&quot;discount&quot;));&#10;                items.add(item);&#10;            }&#10;        }&#10;        return items;&#10;    }&#10;&#10;    public CartItem getByUserAndProduct(String userId, int productId) throws SQLException {&#10;        String sql = &quot;SELECT c.*, p.name AS product_name, p.image_url, p.price, p.discount &quot; +&#10;                &quot;FROM cart c &quot; +&#10;                &quot;JOIN products p ON c.product_id = p.product_id &quot; +&#10;                &quot;WHERE c.user_id = ? AND c.product_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, userId);&#10;            stmt.setInt(2, productId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                CartItem item = new CartItem();&#10;                item.setId(rs.getInt(&quot;cart_id&quot;));&#10;                item.setUserId(rs.getString(&quot;user_id&quot;));&#10;                item.setProductId(rs.getInt(&quot;product_id&quot;));&#10;                item.setQuantity(rs.getInt(&quot;quantity&quot;));&#10;                item.setProductName(rs.getString(&quot;product_name&quot;));&#10;                item.setImageUrl(rs.getString(&quot;image_url&quot;));&#10;                item.setPrice(rs.getBigDecimal(&quot;price&quot;));&#10;                item.setDiscount(rs.getBigDecimal(&quot;discount&quot;));&#10;                return item;&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public void addToCart(String userId, int productId, int quantity) throws SQLException {&#10;        // Check if item already exists in cart&#10;        CartItem existing = getByUserAndProduct(userId, productId);&#10;&#10;        if (existing != null) {&#10;            // Update quantity if item exists&#10;            updateQuantity(existing.getId(), existing.getQuantity() + quantity);&#10;        } else {&#10;            // Add new item to cart&#10;            String sql = &quot;INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)&quot;;&#10;&#10;            try (Connection conn = getConnection();&#10;                 PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                stmt.setString(1, userId);&#10;                stmt.setInt(2, productId);&#10;                stmt.setInt(3, quantity);&#10;                stmt.executeUpdate();&#10;            }&#10;        }&#10;    }&#10;&#10;    public void updateQuantity(int cartId, int quantity) throws SQLException {&#10;        String sql = &quot;UPDATE cart SET quantity = ? WHERE cart_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, quantity);&#10;            stmt.setInt(2, cartId);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void removeItem(int cartId) throws SQLException {&#10;        String sql = &quot;DELETE FROM cart WHERE cart_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, cartId);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void clearCart(String userId) throws SQLException {&#10;        String sql = &quot;DELETE FROM cart WHERE user_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, userId);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;    public List&lt;CartItem&gt; getCartItems(String userId) throws SQLException {&#10;        List&lt;CartItem&gt; cartItems = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT c.cart_id, c.product_id, c.quantity, p.name as product_name, &quot; +&#10;                &quot;p.price, p.discount, p.image_url &quot; +&#10;                &quot;FROM cart c &quot; +&#10;                &quot;JOIN products p ON c.product_id = p.product_id &quot; +&#10;                &quot;WHERE c.user_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, userId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                CartItem item = new CartItem();&#10;                item.setId(rs.getInt(&quot;cart_id&quot;));&#10;                item.setProductId(rs.getInt(&quot;product_id&quot;));&#10;                item.setProductName(rs.getString(&quot;product_name&quot;));&#10;                item.setPrice(rs.getBigDecimal(&quot;price&quot;));&#10;                item.setDiscount(rs.getBigDecimal(&quot;discount&quot;));&#10;                item.setQuantity(rs.getInt(&quot;quantity&quot;));&#10;                item.setImageUrl(rs.getString(&quot;image_url&quot;));&#10;&#10;                // Calculate total price for this item&#10;                BigDecimal price = item.getPrice();&#10;                BigDecimal discount = item.getDiscount() != null ? item.getDiscount() : BigDecimal.ZERO;&#10;                BigDecimal finalPrice = price.subtract(discount);&#10;                BigDecimal total = finalPrice.multiply(new BigDecimal(item.getQuantity()));&#10;                item.setTotalPrice(total);&#10;&#10;                cartItems.add(item);&#10;            }&#10;        }&#10;&#10;        return cartItems;&#10;    }&#10;&#10;    public int getCartItemCount(String userId) throws SQLException {&#10;        System.out.println(&quot;=== CartDAO.getCartItemCount() for userId: &quot; + userId + &quot; ===&quot;);&#10;        String sql = &quot;SELECT SUM(quantity) FROM cart WHERE user_id = ?&quot;;&#10;        &#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, userId);&#10;            ResultSet rs = stmt.executeQuery();&#10;            &#10;            if (rs.next()) {&#10;                int count = rs.getInt(1);&#10;                System.out.println(&quot;Cart item count from database: &quot; + count);&#10;                return count;&#10;            }&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;SQLException in getCartItemCount: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            throw e;&#10;        }&#10;        return 0;&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/dao/CategoryDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/dao/CategoryDAO.java" />
              <option name="originalContent" value="package org.example.crud_prj_ex.dao;&#10;&#10;import org.example.crud_prj_ex.model.Category;&#10;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class CategoryDAO {&#10;    private String jdbcURL = &quot;jdbc:mysql://localhost:3306/gomsu&quot;;&#10;    private String jdbcUsername = &quot;root&quot;;&#10;    private String jdbcPassword = &quot;&quot;;&#10;&#10;    private Connection getConnection() throws SQLException {&#10;        try {&#10;            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#10;        } catch (ClassNotFoundException e) {&#10;            throw new SQLException(&quot;MySQL JDBC Driver not found&quot;, e);&#10;        }&#10;        return DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);&#10;    }&#10;&#10;    public List&lt;Category&gt; getAll() throws SQLException {&#10;        String sql = &quot;SELECT * FROM categories WHERE deleted_at IS NULL ORDER BY name&quot;;&#10;        List&lt;Category&gt; list = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            while (rs.next()) {&#10;                list.add(mapResultSetToCategory(rs));&#10;            }&#10;        }&#10;        return list;&#10;    }&#10;&#10;    public Category getById(int id) throws SQLException {&#10;        String sql = &quot;SELECT * FROM categories WHERE category_id = ? AND deleted_at IS NULL&quot;;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, id);&#10;            ResultSet rs = stmt.executeQuery();&#10;            if (rs.next()) {&#10;                return mapResultSetToCategory(rs);&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public void insert(Category category) throws SQLException {&#10;        String sql = &quot;INSERT INTO categories (name, description) VALUES (?, ?)&quot;;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, category.getName());&#10;            stmt.setString(2, category.getDescription());&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void update(Category category) throws SQLException {&#10;        String sql = &quot;UPDATE categories SET name = ?, description = ? WHERE category_id = ?&quot;;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, category.getName());&#10;            stmt.setString(2, category.getDescription());&#10;            stmt.setInt(3, category.getCategoryId());&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void delete(int id) throws SQLException {&#10;        String sql = &quot;UPDATE categories SET deleted_at = CURRENT_TIMESTAMP WHERE category_id = ?&quot;;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, id);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public long count() throws SQLException {&#10;        String sql = &quot;SELECT COUNT(*) FROM categories WHERE deleted_at IS NULL&quot;;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            if (rs.next()) {&#10;                return rs.getLong(1);&#10;            }&#10;        }&#10;        return 0;&#10;    }&#10;&#10;    private Category mapResultSetToCategory(ResultSet rs) throws SQLException {&#10;        Category category = new Category();&#10;        category.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;        category.setName(rs.getString(&quot;name&quot;));&#10;        category.setDescription(rs.getString(&quot;description&quot;));&#10;        category.setCreatedAt(rs.getTimestamp(&quot;created_at&quot;));&#10;        category.setUpdatedAt(rs.getTimestamp(&quot;updated_at&quot;));&#10;        category.setDeletedAt(rs.getTimestamp(&quot;deleted_at&quot;));&#10;        return category;&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.dao;&#10;&#10;import org.example.crud_prj_ex.model.Category;&#10;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class CategoryDAO {&#10;    private String jdbcURL = &quot;jdbc:mysql://localhost:3306/gomsu&quot;;&#10;    private String jdbcUsername = &quot;root&quot;;&#10;    private String jdbcPassword = &quot;&quot;;&#10;&#10;    private Connection getConnection() throws SQLException {&#10;        try {&#10;            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#10;        } catch (ClassNotFoundException e) {&#10;            throw new SQLException(&quot;MySQL JDBC Driver not found&quot;, e);&#10;        }&#10;        return DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);&#10;    }&#10;&#10;    public List&lt;Category&gt; getAll() throws SQLException {&#10;        System.out.println(&quot;=== CategoryDAO.getAll() START ===&quot;);&#10;        String sql = &quot;SELECT * FROM categories WHERE deleted_at IS NULL ORDER BY name&quot;;&#10;        System.out.println(&quot;SQL Query: &quot; + sql);&#10;&#10;        List&lt;Category&gt; list = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            System.out.println(&quot;Database connection successful for categories&quot;);&#10;            int count = 0;&#10;            while (rs.next()) {&#10;                count++;&#10;                Category category = mapResultSetToCategory(rs);&#10;                list.add(category);&#10;                if (count &lt;= 3) {&#10;                    System.out.println(&quot;Category &quot; + count + &quot;: &quot; + category.getName() + &quot; (ID: &quot; + category.getCategoryId() + &quot;)&quot;);&#10;                }&#10;            }&#10;            System.out.println(&quot;Total categories found: &quot; + count);&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;SQLException in CategoryDAO.getAll(): &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            throw e;&#10;        }&#10;        System.out.println(&quot;=== CategoryDAO.getAll() END - Returning &quot; + list.size() + &quot; categories ===&quot;);&#10;        return list;&#10;    }&#10;&#10;    public Category getById(int id) throws SQLException {&#10;        String sql = &quot;SELECT * FROM categories WHERE category_id = ? AND deleted_at IS NULL&quot;;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, id);&#10;            ResultSet rs = stmt.executeQuery();&#10;            if (rs.next()) {&#10;                return mapResultSetToCategory(rs);&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public void insert(Category category) throws SQLException {&#10;        String sql = &quot;INSERT INTO categories (name) VALUES (?)&quot;;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, category.getName());&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void update(Category category) throws SQLException {&#10;        String sql = &quot;UPDATE categories SET name = ? WHERE category_id = ?&quot;;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, category.getName());&#10;            stmt.setInt(2, category.getCategoryId());&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void delete(int id) throws SQLException {&#10;        String sql = &quot;UPDATE categories SET deleted_at = CURRENT_TIMESTAMP WHERE category_id = ?&quot;;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, id);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public long count() throws SQLException {&#10;        String sql = &quot;SELECT COUNT(*) FROM categories WHERE deleted_at IS NULL&quot;;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            if (rs.next()) {&#10;                return rs.getLong(1);&#10;            }&#10;        }&#10;        return 0;&#10;    }&#10;&#10;    private Category mapResultSetToCategory(ResultSet rs) throws SQLException {&#10;        Category category = new Category();&#10;        category.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;        category.setName(rs.getString(&quot;name&quot;));&#10;        category.setCreatedAt(rs.getTimestamp(&quot;created_at&quot;));&#10;        category.setUpdatedAt(rs.getTimestamp(&quot;updated_at&quot;));&#10;        category.setDeletedAt(rs.getTimestamp(&quot;deleted_at&quot;));&#10;        return category;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/dao/OrderDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/dao/OrderDAO.java" />
              <option name="originalContent" value="package org.example.crud_prj_ex.dao;&#10;&#10;import org.example.crud_prj_ex.model.CartItem;&#10;import org.example.crud_prj_ex.model.Order;&#10;import org.example.crud_prj_ex.model.OrderItem;&#10;import org.example.crud_prj_ex.model.Product;&#10;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class OrderDAO {&#10;    private String jdbcURL = &quot;jdbc:mysql://localhost:3306/gomsu&quot;;&#10;    private String jdbcUsername = &quot;root&quot;;&#10;    private String jdbcPassword = &quot;&quot;;&#10;&#10;    private Connection getConnection() throws SQLException {&#10;        try {&#10;            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#10;        } catch (ClassNotFoundException e) {&#10;            throw new SQLException(&quot;MySQL JDBC Driver not found&quot;, e);&#10;        }&#10;        return DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);&#10;    }&#10;&#10;    public int createOrder(Order order, List&lt;OrderItem&gt; orderItems) throws SQLException {&#10;        String orderSql = &quot;INSERT INTO orders (user_id, total_price, status, shipping_address, customer_name, phone_number, note) VALUES (?, ?, ?, ?, ?, ?, ?)&quot;;&#10;        String orderItemSql = &quot;INSERT INTO order_details (order_id, product_id, price, quantity, status) VALUES (?, ?, ?, ?, ?)&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = getConnection();&#10;            conn.setAutoCommit(false);&#10;&#10;            // Insert order&#10;            PreparedStatement orderStmt = conn.prepareStatement(orderSql, Statement.RETURN_GENERATED_KEYS);&#10;            orderStmt.setString(1, order.getUserId());&#10;            orderStmt.setBigDecimal(2, order.getTotalPrice());&#10;            orderStmt.setString(3, order.getStatus());&#10;            orderStmt.setString(4, order.getShippingAddress());&#10;            orderStmt.setString(5, order.getCustomerName());&#10;            orderStmt.setString(6, order.getPhoneNumber());&#10;            orderStmt.setString(7, order.getNote());&#10;&#10;            orderStmt.executeUpdate();&#10;&#10;            ResultSet rs = orderStmt.getGeneratedKeys();&#10;            int orderId = 0;&#10;            if (rs.next()) {&#10;                orderId = rs.getInt(1);&#10;            }&#10;&#10;            // Insert order items&#10;            PreparedStatement itemStmt = conn.prepareStatement(orderItemSql);&#10;            for (OrderItem item : orderItems) {&#10;                itemStmt.setInt(1, orderId);&#10;                itemStmt.setInt(2, item.getProductId());&#10;                itemStmt.setBigDecimal(3, item.getPrice());&#10;                itemStmt.setInt(4, item.getQuantity());&#10;                itemStmt.setString(5, &quot;pending&quot;);&#10;                itemStmt.addBatch();&#10;            }&#10;            itemStmt.executeBatch();&#10;&#10;            conn.commit();&#10;            return orderId;&#10;&#10;        } catch (SQLException e) {&#10;            if (conn != null) {&#10;                conn.rollback();&#10;            }&#10;            throw e;&#10;        } finally {&#10;            if (conn != null) {&#10;                conn.setAutoCommit(true);&#10;                conn.close();&#10;            }&#10;        }&#10;    }&#10;&#10;    public Order getById(int orderId) throws SQLException {&#10;        String sql = &quot;SELECT * FROM orders WHERE order_id = ?&quot;;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, orderId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                return mapResultSetToOrder(rs);&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public List&lt;Order&gt; getByUserId(String userId) throws SQLException {&#10;        String sql = &quot;SELECT * FROM orders WHERE user_id = ? ORDER BY created_at DESC&quot;;&#10;        List&lt;Order&gt; orders = new ArrayList&lt;&gt;();&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, userId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                orders.add(mapResultSetToOrder(rs));&#10;            }&#10;        }&#10;        return orders;&#10;    }&#10;&#10;    public List&lt;OrderItem&gt; getOrderItems(int orderId) throws SQLException {&#10;        String sql = &quot;SELECT od.*, p.name AS product_name, (od.price * od.quantity) AS total FROM order_details od JOIN products p ON od.product_id = p.product_id WHERE od.order_id = ?&quot;;&#10;        List&lt;OrderItem&gt; items = new ArrayList&lt;&gt;();&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, orderId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                OrderItem item = new OrderItem();&#10;                item.setOrderItemId(rs.getInt(&quot;order_detail_id&quot;));&#10;                item.setOrderId(rs.getInt(&quot;order_id&quot;));&#10;                item.setProductId(rs.getInt(&quot;product_id&quot;));&#10;                item.setProductName(rs.getString(&quot;product_name&quot;));&#10;                item.setPrice(rs.getBigDecimal(&quot;price&quot;));&#10;                item.setQuantity(rs.getInt(&quot;quantity&quot;));&#10;                item.setTotal(rs.getBigDecimal(&quot;total&quot;));&#10;                items.add(item);&#10;            }&#10;        }&#10;        return items;&#10;    }&#10;&#10;    public List&lt;Order&gt; getOrdersByUserId(String userId) throws SQLException {&#10;        String sql = &quot;SELECT * FROM orders WHERE user_id = ? AND deleted_at IS NULL ORDER BY created_at DESC&quot;;&#10;        List&lt;Order&gt; orders = new ArrayList&lt;&gt;();&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, userId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Order order = mapResultSetToOrder(rs);&#10;                // Load order items for each order&#10;                order.setOrderItems(getOrderItemsByOrderId(order.getOrderId()));&#10;                orders.add(order);&#10;            }&#10;        }&#10;        return orders;&#10;    }&#10;&#10;    public Order getOrderById(int orderId) throws SQLException {&#10;        String sql = &quot;SELECT * FROM orders WHERE order_id = ? AND deleted_at IS NULL&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, orderId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                Order order = mapResultSetToOrder(rs);&#10;                order.setOrderItems(getOrderItemsByOrderId(orderId));&#10;                return order;&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public List&lt;OrderItem&gt; getOrderItemsByOrderId(int orderId) throws SQLException {&#10;        String sql = &quot;SELECT od.*, p.name, p.description, p.image_url, p.category_id, &quot; +&#10;                    &quot;c.name as category_name FROM order_details od &quot; +&#10;                    &quot;LEFT JOIN products p ON od.product_id = p.product_id &quot; +&#10;                    &quot;LEFT JOIN categories c ON p.category_id = c.category_id &quot; +&#10;                    &quot;WHERE od.order_id = ? AND od.deleted_at IS NULL&quot;;&#10;&#10;        List&lt;OrderItem&gt; orderItems = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, orderId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                OrderItem orderItem = mapResultSetToOrderItem(rs);&#10;                orderItems.add(orderItem);&#10;            }&#10;        }&#10;        return orderItems;&#10;    }&#10;&#10;    public void updateOrderStatus(int orderId, String status) throws SQLException {&#10;        String sql = &quot;UPDATE orders SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE order_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, status);&#10;            stmt.setInt(2, orderId);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void cancelOrder(int orderId) throws SQLException {&#10;        updateOrderStatus(orderId, &quot;cancelled&quot;);&#10;    }&#10;&#10;    private Order mapResultSetToOrder(ResultSet rs) throws SQLException {&#10;        Order order = new Order();&#10;        order.setOrderId(rs.getInt(&quot;order_id&quot;));&#10;        order.setUserId(rs.getString(&quot;user_id&quot;));&#10;        order.setTotalPrice(rs.getBigDecimal(&quot;total_price&quot;));&#10;        order.setStatus(rs.getString(&quot;status&quot;));&#10;        order.setAddressBookId(rs.getInt(&quot;address_book_id&quot;));&#10;        order.setShippingAddress(rs.getString(&quot;shipping_address&quot;));&#10;        order.setPhoneNumber(rs.getString(&quot;phone_number&quot;));&#10;        order.setCustomerName(rs.getString(&quot;customer_name&quot;));&#10;        order.setNote(rs.getString(&quot;note&quot;));&#10;&#10;        if (rs.getObject(&quot;discount_id&quot;) != null) {&#10;            order.setDiscountId(rs.getInt(&quot;discount_id&quot;));&#10;        }&#10;&#10;        order.setCreatedAt(rs.getTimestamp(&quot;created_at&quot;));&#10;        order.setUpdatedAt(rs.getTimestamp(&quot;updated_at&quot;));&#10;        order.setDeletedAt(rs.getTimestamp(&quot;deleted_at&quot;));&#10;&#10;        return order;&#10;    }&#10;&#10;    private OrderItem mapResultSetToOrderItem(ResultSet rs) throws SQLException {&#10;        OrderItem orderItem = new OrderItem();&#10;        orderItem.setOrderDetailId(rs.getInt(&quot;order_detail_id&quot;));&#10;        orderItem.setOrderId(rs.getInt(&quot;order_id&quot;));&#10;        orderItem.setProductId(rs.getInt(&quot;product_id&quot;));&#10;        orderItem.setQuantity(rs.getInt(&quot;quantity&quot;));&#10;        orderItem.setPrice(rs.getBigDecimal(&quot;price&quot;));&#10;        orderItem.setStatus(rs.getString(&quot;status&quot;));&#10;        orderItem.setCreatedAt(rs.getTimestamp(&quot;created_at&quot;));&#10;        orderItem.setUpdatedAt(rs.getTimestamp(&quot;updated_at&quot;));&#10;        orderItem.setDeletedAt(rs.getTimestamp(&quot;deleted_at&quot;));&#10;&#10;        // Map product info&#10;        try {&#10;            ProductDAO productDAO = new ProductDAO();&#10;            Product product = new Product();&#10;            product.setId(rs.getInt(&quot;product_id&quot;));&#10;            product.setName(rs.getString(&quot;name&quot;));&#10;            product.setDescription(rs.getString(&quot;description&quot;));&#10;            product.setImageUrl(rs.getString(&quot;image_url&quot;));&#10;            product.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;            product.setCategoryName(rs.getString(&quot;category_name&quot;));&#10;&#10;            orderItem.setProduct(product);&#10;        } catch (SQLException e) {&#10;            // If product data is not available, set a minimal product object&#10;            Product product = new Product();&#10;            product.setId(rs.getInt(&quot;product_id&quot;));&#10;            product.setName(&quot;Sản phẩm đã bị xóa&quot;);&#10;            orderItem.setProduct(product);&#10;        }&#10;&#10;        return orderItem;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.dao;&#10;&#10;import org.example.crud_prj_ex.model.CartItem;&#10;import org.example.crud_prj_ex.model.Order;&#10;import org.example.crud_prj_ex.model.OrderItem;&#10;import org.example.crud_prj_ex.model.Product;&#10;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class OrderDAO {&#10;    private String jdbcURL = &quot;jdbc:mysql://localhost:3306/gomsu&quot;;&#10;    private String jdbcUsername = &quot;root&quot;;&#10;    private String jdbcPassword = &quot;&quot;;&#10;&#10;    private Connection getConnection() throws SQLException {&#10;        try {&#10;            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#10;        } catch (ClassNotFoundException e) {&#10;            throw new SQLException(&quot;MySQL JDBC Driver not found&quot;, e);&#10;        }&#10;        return DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);&#10;    }&#10;&#10;    public int createOrder(Order order, List&lt;OrderItem&gt; orderItems) throws SQLException {&#10;        String orderSql = &quot;INSERT INTO orders (user_id, total_price, status, shipping_address, customer_name, phone_number, note) VALUES (?, ?, ?, ?, ?, ?, ?)&quot;;&#10;        String orderItemSql = &quot;INSERT INTO order_details (order_id, product_id, price, quantity, status) VALUES (?, ?, ?, ?, ?)&quot;;&#10;&#10;        Connection conn = null;&#10;        try {&#10;            conn = getConnection();&#10;            conn.setAutoCommit(false);&#10;&#10;            // Insert order&#10;            PreparedStatement orderStmt = conn.prepareStatement(orderSql, Statement.RETURN_GENERATED_KEYS);&#10;            orderStmt.setString(1, order.getUserId());&#10;            orderStmt.setBigDecimal(2, order.getTotalPrice());&#10;            orderStmt.setString(3, order.getStatus());&#10;            orderStmt.setString(4, order.getShippingAddress());&#10;            orderStmt.setString(5, order.getCustomerName());&#10;            orderStmt.setString(6, order.getPhoneNumber());&#10;            orderStmt.setString(7, order.getNote());&#10;&#10;            orderStmt.executeUpdate();&#10;&#10;            ResultSet rs = orderStmt.getGeneratedKeys();&#10;            int orderId = 0;&#10;            if (rs.next()) {&#10;                orderId = rs.getInt(1);&#10;            }&#10;&#10;            // Insert order items&#10;            PreparedStatement itemStmt = conn.prepareStatement(orderItemSql);&#10;            for (OrderItem item : orderItems) {&#10;                itemStmt.setInt(1, orderId);&#10;                itemStmt.setInt(2, item.getProductId());&#10;                itemStmt.setBigDecimal(3, item.getPrice());&#10;                itemStmt.setInt(4, item.getQuantity());&#10;                itemStmt.setString(5, &quot;pending&quot;);&#10;                itemStmt.addBatch();&#10;            }&#10;            itemStmt.executeBatch();&#10;&#10;            conn.commit();&#10;            return orderId;&#10;&#10;        } catch (SQLException e) {&#10;            if (conn != null) {&#10;                conn.rollback();&#10;            }&#10;            throw e;&#10;        } finally {&#10;            if (conn != null) {&#10;                conn.setAutoCommit(true);&#10;                conn.close();&#10;            }&#10;        }&#10;    }&#10;&#10;    public int insertOrder(Order order, List&lt;CartItem&gt; cartItems) throws SQLException {&#10;        // Convert CartItems to OrderItems&#10;        List&lt;OrderItem&gt; orderItems = new ArrayList&lt;&gt;();&#10;        for (CartItem cartItem : cartItems) {&#10;            OrderItem orderItem = new OrderItem();&#10;            orderItem.setProductId(cartItem.getProductId());&#10;            orderItem.setQuantity(cartItem.getQuantity());&#10;            orderItem.setPrice(cartItem.getProduct().getPrice());&#10;            orderItem.setStatus(&quot;pending&quot;);&#10;            orderItems.add(orderItem);&#10;        }&#10;&#10;        return createOrder(order, orderItems);&#10;    }&#10;&#10;    public Order getById(int orderId) throws SQLException {&#10;        String sql = &quot;SELECT * FROM orders WHERE order_id = ?&quot;;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, orderId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                return mapResultSetToOrder(rs);&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public List&lt;Order&gt; getByUserId(String userId) throws SQLException {&#10;        String sql = &quot;SELECT * FROM orders WHERE user_id = ? ORDER BY created_at DESC&quot;;&#10;        List&lt;Order&gt; orders = new ArrayList&lt;&gt;();&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, userId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                orders.add(mapResultSetToOrder(rs));&#10;            }&#10;        }&#10;        return orders;&#10;    }&#10;&#10;    public List&lt;OrderItem&gt; getOrderItems(int orderId) throws SQLException {&#10;        String sql = &quot;SELECT od.*, p.name AS product_name, (od.price * od.quantity) AS total FROM order_details od JOIN products p ON od.product_id = p.product_id WHERE od.order_id = ?&quot;;&#10;        List&lt;OrderItem&gt; items = new ArrayList&lt;&gt;();&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, orderId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                OrderItem item = new OrderItem();&#10;                item.setOrderItemId(rs.getInt(&quot;order_detail_id&quot;));&#10;                item.setOrderId(rs.getInt(&quot;order_id&quot;));&#10;                item.setProductId(rs.getInt(&quot;product_id&quot;));&#10;                item.setProductName(rs.getString(&quot;product_name&quot;));&#10;                item.setPrice(rs.getBigDecimal(&quot;price&quot;));&#10;                item.setQuantity(rs.getInt(&quot;quantity&quot;));&#10;                item.setTotal(rs.getBigDecimal(&quot;total&quot;));&#10;                items.add(item);&#10;            }&#10;        }&#10;        return items;&#10;    }&#10;&#10;    public List&lt;Order&gt; getOrdersByUserId(String userId) throws SQLException {&#10;        String sql = &quot;SELECT * FROM orders WHERE user_id = ? AND deleted_at IS NULL ORDER BY created_at DESC&quot;;&#10;        List&lt;Order&gt; orders = new ArrayList&lt;&gt;();&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, userId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Order order = mapResultSetToOrder(rs);&#10;                // Load order items for each order&#10;                order.setOrderItems(getOrderItemsByOrderId(order.getOrderId()));&#10;                orders.add(order);&#10;            }&#10;        }&#10;        return orders;&#10;    }&#10;&#10;    public Order getOrderById(int orderId) throws SQLException {&#10;        String sql = &quot;SELECT * FROM orders WHERE order_id = ? AND deleted_at IS NULL&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, orderId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                Order order = mapResultSetToOrder(rs);&#10;                order.setOrderItems(getOrderItemsByOrderId(orderId));&#10;                return order;&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public List&lt;OrderItem&gt; getOrderItemsByOrderId(int orderId) throws SQLException {&#10;        String sql = &quot;SELECT od.*, p.name, p.description, p.image_url, p.category_id, &quot; +&#10;                    &quot;c.name as category_name FROM order_details od &quot; +&#10;                    &quot;LEFT JOIN products p ON od.product_id = p.product_id &quot; +&#10;                    &quot;LEFT JOIN categories c ON p.category_id = c.category_id &quot; +&#10;                    &quot;WHERE od.order_id = ? AND od.deleted_at IS NULL&quot;;&#10;&#10;        List&lt;OrderItem&gt; orderItems = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, orderId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                OrderItem orderItem = mapResultSetToOrderItem(rs);&#10;                orderItems.add(orderItem);&#10;            }&#10;        }&#10;        return orderItems;&#10;    }&#10;&#10;    public void updateOrderStatus(int orderId, String status) throws SQLException {&#10;        String sql = &quot;UPDATE orders SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE order_id = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, status);&#10;            stmt.setInt(2, orderId);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void cancelOrder(int orderId) throws SQLException {&#10;        updateOrderStatus(orderId, &quot;cancelled&quot;);&#10;    }&#10;&#10;    private Order mapResultSetToOrder(ResultSet rs) throws SQLException {&#10;        Order order = new Order();&#10;        order.setOrderId(rs.getInt(&quot;order_id&quot;));&#10;        order.setUserId(rs.getString(&quot;user_id&quot;));&#10;        order.setTotalPrice(rs.getBigDecimal(&quot;total_price&quot;));&#10;        order.setStatus(rs.getString(&quot;status&quot;));&#10;        order.setAddressBookId(rs.getInt(&quot;address_book_id&quot;));&#10;        order.setShippingAddress(rs.getString(&quot;shipping_address&quot;));&#10;        order.setPhoneNumber(rs.getString(&quot;phone_number&quot;));&#10;        order.setCustomerName(rs.getString(&quot;customer_name&quot;));&#10;        order.setNote(rs.getString(&quot;note&quot;));&#10;&#10;        if (rs.getObject(&quot;discount_id&quot;) != null) {&#10;            order.setDiscountId(rs.getInt(&quot;discount_id&quot;));&#10;        }&#10;&#10;        order.setCreatedAt(rs.getTimestamp(&quot;created_at&quot;));&#10;        order.setUpdatedAt(rs.getTimestamp(&quot;updated_at&quot;));&#10;        order.setDeletedAt(rs.getTimestamp(&quot;deleted_at&quot;));&#10;&#10;        return order;&#10;    }&#10;&#10;    private OrderItem mapResultSetToOrderItem(ResultSet rs) throws SQLException {&#10;        OrderItem orderItem = new OrderItem();&#10;        orderItem.setOrderDetailId(rs.getInt(&quot;order_detail_id&quot;));&#10;        orderItem.setOrderId(rs.getInt(&quot;order_id&quot;));&#10;        orderItem.setProductId(rs.getInt(&quot;product_id&quot;));&#10;        orderItem.setQuantity(rs.getInt(&quot;quantity&quot;));&#10;        orderItem.setPrice(rs.getBigDecimal(&quot;price&quot;));&#10;        orderItem.setStatus(rs.getString(&quot;status&quot;));&#10;        orderItem.setCreatedAt(rs.getTimestamp(&quot;created_at&quot;));&#10;        orderItem.setUpdatedAt(rs.getTimestamp(&quot;updated_at&quot;));&#10;        orderItem.setDeletedAt(rs.getTimestamp(&quot;deleted_at&quot;));&#10;&#10;        // Map product info&#10;        try {&#10;            ProductDAO productDAO = new ProductDAO();&#10;            Product product = new Product();&#10;            product.setId(rs.getInt(&quot;product_id&quot;));&#10;            product.setName(rs.getString(&quot;name&quot;));&#10;            product.setDescription(rs.getString(&quot;description&quot;));&#10;            product.setImageUrl(rs.getString(&quot;image_url&quot;));&#10;            product.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;            product.setCategoryName(rs.getString(&quot;category_name&quot;));&#10;&#10;            orderItem.setProduct(product);&#10;        } catch (SQLException e) {&#10;            // If product data is not available, set a minimal product object&#10;            Product product = new Product();&#10;            product.setId(rs.getInt(&quot;product_id&quot;));&#10;            product.setName(&quot;Sản phẩm đã bị xóa&quot;);&#10;            orderItem.setProduct(product);&#10;        }&#10;&#10;        return orderItem;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/model/CartItem.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/model/CartItem.java" />
              <option name="originalContent" value="package org.example.crud_prj_ex.model;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.Timestamp;&#10;&#10;public class CartItem {&#10;    private int cartId;&#10;    private String userId;&#10;    private int productId;&#10;    private int quantity;&#10;    private Timestamp createdAt;&#10;    private Timestamp updatedAt;&#10;&#10;    // Related objects&#10;    private Product product;&#10;    private User user;&#10;&#10;    // Default constructor&#10;    public CartItem() {}&#10;&#10;    // Constructor with essential fields&#10;    public CartItem(String userId, int productId, int quantity) {&#10;        this.userId = userId;&#10;        this.productId = productId;&#10;        this.quantity = quantity;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getCartId() {&#10;        return cartId;&#10;    }&#10;&#10;    public void setCartId(int cartId) {&#10;        this.cartId = cartId;&#10;    }&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public int getProductId() {&#10;        return productId;&#10;    }&#10;&#10;    public void setProductId(int productId) {&#10;        this.productId = productId;&#10;    }&#10;&#10;    public int getQuantity() {&#10;        return quantity;&#10;    }&#10;&#10;    public void setQuantity(int quantity) {&#10;        this.quantity = quantity;&#10;    }&#10;&#10;    public Timestamp getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(Timestamp createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public Timestamp getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(Timestamp updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    // Related objects getters/setters&#10;    public Product getProduct() {&#10;        return product;&#10;    }&#10;&#10;    public void setProduct(Product product) {&#10;        this.product = product;&#10;    }&#10;&#10;    public User getUser() {&#10;        return user;&#10;    }&#10;&#10;    public void setUser(User user) {&#10;        this.user = user;&#10;    }&#10;&#10;    // Utility methods&#10;    public BigDecimal getTotal() {&#10;        if (product != null &amp;&amp; product.getPrice() != null) {&#10;            BigDecimal finalPrice = product.getPrice();&#10;&#10;            // Apply discount if available&#10;            if (product.getDiscount() != null &amp;&amp; product.getDiscount().compareTo(BigDecimal.ZERO) &gt; 0) {&#10;                BigDecimal discountMultiplier = BigDecimal.ONE.subtract(&#10;                    product.getDiscount().divide(BigDecimal.valueOf(100))&#10;                );&#10;                finalPrice = product.getPrice().multiply(discountMultiplier);&#10;            }&#10;&#10;            return finalPrice.multiply(BigDecimal.valueOf(quantity));&#10;        }&#10;        return BigDecimal.ZERO;&#10;    }&#10;&#10;    public BigDecimal getItemPrice() {&#10;        if (product != null &amp;&amp; product.getPrice() != null) {&#10;            BigDecimal finalPrice = product.getPrice();&#10;&#10;            // Apply discount if available&#10;            if (product.getDiscount() != null &amp;&amp; product.getDiscount().compareTo(BigDecimal.ZERO) &gt; 0) {&#10;                BigDecimal discountMultiplier = BigDecimal.ONE.subtract(&#10;                    product.getDiscount().divide(BigDecimal.valueOf(100))&#10;                );&#10;                finalPrice = product.getPrice().multiply(discountMultiplier);&#10;            }&#10;&#10;            return finalPrice;&#10;        }&#10;        return BigDecimal.ZERO;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;CartItem{&quot; +&#10;                &quot;cartId=&quot; + cartId +&#10;                &quot;, userId='&quot; + userId + '\'' +&#10;                &quot;, productId=&quot; + productId +&#10;                &quot;, quantity=&quot; + quantity +&#10;                &quot;, createdAt=&quot; + createdAt +&#10;                &quot;, updatedAt=&quot; + updatedAt +&#10;                '}';&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object o) {&#10;        if (this == o) return true;&#10;        if (o == null || getClass() != o.getClass()) return false;&#10;        CartItem cartItem = (CartItem) o;&#10;        return cartId == cartItem.cartId;&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Integer.hashCode(cartId);&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.model;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.Timestamp;&#10;&#10;public class CartItem {&#10;    private int cartId;&#10;    private String userId;&#10;    private int productId;&#10;    private int quantity;&#10;    private Timestamp createdAt;&#10;    private Timestamp updatedAt;&#10;&#10;    // Related objects&#10;    private Product product;&#10;    private User user;&#10;&#10;    // Default constructor&#10;    public CartItem() {}&#10;&#10;    // Constructor with essential fields&#10;    public CartItem(String userId, int productId, int quantity) {&#10;        this.userId = userId;&#10;        this.productId = productId;&#10;        this.quantity = quantity;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getCartId() {&#10;        return cartId;&#10;    }&#10;&#10;    public void setCartId(int cartId) {&#10;        this.cartId = cartId;&#10;    }&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public int getProductId() {&#10;        return productId;&#10;    }&#10;&#10;    public void setProductId(int productId) {&#10;        this.productId = productId;&#10;    }&#10;&#10;    public int getQuantity() {&#10;        return quantity;&#10;    }&#10;&#10;    public void setQuantity(int quantity) {&#10;        this.quantity = quantity;&#10;    }&#10;&#10;    public Timestamp getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(Timestamp createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public Timestamp getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(Timestamp updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    // Related objects getters/setters&#10;    public Product getProduct() {&#10;        return product;&#10;    }&#10;&#10;    public void setProduct(Product product) {&#10;        this.product = product;&#10;    }&#10;&#10;    public User getUser() {&#10;        return user;&#10;    }&#10;&#10;    public void setUser(User user) {&#10;        this.user = user;&#10;    }&#10;&#10;    // Utility methods&#10;    public BigDecimal getTotal() {&#10;        if (product != null &amp;&amp; product.getPrice() != null) {&#10;            BigDecimal finalPrice = product.getPrice();&#10;&#10;            // Apply discount if available&#10;            if (product.getDiscount() != null &amp;&amp; product.getDiscount().compareTo(BigDecimal.ZERO) &gt; 0) {&#10;                BigDecimal discountMultiplier = BigDecimal.ONE.subtract(&#10;                    product.getDiscount().divide(BigDecimal.valueOf(100))&#10;                );&#10;                finalPrice = product.getPrice().multiply(discountMultiplier);&#10;            }&#10;&#10;            return finalPrice.multiply(BigDecimal.valueOf(quantity));&#10;        }&#10;        return BigDecimal.ZERO;&#10;    }&#10;&#10;    public BigDecimal getItemPrice() {&#10;        if (product != null &amp;&amp; product.getPrice() != null) {&#10;            BigDecimal finalPrice = product.getPrice();&#10;&#10;            // Apply discount if available&#10;            if (product.getDiscount() != null &amp;&amp; product.getDiscount().compareTo(BigDecimal.ZERO) &gt; 0) {&#10;                BigDecimal discountMultiplier = BigDecimal.ONE.subtract(&#10;                    product.getDiscount().divide(BigDecimal.valueOf(100))&#10;                );&#10;                finalPrice = product.getPrice().multiply(discountMultiplier);&#10;            }&#10;&#10;            return finalPrice;&#10;        }&#10;        return BigDecimal.ZERO;&#10;    }&#10;&#10;    // Legacy methods for backward compatibility with CartDAO&#10;    public int getId() {&#10;        return cartId;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.cartId = id;&#10;    }&#10;&#10;    public String getProductName() {&#10;        return product != null ? product.getName() : null;&#10;    }&#10;&#10;    public void setProductName(String productName) {&#10;        if (this.product == null) {&#10;            this.product = new Product();&#10;        }&#10;        this.product.setName(productName);&#10;    }&#10;&#10;    public String getImageUrl() {&#10;        return product != null ? product.getImageUrl() : null;&#10;    }&#10;&#10;    public void setImageUrl(String imageUrl) {&#10;        if (this.product == null) {&#10;            this.product = new Product();&#10;        }&#10;        this.product.setImageUrl(imageUrl);&#10;    }&#10;&#10;    public BigDecimal getPrice() {&#10;        return product != null ? product.getPrice() : BigDecimal.ZERO;&#10;    }&#10;&#10;    public void setPrice(BigDecimal price) {&#10;        if (this.product == null) {&#10;            this.product = new Product();&#10;        }&#10;        this.product.setPrice(price);&#10;    }&#10;&#10;    public BigDecimal getDiscount() {&#10;        return product != null ? product.getDiscount() : BigDecimal.ZERO;&#10;    }&#10;&#10;    public void setDiscount(BigDecimal discount) {&#10;        if (this.product == null) {&#10;            this.product = new Product();&#10;        }&#10;        this.product.setDiscount(discount);&#10;    }&#10;&#10;    public BigDecimal getTotalPrice() {&#10;        return getTotal();&#10;    }&#10;&#10;    public void setTotalPrice(BigDecimal totalPrice) {&#10;        // This is typically calculated, but we can store it if needed&#10;        // Usually this would be calculated from price * quantity&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;CartItem{&quot; +&#10;                &quot;cartId=&quot; + cartId +&#10;                &quot;, userId='&quot; + userId + '\'' +&#10;                &quot;, productId=&quot; + productId +&#10;                &quot;, quantity=&quot; + quantity +&#10;                &quot;, createdAt=&quot; + createdAt +&#10;                &quot;, updatedAt=&quot; + updatedAt +&#10;                '}';&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object o) {&#10;        if (this == o) return true;&#10;        if (o == null || getClass() != o.getClass()) return false;&#10;        CartItem cartItem = (CartItem) o;&#10;        return cartId == cartItem.cartId;&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Integer.hashCode(cartId);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/model/Category.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/model/Category.java" />
              <option name="originalContent" value="package org.example.crud_prj_ex.model;&#10;&#10;import java.sql.Timestamp;&#10;&#10;public class Category {&#10;    private int id;&#10;    private String name;&#10;    private Timestamp createdAt;&#10;    private Timestamp updatedAt;&#10;    private Timestamp deletedAt;&#10;&#10;    public Category() {&#10;    }&#10;&#10;    public Category(int id, String name, Timestamp createdAt, Timestamp updatedAt, Timestamp deletedAt) {&#10;        this.id = id;&#10;        this.name = name;&#10;        this.createdAt = createdAt;&#10;        this.updatedAt = updatedAt;&#10;        this.deletedAt = deletedAt;&#10;    }&#10;&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public Timestamp getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(Timestamp createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public Timestamp getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(Timestamp updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    public Timestamp getDeletedAt() {&#10;        return deletedAt;&#10;    }&#10;&#10;    public void setDeletedAt(Timestamp deletedAt) {&#10;        this.deletedAt = deletedAt;&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.model;&#10;&#10;import java.sql.Timestamp;&#10;&#10;public class Category {&#10;    private int categoryId;&#10;    private String name;&#10;    private Timestamp createdAt;&#10;    private Timestamp updatedAt;&#10;    private Timestamp deletedAt;&#10;&#10;    // Default constructor&#10;    public Category() {}&#10;&#10;    // Constructor with parameters&#10;    public Category(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getCategoryId() {&#10;        return categoryId;&#10;    }&#10;&#10;    public void setCategoryId(int categoryId) {&#10;        this.categoryId = categoryId;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public Timestamp getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(Timestamp createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public Timestamp getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(Timestamp updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    public Timestamp getDeletedAt() {&#10;        return deletedAt;&#10;    }&#10;&#10;    public void setDeletedAt(Timestamp deletedAt) {&#10;        this.deletedAt = deletedAt;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Category{&quot; +&#10;                &quot;categoryId=&quot; + categoryId +&#10;                &quot;, name='&quot; + name + '\'' +&#10;                &quot;, createdAt=&quot; + createdAt +&#10;                &quot;, updatedAt=&quot; + updatedAt +&#10;                &quot;, deletedAt=&quot; + deletedAt +&#10;                '}';&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object o) {&#10;        if (this == o) return true;&#10;        if (o == null || getClass() != o.getClass()) return false;&#10;        Category category = (Category) o;&#10;        return categoryId == category.categoryId;&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Integer.hashCode(categoryId);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/model/Order.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/model/Order.java" />
              <option name="originalContent" value="package org.example.crud_prj_ex.model;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;public class Order {&#10;    private int orderId;&#10;    private String userId;&#10;    private BigDecimal totalPrice;&#10;    private String status; // enum ('pending', 'delivered', 'success', 'cancel', 'error')&#10;    private int addressBookId;&#10;    private String shippingAddress;&#10;    private String phoneNumber;&#10;    private String customerName;&#10;    private String note;&#10;    private Integer discountId;&#10;    private Timestamp createdAt;&#10;    private Timestamp updatedAt;&#10;    private Timestamp deletedAt;&#10;&#10;    // Related objects&#10;    private List&lt;OrderItem&gt; orderItems;&#10;    private User user;&#10;    private AddressBook addressBook;&#10;&#10;    // Constructors&#10;    public Order() {&#10;    }&#10;&#10;    public Order(int orderId, String userId, BigDecimal totalPrice, String status, Integer addressBookId,&#10;                 String shippingAddress, String phoneNumber, String customerName, String note,&#10;                 Integer discountId, Timestamp createdAt, Timestamp updatedAt, Timestamp deletedAt) {&#10;        this.orderId = orderId;&#10;        this.userId = userId;&#10;        this.totalPrice = totalPrice;&#10;        this.status = status;&#10;        this.addressBookId = addressBookId;&#10;        this.shippingAddress = shippingAddress;&#10;        this.phoneNumber = phoneNumber;&#10;        this.customerName = customerName;&#10;        this.note = note;&#10;        this.discountId = discountId;&#10;        this.createdAt = createdAt;&#10;        this.updatedAt = updatedAt;&#10;        this.deletedAt = deletedAt;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getOrderId() {&#10;        return orderId;&#10;    }&#10;&#10;    public void setOrderId(int orderId) {&#10;        this.orderId = orderId;&#10;    }&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public BigDecimal getTotalPrice() {&#10;        return totalPrice;&#10;    }&#10;&#10;    public void setTotalPrice(BigDecimal totalPrice) {&#10;        this.totalPrice = totalPrice;&#10;    }&#10;&#10;    public String getStatus() {&#10;        return status;&#10;    }&#10;&#10;    public void setStatus(String status) {&#10;        this.status = status;&#10;    }&#10;&#10;    public int getAddressBookId() {&#10;        return addressBookId;&#10;    }&#10;&#10;    public void setAddressBookId(int addressBookId) {&#10;        this.addressBookId = addressBookId;&#10;    }&#10;&#10;    public String getShippingAddress() {&#10;        return shippingAddress;&#10;    }&#10;&#10;    public void setShippingAddress(String shippingAddress) {&#10;        this.shippingAddress = shippingAddress;&#10;    }&#10;&#10;    public String getPhoneNumber() {&#10;        return phoneNumber;&#10;    }&#10;&#10;    public void setPhoneNumber(String phoneNumber) {&#10;        this.phoneNumber = phoneNumber;&#10;    }&#10;&#10;    public String getCustomerName() {&#10;        return customerName;&#10;    }&#10;&#10;    public void setCustomerName(String customerName) {&#10;        this.customerName = customerName;&#10;    }&#10;&#10;    public String getNote() {&#10;        return note;&#10;    }&#10;&#10;    public void setNote(String note) {&#10;        this.note = note;&#10;    }&#10;&#10;    public Integer getDiscountId() {&#10;        return discountId;&#10;    }&#10;&#10;    public void setDiscountId(Integer discountId) {&#10;        this.discountId = discountId;&#10;    }&#10;&#10;    public Timestamp getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(Timestamp createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public Timestamp getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(Timestamp updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    public Timestamp getDeletedAt() {&#10;        return deletedAt;&#10;    }&#10;&#10;    public void setDeletedAt(Timestamp deletedAt) {&#10;        this.deletedAt = deletedAt;&#10;    }&#10;&#10;    // Related objects getters/setters&#10;    public List&lt;OrderItem&gt; getOrderItems() {&#10;        return orderItems;&#10;    }&#10;&#10;    public void setOrderItems(List&lt;OrderItem&gt; orderItems) {&#10;        this.orderItems = orderItems;&#10;    }&#10;&#10;    public User getUser() {&#10;        return user;&#10;    }&#10;&#10;    public void setUser(User user) {&#10;        this.user = user;&#10;    }&#10;&#10;    public AddressBook getAddressBook() {&#10;        return addressBook;&#10;    }&#10;&#10;    public void setAddressBook(AddressBook addressBook) {&#10;        this.addressBook = addressBook;&#10;    }&#10;&#10;    // Utility methods&#10;    public String getStatusDisplayName() {&#10;        switch (status) {&#10;            case &quot;pending&quot;: return &quot;Chờ xử lý&quot;;&#10;            case &quot;processing&quot;: return &quot;Đang xử lý&quot;;&#10;            case &quot;shipped&quot;: return &quot;Đang giao&quot;;&#10;            case &quot;delivered&quot;: return &quot;Đã giao&quot;;&#10;            case &quot;cancelled&quot;: return &quot;Đã hủy&quot;;&#10;            default: return status;&#10;        }&#10;    }&#10;&#10;    public boolean canCancel() {&#10;        return &quot;pending&quot;.equals(status);&#10;    }&#10;&#10;    public boolean isDelivered() {&#10;        return &quot;delivered&quot;.equals(status);&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Order{&quot; +&#10;                &quot;orderId=&quot; + orderId +&#10;                &quot;, userId='&quot; + userId + '\'' +&#10;                &quot;, totalPrice=&quot; + totalPrice +&#10;                &quot;, status='&quot; + status + '\'' +&#10;                &quot;, customerName='&quot; + customerName + '\'' +&#10;                &quot;, createdAt=&quot; + createdAt +&#10;                '}';&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object o) {&#10;        if (this == o) return true;&#10;        if (o == null || getClass() != o.getClass()) return false;&#10;        Order order = (Order) o;&#10;        return orderId == order.orderId;&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Integer.hashCode(orderId);&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.model;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;public class Order {&#10;    private int orderId;&#10;    private String userId;&#10;    private BigDecimal totalPrice;&#10;    private String status; // enum ('pending', 'delivered', 'success', 'cancel', 'error')&#10;    private int addressBookId;&#10;    private String shippingAddress;&#10;    private String phoneNumber;&#10;    private String customerName;&#10;    private String note;&#10;    private Integer discountId;&#10;    private Timestamp createdAt;&#10;    private Timestamp updatedAt;&#10;    private Timestamp deletedAt;&#10;&#10;    // Additional fields for backward compatibility&#10;    private String email;&#10;    private String paymentMethod;&#10;&#10;    // Related objects&#10;    private List&lt;OrderItem&gt; orderItems;&#10;    private User user;&#10;    private AddressBook addressBook;&#10;&#10;    // Constructors&#10;    public Order() {&#10;    }&#10;&#10;    public Order(int orderId, String userId, BigDecimal totalPrice, String status, Integer addressBookId,&#10;                 String shippingAddress, String phoneNumber, String customerName, String note,&#10;                 Integer discountId, Timestamp createdAt, Timestamp updatedAt, Timestamp deletedAt) {&#10;        this.orderId = orderId;&#10;        this.userId = userId;&#10;        this.totalPrice = totalPrice;&#10;        this.status = status;&#10;        this.addressBookId = addressBookId;&#10;        this.shippingAddress = shippingAddress;&#10;        this.phoneNumber = phoneNumber;&#10;        this.customerName = customerName;&#10;        this.note = note;&#10;        this.discountId = discountId;&#10;        this.createdAt = createdAt;&#10;        this.updatedAt = updatedAt;&#10;        this.deletedAt = deletedAt;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getOrderId() {&#10;        return orderId;&#10;    }&#10;&#10;    public void setOrderId(int orderId) {&#10;        this.orderId = orderId;&#10;    }&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public BigDecimal getTotalPrice() {&#10;        return totalPrice;&#10;    }&#10;&#10;    public void setTotalPrice(BigDecimal totalPrice) {&#10;        this.totalPrice = totalPrice;&#10;    }&#10;&#10;    public String getStatus() {&#10;        return status;&#10;    }&#10;&#10;    public void setStatus(String status) {&#10;        this.status = status;&#10;    }&#10;&#10;    public int getAddressBookId() {&#10;        return addressBookId;&#10;    }&#10;&#10;    public void setAddressBookId(int addressBookId) {&#10;        this.addressBookId = addressBookId;&#10;    }&#10;&#10;    public String getShippingAddress() {&#10;        return shippingAddress;&#10;    }&#10;&#10;    public void setShippingAddress(String shippingAddress) {&#10;        this.shippingAddress = shippingAddress;&#10;    }&#10;&#10;    public String getPhoneNumber() {&#10;        return phoneNumber;&#10;    }&#10;&#10;    public void setPhoneNumber(String phoneNumber) {&#10;        this.phoneNumber = phoneNumber;&#10;    }&#10;&#10;    public String getCustomerName() {&#10;        return customerName;&#10;    }&#10;&#10;    public void setCustomerName(String customerName) {&#10;        this.customerName = customerName;&#10;    }&#10;&#10;    public String getNote() {&#10;        return note;&#10;    }&#10;&#10;    public void setNote(String note) {&#10;        this.note = note;&#10;    }&#10;&#10;    public Integer getDiscountId() {&#10;        return discountId;&#10;    }&#10;&#10;    public void setDiscountId(Integer discountId) {&#10;        this.discountId = discountId;&#10;    }&#10;&#10;    public Timestamp getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(Timestamp createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public Timestamp getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(Timestamp updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    public Timestamp getDeletedAt() {&#10;        return deletedAt;&#10;    }&#10;&#10;    public void setDeletedAt(Timestamp deletedAt) {&#10;        this.deletedAt = deletedAt;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getPaymentMethod() {&#10;        return paymentMethod;&#10;    }&#10;&#10;    public void setPaymentMethod(String paymentMethod) {&#10;        this.paymentMethod = paymentMethod;&#10;    }&#10;&#10;    // Related objects getters/setters&#10;    public List&lt;OrderItem&gt; getOrderItems() {&#10;        return orderItems;&#10;    }&#10;&#10;    public void setOrderItems(List&lt;OrderItem&gt; orderItems) {&#10;        this.orderItems = orderItems;&#10;    }&#10;&#10;    public User getUser() {&#10;        return user;&#10;    }&#10;&#10;    public void setUser(User user) {&#10;        this.user = user;&#10;    }&#10;&#10;    public AddressBook getAddressBook() {&#10;        return addressBook;&#10;    }&#10;&#10;    public void setAddressBook(AddressBook addressBook) {&#10;        this.addressBook = addressBook;&#10;    }&#10;&#10;    // Utility methods&#10;    public String getStatusDisplayName() {&#10;        switch (status) {&#10;            case &quot;pending&quot;: return &quot;Chờ xử lý&quot;;&#10;            case &quot;processing&quot;: return &quot;Đang xử lý&quot;;&#10;            case &quot;shipped&quot;: return &quot;Đang giao&quot;;&#10;            case &quot;delivered&quot;: return &quot;Đã giao&quot;;&#10;            case &quot;cancelled&quot;: return &quot;Đã hủy&quot;;&#10;            default: return status;&#10;        }&#10;    }&#10;&#10;    public boolean canCancel() {&#10;        return &quot;pending&quot;.equals(status);&#10;    }&#10;&#10;    public boolean isDelivered() {&#10;        return &quot;delivered&quot;.equals(status);&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Order{&quot; +&#10;                &quot;orderId=&quot; + orderId +&#10;                &quot;, userId='&quot; + userId + '\'' +&#10;                &quot;, totalPrice=&quot; + totalPrice +&#10;                &quot;, status='&quot; + status + '\'' +&#10;                &quot;, customerName='&quot; + customerName + '\'' +&#10;                &quot;, createdAt=&quot; + createdAt +&#10;                '}';&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object o) {&#10;        if (this == o) return true;&#10;        if (o == null || getClass() != o.getClass()) return false;&#10;        Order order = (Order) o;&#10;        return orderId == order.orderId;&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Integer.hashCode(orderId);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/model/OrderItem.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/model/OrderItem.java" />
              <option name="originalContent" value="package org.example.crud_prj_ex.model;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.Timestamp;&#10;&#10;public class OrderItem {&#10;    private int orderDetailId;&#10;    private int orderId;&#10;    private int productId;&#10;    private int quantity;&#10;    private BigDecimal price;&#10;    private String status; // enum ('pending', 'success', 'cancel', 'error')&#10;    private Timestamp createdAt;&#10;    private Timestamp updatedAt;&#10;    private Timestamp deletedAt;&#10;&#10;    // Related objects&#10;    private Product product;&#10;    private Order order;&#10;&#10;    // Default constructor&#10;    public OrderItem() {}&#10;&#10;    // Constructor with essential fields&#10;    public OrderItem(int orderId, int productId, int quantity, BigDecimal price) {&#10;        this.orderId = orderId;&#10;        this.productId = productId;&#10;        this.quantity = quantity;&#10;        this.price = price;&#10;        this.status = &quot;pending&quot;;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getOrderDetailId() {&#10;        return orderDetailId;&#10;    }&#10;&#10;    public void setOrderDetailId(int orderDetailId) {&#10;        this.orderDetailId = orderDetailId;&#10;    }&#10;&#10;    public int getOrderId() {&#10;        return orderId;&#10;    }&#10;&#10;    public void setOrderId(int orderId) {&#10;        this.orderId = orderId;&#10;    }&#10;&#10;    public int getProductId() {&#10;        return productId;&#10;    }&#10;&#10;    public void setProductId(int productId) {&#10;        this.productId = productId;&#10;    }&#10;&#10;    public int getQuantity() {&#10;        return quantity;&#10;    }&#10;&#10;    public void setQuantity(int quantity) {&#10;        this.quantity = quantity;&#10;    }&#10;&#10;    public BigDecimal getPrice() {&#10;        return price;&#10;    }&#10;&#10;    public void setPrice(BigDecimal price) {&#10;        this.price = price;&#10;    }&#10;&#10;    public String getStatus() {&#10;        return status;&#10;    }&#10;&#10;    public void setStatus(String status) {&#10;        this.status = status;&#10;    }&#10;&#10;    public Timestamp getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(Timestamp createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public Timestamp getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(Timestamp updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    public Timestamp getDeletedAt() {&#10;        return deletedAt;&#10;    }&#10;&#10;    public void setDeletedAt(Timestamp deletedAt) {&#10;        this.deletedAt = deletedAt;&#10;    }&#10;&#10;    // Related objects getters/setters&#10;    public Product getProduct() {&#10;        return product;&#10;    }&#10;&#10;    public void setProduct(Product product) {&#10;        this.product = product;&#10;    }&#10;&#10;    public Order getOrder() {&#10;        return order;&#10;    }&#10;&#10;    public void setOrder(Order order) {&#10;        this.order = order;&#10;    }&#10;&#10;    // Utility methods&#10;    public BigDecimal getTotal() {&#10;        return price.multiply(BigDecimal.valueOf(quantity));&#10;    }&#10;&#10;    public String getStatusDisplayName() {&#10;        switch (status) {&#10;            case &quot;pending&quot;: return &quot;Chờ xử lý&quot;;&#10;            case &quot;success&quot;: return &quot;Thành công&quot;;&#10;            case &quot;cancel&quot;: return &quot;Đã hủy&quot;;&#10;            case &quot;error&quot;: return &quot;Lỗi&quot;;&#10;            default: return status;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;OrderItem{&quot; +&#10;                &quot;orderDetailId=&quot; + orderDetailId +&#10;                &quot;, orderId=&quot; + orderId +&#10;                &quot;, productId=&quot; + productId +&#10;                &quot;, quantity=&quot; + quantity +&#10;                &quot;, price=&quot; + price +&#10;                &quot;, status='&quot; + status + '\'' +&#10;                '}';&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object o) {&#10;        if (this == o) return true;&#10;        if (o == null || getClass() != o.getClass()) return false;&#10;        OrderItem orderItem = (OrderItem) o;&#10;        return orderDetailId == orderItem.orderDetailId;&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Integer.hashCode(orderDetailId);&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.model;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.Timestamp;&#10;&#10;public class OrderItem {&#10;    private int orderDetailId;&#10;    private int orderId;&#10;    private int productId;&#10;    private int quantity;&#10;    private BigDecimal price;&#10;    private String status; // enum ('pending', 'success', 'cancel', 'error')&#10;    private Timestamp createdAt;&#10;    private Timestamp updatedAt;&#10;    private Timestamp deletedAt;&#10;&#10;    // Related objects&#10;    private Product product;&#10;    private Order order;&#10;&#10;    // Default constructor&#10;    public OrderItem() {}&#10;&#10;    // Constructor with essential fields&#10;    public OrderItem(int orderId, int productId, int quantity, BigDecimal price) {&#10;        this.orderId = orderId;&#10;        this.productId = productId;&#10;        this.quantity = quantity;&#10;        this.price = price;&#10;        this.status = &quot;pending&quot;;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getOrderDetailId() {&#10;        return orderDetailId;&#10;    }&#10;&#10;    public void setOrderDetailId(int orderDetailId) {&#10;        this.orderDetailId = orderDetailId;&#10;    }&#10;&#10;    public int getOrderId() {&#10;        return orderId;&#10;    }&#10;&#10;    public void setOrderId(int orderId) {&#10;        this.orderId = orderId;&#10;    }&#10;&#10;    public int getProductId() {&#10;        return productId;&#10;    }&#10;&#10;    public void setProductId(int productId) {&#10;        this.productId = productId;&#10;    }&#10;&#10;    public int getQuantity() {&#10;        return quantity;&#10;    }&#10;&#10;    public void setQuantity(int quantity) {&#10;        this.quantity = quantity;&#10;    }&#10;&#10;    public BigDecimal getPrice() {&#10;        return price;&#10;    }&#10;&#10;    public void setPrice(BigDecimal price) {&#10;        this.price = price;&#10;    }&#10;&#10;    public String getStatus() {&#10;        return status;&#10;    }&#10;&#10;    public void setStatus(String status) {&#10;        this.status = status;&#10;    }&#10;&#10;    public Timestamp getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(Timestamp createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public Timestamp getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(Timestamp updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    public Timestamp getDeletedAt() {&#10;        return deletedAt;&#10;    }&#10;&#10;    public void setDeletedAt(Timestamp deletedAt) {&#10;        this.deletedAt = deletedAt;&#10;    }&#10;&#10;    // Related objects getters/setters&#10;    public Product getProduct() {&#10;        return product;&#10;    }&#10;&#10;    public void setProduct(Product product) {&#10;        this.product = product;&#10;    }&#10;&#10;    public Order getOrder() {&#10;        return order;&#10;    }&#10;&#10;    public void setOrder(Order order) {&#10;        this.order = order;&#10;    }&#10;&#10;    // Legacy methods for backward compatibility&#10;    public void setOrderItemId(int orderItemId) {&#10;        this.orderDetailId = orderItemId;&#10;    }&#10;&#10;    public int getOrderItemId() {&#10;        return orderDetailId;&#10;    }&#10;&#10;    public void setProductName(String productName) {&#10;        if (this.product == null) {&#10;            this.product = new Product();&#10;        }&#10;        this.product.setName(productName);&#10;    }&#10;&#10;    public String getProductName() {&#10;        return product != null ? product.getName() : null;&#10;    }&#10;&#10;    public void setTotal(BigDecimal total) {&#10;        // Calculate price from total and quantity if needed&#10;        if (quantity &gt; 0) {&#10;            this.price = total.divide(BigDecimal.valueOf(quantity));&#10;        }&#10;    }&#10;&#10;    // Utility methods&#10;    public BigDecimal getTotal() {&#10;        return price.multiply(BigDecimal.valueOf(quantity));&#10;    }&#10;&#10;    public String getStatusDisplayName() {&#10;        switch (status) {&#10;            case &quot;pending&quot;: return &quot;Chờ xử lý&quot;;&#10;            case &quot;success&quot;: return &quot;Thành công&quot;;&#10;            case &quot;cancel&quot;: return &quot;Đã hủy&quot;;&#10;            case &quot;error&quot;: return &quot;Lỗi&quot;;&#10;            default: return status;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;OrderItem{&quot; +&#10;                &quot;orderDetailId=&quot; + orderDetailId +&#10;                &quot;, orderId=&quot; + orderId +&#10;                &quot;, productId=&quot; + productId +&#10;                &quot;, quantity=&quot; + quantity +&#10;                &quot;, price=&quot; + price +&#10;                &quot;, status='&quot; + status + '\'' +&#10;                '}';&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object o) {&#10;        if (this == o) return true;&#10;        if (o == null || getClass() != o.getClass()) return false;&#10;        OrderItem orderItem = (OrderItem) o;&#10;        return orderDetailId == orderItem.orderDetailId;&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Integer.hashCode(orderDetailId);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/model/User.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/model/User.java" />
              <option name="originalContent" value="package org.example.crud_prj_ex.model;&#10;&#10;import java.sql.Timestamp;&#10;&#10;public class User {&#10;    private int userId;&#10;    private String username;&#10;    private String email;&#10;    private String password;&#10;    private String fullName;&#10;    private String phone;&#10;    private String address;&#10;    private String role;&#10;    private boolean isActive;&#10;    private Timestamp createdAt;&#10;    private Timestamp updatedAt;&#10;    private Timestamp deletedAt;&#10;&#10;    // Default constructor&#10;    public User() {}&#10;&#10;    // Constructor with essential fields&#10;    public User(String username, String email, String password) {&#10;        this.username = username;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.role = &quot;USER&quot;; // Default role&#10;        this.isActive = true; // Default active&#10;    }&#10;&#10;    // Constructor with all fields except timestamps&#10;    public User(String username, String email, String password, String fullName, String phone, String address) {&#10;        this.username = username;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.fullName = fullName;&#10;        this.phone = phone;&#10;        this.address = address;&#10;        this.role = &quot;USER&quot;;&#10;        this.isActive = true;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public void setUserId(int userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getFullName() {&#10;        return fullName;&#10;    }&#10;&#10;    public void setFullName(String fullName) {&#10;        this.fullName = fullName;&#10;    }&#10;&#10;    public String getPhone() {&#10;        return phone;&#10;    }&#10;&#10;    public void setPhone(String phone) {&#10;        this.phone = phone;&#10;    }&#10;&#10;    public String getAddress() {&#10;        return address;&#10;    }&#10;&#10;    public void setAddress(String address) {&#10;        this.address = address;&#10;    }&#10;&#10;    public String getRole() {&#10;        return role;&#10;    }&#10;&#10;    public void setRole(String role) {&#10;        this.role = role;&#10;    }&#10;&#10;    public boolean isActive() {&#10;        return isActive;&#10;    }&#10;&#10;    public void setActive(boolean active) {&#10;        isActive = active;&#10;    }&#10;&#10;    public Timestamp getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(Timestamp createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public Timestamp getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(Timestamp updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    public Timestamp getDeletedAt() {&#10;        return deletedAt;&#10;    }&#10;&#10;    public void setDeletedAt(Timestamp deletedAt) {&#10;        this.deletedAt = deletedAt;&#10;    }&#10;&#10;    // Utility methods&#10;    public boolean isAdmin() {&#10;        return &quot;ADMIN&quot;.equalsIgnoreCase(this.role);&#10;    }&#10;&#10;    public boolean isUser() {&#10;        return &quot;USER&quot;.equalsIgnoreCase(this.role);&#10;    }&#10;&#10;    public String getDisplayName() {&#10;        return fullName != null &amp;&amp; !fullName.trim().isEmpty() ? fullName : username;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;User{&quot; +&#10;                &quot;userId=&quot; + userId +&#10;                &quot;, username='&quot; + username + '\'' +&#10;                &quot;, email='&quot; + email + '\'' +&#10;                &quot;, fullName='&quot; + fullName + '\'' +&#10;                &quot;, phone='&quot; + phone + '\'' +&#10;                &quot;, role='&quot; + role + '\'' +&#10;                &quot;, isActive=&quot; + isActive +&#10;                &quot;, createdAt=&quot; + createdAt +&#10;                &quot;, updatedAt=&quot; + updatedAt +&#10;                '}';&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object o) {&#10;        if (this == o) return true;&#10;        if (o == null || getClass() != o.getClass()) return false;&#10;        User user = (User) o;&#10;        return userId == user.userId;&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Integer.hashCode(userId);&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.model;&#10;&#10;import java.sql.Timestamp;&#10;&#10;public class User {&#10;    private String userId;  // Changed to String for UUID (char(36))&#10;    private String email;&#10;    private String password;&#10;    private String phoneNumber;  // Match database column name&#10;    private String fullName;&#10;    private String provider;&#10;    private String providerId;&#10;    private int roleId;&#10;    private Timestamp createdAt;&#10;    private Timestamp updatedAt;&#10;    private Timestamp deletedAt;&#10;&#10;    // Default constructor&#10;    public User() {}&#10;&#10;    // Constructor with essential fields&#10;    public User(String email, String password, String fullName) {&#10;        this.email = email;&#10;        this.password = password;&#10;        this.fullName = fullName;&#10;        this.roleId = 1; // Default role ID&#10;    }&#10;&#10;    // Constructor with all fields except timestamps&#10;    public User(String email, String password, String fullName, String phoneNumber) {&#10;        this.email = email;&#10;        this.password = password;&#10;        this.fullName = fullName;&#10;        this.phoneNumber = phoneNumber;&#10;        this.roleId = 1;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    // Legacy method names for backward compatibility&#10;    public String getUser_id() {&#10;        return userId;&#10;    }&#10;&#10;    public void setUser_id(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getPhoneNumber() {&#10;        return phoneNumber;&#10;    }&#10;&#10;    public void setPhoneNumber(String phoneNumber) {&#10;        this.phoneNumber = phoneNumber;&#10;    }&#10;&#10;    // Legacy method for backward compatibility&#10;    public String getPhone() {&#10;        return phoneNumber;&#10;    }&#10;&#10;    public void setPhone(String phoneNumber) {&#10;        this.phoneNumber = phoneNumber;&#10;    }&#10;&#10;    public String getFullName() {&#10;        return fullName;&#10;    }&#10;&#10;    public void setFullName(String fullName) {&#10;        this.fullName = fullName;&#10;    }&#10;&#10;    public String getProvider() {&#10;        return provider;&#10;    }&#10;&#10;    public void setProvider(String provider) {&#10;        this.provider = provider;&#10;    }&#10;&#10;    public String getProviderId() {&#10;        return providerId;&#10;    }&#10;&#10;    public void setProviderId(String providerId) {&#10;        this.providerId = providerId;&#10;    }&#10;&#10;    public int getRoleId() {&#10;        return roleId;&#10;    }&#10;&#10;    public void setRoleId(int roleId) {&#10;        this.roleId = roleId;&#10;    }&#10;&#10;    public Timestamp getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(Timestamp createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public Timestamp getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(Timestamp updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    public Timestamp getDeletedAt() {&#10;        return deletedAt;&#10;    }&#10;&#10;    public void setDeletedAt(Timestamp deletedAt) {&#10;        this.deletedAt = deletedAt;&#10;    }&#10;&#10;    // Utility methods&#10;    public boolean isAdmin() {&#10;        return roleId == 1; // Assuming role_id 1 is admin&#10;    }&#10;&#10;    public boolean isUser() {&#10;        return roleId == 2; // Assuming role_id 2 is user&#10;    }&#10;&#10;    public String getDisplayName() {&#10;        return fullName != null &amp;&amp; !fullName.trim().isEmpty() ? fullName : email;&#10;    }&#10;&#10;    // For JSP compatibility - return display name for username&#10;    public String getUsername() {&#10;        return getDisplayName();&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;User{&quot; +&#10;                &quot;userId='&quot; + userId + '\'' +&#10;                &quot;, email='&quot; + email + '\'' +&#10;                &quot;, fullName='&quot; + fullName + '\'' +&#10;                &quot;, phoneNumber='&quot; + phoneNumber + '\'' +&#10;                &quot;, roleId=&quot; + roleId +&#10;                &quot;, createdAt=&quot; + createdAt +&#10;                &quot;, updatedAt=&quot; + updatedAt +&#10;                '}';&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object o) {&#10;        if (this == o) return true;&#10;        if (o == null || getClass() != o.getClass()) return false;&#10;        User user = (User) o;&#10;        return userId != null &amp;&amp; userId.equals(user.userId);&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return userId != null ? userId.hashCode() : 0;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/CartAddServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/CartAddServlet.java" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;import org.example.crud_prj_ex.dao.CartDAO;&#10;import org.example.crud_prj_ex.model.User;&#10;&#10;import java.io.IOException;&#10;import java.io.PrintWriter;&#10;import java.sql.SQLException;&#10;&#10;@WebServlet(&quot;/cart/add&quot;)&#10;public class CartAddServlet extends HttpServlet {&#10;    private CartDAO cartDAO = new CartDAO();&#10;&#10;    @Override&#10;    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        System.out.println(&quot;=== CartAddServlet.doPost() START ===&quot;);&#10;        &#10;        resp.setContentType(&quot;application/json&quot;);&#10;        resp.setCharacterEncoding(&quot;UTF-8&quot;);&#10;        &#10;        PrintWriter out = resp.getWriter();&#10;        &#10;        try {&#10;            HttpSession session = req.getSession(false);&#10;            if (session == null) {&#10;                System.out.println(&quot;No session found&quot;);&#10;                resp.setStatus(HttpServletResponse.SC_UNAUTHORIZED);&#10;                out.print(&quot;{\&quot;success\&quot;: false, \&quot;message\&quot;: \&quot;Vui lòng đăng nhập\&quot;}&quot;);&#10;                return;&#10;            }&#10;            &#10;            User user = (User) session.getAttribute(&quot;user&quot;);&#10;            if (user == null) {&#10;                System.out.println(&quot;No user in session&quot;);&#10;                resp.setStatus(HttpServletResponse.SC_UNAUTHORIZED);&#10;                out.print(&quot;{\&quot;success\&quot;: false, \&quot;message\&quot;: \&quot;Vui lòng đăng nhập\&quot;}&quot;);&#10;                return;&#10;            }&#10;            &#10;            String productIdStr = req.getParameter(&quot;productId&quot;);&#10;            String quantityStr = req.getParameter(&quot;quantity&quot;);&#10;            &#10;            System.out.println(&quot;Adding to cart - productId: &quot; + productIdStr + &quot;, quantity: &quot; + quantityStr + &quot;, userId: &quot; + user.getUserId());&#10;            &#10;            if (productIdStr == null || quantityStr == null) {&#10;                out.print(&quot;{\&quot;success\&quot;: false, \&quot;message\&quot;: \&quot;Thiếu thông tin sản phẩm\&quot;}&quot;);&#10;                return;&#10;            }&#10;            &#10;            int productId = Integer.parseInt(productIdStr);&#10;            int quantity = Integer.parseInt(quantityStr);&#10;            &#10;            if (quantity &lt;= 0) {&#10;                out.print(&quot;{\&quot;success\&quot;: false, \&quot;message\&quot;: \&quot;Số lượng phải lớn hơn 0\&quot;}&quot;);&#10;                return;&#10;            }&#10;            &#10;            cartDAO.addToCart(user.getUserId(), productId, quantity);&#10;            System.out.println(&quot;Successfully added to cart&quot;);&#10;            &#10;            out.print(&quot;{\&quot;success\&quot;: true, \&quot;message\&quot;: \&quot;Đã thêm sản phẩm vào giỏ hàng\&quot;}&quot;);&#10;            &#10;        } catch (NumberFormatException e) {&#10;            System.err.println(&quot;Invalid number format: &quot; + e.getMessage());&#10;            out.print(&quot;{\&quot;success\&quot;: false, \&quot;message\&quot;: \&quot;Thông tin sản phẩm không hợp lệ\&quot;}&quot;);&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;SQLException in CartAddServlet: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#10;            out.print(&quot;{\&quot;success\&quot;: false, \&quot;message\&quot;: \&quot;Lỗi cơ sở dữ liệu\&quot;}&quot;);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Unexpected error in CartAddServlet: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#10;            out.print(&quot;{\&quot;success\&quot;: false, \&quot;message\&quot;: \&quot;Có lỗi xảy ra\&quot;}&quot;);&#10;        } finally {&#10;            out.flush();&#10;        }&#10;        &#10;        System.out.println(&quot;=== CartAddServlet.doPost() END ===&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/CartCountServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/CartCountServlet.java" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;import org.example.crud_prj_ex.dao.CartDAO;&#10;import org.example.crud_prj_ex.model.User;&#10;&#10;import java.io.IOException;&#10;import java.io.PrintWriter;&#10;import java.sql.SQLException;&#10;&#10;@WebServlet(&quot;/cart/count&quot;)&#10;public class CartCountServlet extends HttpServlet {&#10;    private CartDAO cartDAO = new CartDAO();&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        System.out.println(&quot;=== CartCountServlet.doGet() START ===&quot;);&#10;        &#10;        resp.setContentType(&quot;application/json&quot;);&#10;        resp.setCharacterEncoding(&quot;UTF-8&quot;);&#10;        &#10;        PrintWriter out = resp.getWriter();&#10;        &#10;        try {&#10;            HttpSession session = req.getSession(false);&#10;            int count = 0;&#10;            &#10;            if (session != null) {&#10;                User user = (User) session.getAttribute(&quot;user&quot;);&#10;                if (user != null) {&#10;                    System.out.println(&quot;Getting cart count for user: &quot; + user.getUserId());&#10;                    count = cartDAO.getCartItemCount(user.getUserId());&#10;                    System.out.println(&quot;Cart count: &quot; + count);&#10;                } else {&#10;                    System.out.println(&quot;No user in session&quot;);&#10;                }&#10;            } else {&#10;                System.out.println(&quot;No session found&quot;);&#10;            }&#10;            &#10;            String jsonResponse = &quot;{\&quot;count\&quot;: &quot; + count + &quot;}&quot;;&#10;            System.out.println(&quot;Sending JSON response: &quot; + jsonResponse);&#10;            out.print(jsonResponse);&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;SQLException in CartCountServlet: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#10;            out.print(&quot;{\&quot;error\&quot;: \&quot;Database error\&quot;, \&quot;count\&quot;: 0}&quot;);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Unexpected error in CartCountServlet: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#10;            out.print(&quot;{\&quot;error\&quot;: \&quot;Unexpected error\&quot;, \&quot;count\&quot;: 0}&quot;);&#10;        } finally {&#10;            out.flush();&#10;        }&#10;        &#10;        System.out.println(&quot;=== CartCountServlet.doGet() END ===&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/CategoryEditServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/CategoryEditServlet.java" />
              <option name="originalContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.example.crud_prj_ex.dao.CategoryDAO;&#10;import org.example.crud_prj_ex.model.Category;&#10;&#10;import java.io.IOException;&#10;import java.sql.SQLException;&#10;&#10;@WebServlet(&quot;/categories/edit&quot;)&#10;public class CategoryEditServlet extends HttpServlet {&#10;    private CategoryDAO dao = new CategoryDAO();&#10;&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        int id = Integer.parseInt(req.getParameter(&quot;id&quot;));&#10;        try {&#10;            Category c = dao.getById(id);&#10;            req.setAttribute(&quot;category&quot;, c);&#10;            req.getRequestDispatcher(&quot;/category/form.jsp&quot;).forward(req, resp);&#10;        } catch (SQLException e) {&#10;            throw new ServletException(e);&#10;        }&#10;    }&#10;&#10;    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {&#10;        int id = Integer.parseInt(req.getParameter(&quot;id&quot;));&#10;        String name = req.getParameter(&quot;name&quot;);&#10;&#10;        Category c = new Category();&#10;        c.setId(id);&#10;        c.setName(name);&#10;&#10;        try {&#10;            dao.update(c);&#10;            resp.sendRedirect(req.getContextPath() + &quot;/categories&quot;);&#10;        } catch (SQLException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.example.crud_prj_ex.dao.CategoryDAO;&#10;import org.example.crud_prj_ex.model.Category;&#10;&#10;import java.io.IOException;&#10;import java.sql.SQLException;&#10;&#10;@WebServlet(&quot;/categories/edit&quot;)&#10;public class CategoryEditServlet extends HttpServlet {&#10;    private CategoryDAO dao = new CategoryDAO();&#10;&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        int id = Integer.parseInt(req.getParameter(&quot;id&quot;));&#10;        try {&#10;            Category c = dao.getById(id);&#10;            req.setAttribute(&quot;category&quot;, c);&#10;            req.getRequestDispatcher(&quot;/category/form.jsp&quot;).forward(req, resp);&#10;        } catch (SQLException e) {&#10;            throw new ServletException(e);&#10;        }&#10;    }&#10;&#10;    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {&#10;        int id = Integer.parseInt(req.getParameter(&quot;id&quot;));&#10;        String name = req.getParameter(&quot;name&quot;);&#10;&#10;        Category c = new Category();&#10;        c.setCategoryId(id);&#10;        c.setName(name);&#10;&#10;        try {&#10;            dao.update(c);&#10;            resp.sendRedirect(req.getContextPath() + &quot;/categories&quot;);&#10;        } catch (SQLException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/CheckoutServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/CheckoutServlet.java" />
              <option name="originalContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;import org.example.crud_prj_ex.dao.CartDAO;&#10;import org.example.crud_prj_ex.dao.OrderDAO;&#10;import org.example.crud_prj_ex.model.CartItem;&#10;import org.example.crud_prj_ex.model.Order;&#10;import org.example.crud_prj_ex.model.OrderItem;&#10;import org.example.crud_prj_ex.model.User;&#10;&#10;import java.io.IOException;&#10;import java.math.BigDecimal;&#10;import java.sql.SQLException;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;@WebServlet(&quot;/checkout&quot;)&#10;public class CheckoutServlet extends HttpServlet {&#10;    private CartDAO cartDAO = new CartDAO();&#10;    private OrderDAO orderDAO = new OrderDAO();&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        HttpSession session = req.getSession();&#10;        User user = (User) session.getAttribute(&quot;user&quot;);&#10;&#10;        if (user == null) {&#10;            // Redirect to login if not logged in&#10;            resp.sendRedirect(req.getContextPath() + &quot;/login&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            List&lt;CartItem&gt; cartItems = cartDAO.getCartItems(user.getUser_id());&#10;            BigDecimal total = calculateTotal(cartItems);&#10;&#10;            req.setAttribute(&quot;cartItems&quot;, cartItems);&#10;            req.setAttribute(&quot;total&quot;, total);&#10;            req.getRequestDispatcher(&quot;/order/checkout.jsp&quot;).forward(req, resp);&#10;        } catch (SQLException e) {&#10;            throw new ServletException(e);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        HttpSession session = req.getSession();&#10;        User user = (User) session.getAttribute(&quot;user&quot;);&#10;&#10;        if (user == null) {&#10;            resp.sendRedirect(req.getContextPath() + &quot;/login&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            // Get cart items&#10;            List&lt;CartItem&gt; cartItems = cartDAO.getCartItems(user.getUser_id());&#10;            if (cartItems.isEmpty()) {&#10;                resp.sendRedirect(req.getContextPath() + &quot;/cart&quot;);&#10;                return;&#10;            }&#10;&#10;            // Get form data&#10;            String customerName = req.getParameter(&quot;customerName&quot;);&#10;            String phoneNumber = req.getParameter(&quot;phoneNumber&quot;);&#10;            String shippingAddress = req.getParameter(&quot;shippingAddress&quot;);&#10;            String note = req.getParameter(&quot;note&quot;);&#10;            String paymentMethod = req.getParameter(&quot;paymentMethod&quot;);&#10;&#10;            // Create order&#10;            Order order = new Order();&#10;            order.setUserId(user.getUser_id());&#10;            order.setTotalPrice(calculateTotal(cartItems));&#10;            order.setStatus(&quot;pending&quot;);&#10;            order.setCustomerName(customerName != null ? customerName : user.getFull_name());&#10;            order.setPhoneNumber(phoneNumber != null ? phoneNumber : user.getPhone_number());&#10;            order.setShippingAddress(shippingAddress);&#10;            order.setNote(note);&#10;            order.setPaymentMethod(paymentMethod);&#10;            order.setEmail(user.getEmail());&#10;&#10;            // Process payment&#10;            boolean paymentSuccess = processPayment(paymentMethod, order.getTotalPrice());&#10;&#10;            if (paymentSuccess) {&#10;                // Save order using insertOrder method which handles CartItem directly&#10;                int orderId = orderDAO.insertOrder(order, cartItems);&#10;&#10;                // Clear cart after successful order&#10;                cartDAO.clearCart(user.getUser_id());&#10;&#10;                // Redirect to confirmation page&#10;                resp.sendRedirect(req.getContextPath() + &quot;/order/confirmation?id=&quot; + orderId);&#10;            } else {&#10;                req.setAttribute(&quot;error&quot;, &quot;Payment processing failed. Please try again.&quot;);&#10;                req.setAttribute(&quot;cartItems&quot;, cartItems);&#10;                req.setAttribute(&quot;total&quot;, order.getTotalPrice());&#10;                req.getRequestDispatcher(&quot;/order/checkout.jsp&quot;).forward(req, resp);&#10;            }&#10;        } catch (SQLException e) {&#10;            throw new ServletException(e);&#10;        }&#10;    }&#10;&#10;    private BigDecimal calculateTotal(List&lt;CartItem&gt; cartItems) {&#10;        return cartItems.stream()&#10;                .map(CartItem::getTotal)&#10;                .reduce(BigDecimal.ZERO, BigDecimal::add);&#10;    }&#10;&#10;    private boolean processPayment(String method, BigDecimal amount) {&#10;        // Simulate payment processing - always return true for demo&#10;        return true;&#10;    }&#10;&#10;    private List&lt;OrderItem&gt; convertCartItemsToOrderItems(List&lt;CartItem&gt; cartItems) {&#10;        List&lt;OrderItem&gt; orderItems = new ArrayList&lt;&gt;();&#10;&#10;        for (CartItem cartItem : cartItems) {&#10;            OrderItem orderItem = new OrderItem();&#10;            orderItem.setProductId(cartItem.getProductId());&#10;            orderItem.setQuantity(cartItem.getQuantity());&#10;            orderItem.setPrice(cartItem.getPrice());&#10;            orderItems.add(orderItem);&#10;        }&#10;&#10;        return orderItems;&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;import org.example.crud_prj_ex.dao.CartDAO;&#10;import org.example.crud_prj_ex.dao.OrderDAO;&#10;import org.example.crud_prj_ex.model.CartItem;&#10;import org.example.crud_prj_ex.model.Order;&#10;import org.example.crud_prj_ex.model.OrderItem;&#10;import org.example.crud_prj_ex.model.User;&#10;&#10;import java.io.IOException;&#10;import java.math.BigDecimal;&#10;import java.sql.SQLException;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;@WebServlet(&quot;/checkout&quot;)&#10;public class CheckoutServlet extends HttpServlet {&#10;    private CartDAO cartDAO = new CartDAO();&#10;    private OrderDAO orderDAO = new OrderDAO();&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        HttpSession session = req.getSession();&#10;        User user = (User) session.getAttribute(&quot;user&quot;);&#10;&#10;        if (user == null) {&#10;            // Redirect to login if not logged in&#10;            resp.sendRedirect(req.getContextPath() + &quot;/login&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            List&lt;CartItem&gt; cartItems = cartDAO.getCartItems(user.getUser_id());&#10;            BigDecimal total = calculateTotal(cartItems);&#10;&#10;            req.setAttribute(&quot;cartItems&quot;, cartItems);&#10;            req.setAttribute(&quot;total&quot;, total);&#10;            req.getRequestDispatcher(&quot;/order/checkout.jsp&quot;).forward(req, resp);&#10;        } catch (SQLException e) {&#10;            throw new ServletException(e);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        HttpSession session = req.getSession();&#10;        User user = (User) session.getAttribute(&quot;user&quot;);&#10;&#10;        if (user == null) {&#10;            resp.sendRedirect(req.getContextPath() + &quot;/login&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            // Get cart items&#10;            List&lt;CartItem&gt; cartItems = cartDAO.getCartItems(user.getUser_id());&#10;            if (cartItems.isEmpty()) {&#10;                resp.sendRedirect(req.getContextPath() + &quot;/cart&quot;);&#10;                return;&#10;            }&#10;&#10;            // Get form data&#10;            String customerName = req.getParameter(&quot;customerName&quot;);&#10;            String phoneNumber = req.getParameter(&quot;phoneNumber&quot;);&#10;            String shippingAddress = req.getParameter(&quot;shippingAddress&quot;);&#10;            String note = req.getParameter(&quot;note&quot;);&#10;            String paymentMethod = req.getParameter(&quot;paymentMethod&quot;);&#10;&#10;            // Create order&#10;            Order order = new Order();&#10;            order.setUserId(user.getUser_id());&#10;            order.setTotalPrice(calculateTotal(cartItems));&#10;            order.setStatus(&quot;pending&quot;);&#10;            order.setCustomerName(customerName != null ? customerName : user.getFullName());&#10;            order.setPhoneNumber(phoneNumber != null ? phoneNumber : user.getPhoneNumber());&#10;            order.setShippingAddress(shippingAddress);&#10;            order.setNote(note);&#10;            order.setPaymentMethod(paymentMethod);&#10;            order.setEmail(user.getEmail());&#10;&#10;            // Process payment&#10;            boolean paymentSuccess = processPayment(paymentMethod, order.getTotalPrice());&#10;&#10;            if (paymentSuccess) {&#10;                // Save order using insertOrder method which handles CartItem directly&#10;                int orderId = orderDAO.insertOrder(order, cartItems);&#10;&#10;                // Clear cart after successful order&#10;                cartDAO.clearCart(user.getUser_id());&#10;&#10;                // Redirect to confirmation page&#10;                resp.sendRedirect(req.getContextPath() + &quot;/order/confirmation?id=&quot; + orderId);&#10;            } else {&#10;                req.setAttribute(&quot;error&quot;, &quot;Payment processing failed. Please try again.&quot;);&#10;                req.setAttribute(&quot;cartItems&quot;, cartItems);&#10;                req.setAttribute(&quot;total&quot;, order.getTotalPrice());&#10;                req.getRequestDispatcher(&quot;/order/checkout.jsp&quot;).forward(req, resp);&#10;            }&#10;        } catch (SQLException e) {&#10;            throw new ServletException(e);&#10;        }&#10;    }&#10;&#10;    private BigDecimal calculateTotal(List&lt;CartItem&gt; cartItems) {&#10;        return cartItems.stream()&#10;                .map(CartItem::getTotal)&#10;                .reduce(BigDecimal.ZERO, BigDecimal::add);&#10;    }&#10;&#10;    private boolean processPayment(String method, BigDecimal amount) {&#10;        // Simulate payment processing - always return true for demo&#10;        return true;&#10;    }&#10;&#10;    private List&lt;OrderItem&gt; convertCartItemsToOrderItems(List&lt;CartItem&gt; cartItems) {&#10;        List&lt;OrderItem&gt; orderItems = new ArrayList&lt;&gt;();&#10;&#10;        for (CartItem cartItem : cartItems) {&#10;            OrderItem orderItem = new OrderItem();&#10;            orderItem.setProductId(cartItem.getProductId());&#10;            orderItem.setQuantity(cartItem.getQuantity());&#10;            orderItem.setPrice(cartItem.getPrice());&#10;            orderItems.add(orderItem);&#10;        }&#10;&#10;        return orderItems;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/LoginServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/LoginServlet.java" />
              <option name="originalContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;import org.example.crud_prj_ex.model.User;&#10;&#10;import java.io.IOException;&#10;&#10;@WebServlet(&quot;/login&quot;)&#10;public class LoginServlet extends HttpServlet {&#10;    private UserService userService = new UserService();&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        String redirectURL = req.getParameter(&quot;redirect&quot;);&#10;&#10;        User user = userService.login(username, password);&#10;&#10;        if (user != null) {&#10;        String username = req.getParameter(&quot;username&quot;);&#10;            session.setAttribute(&quot;user&quot;, user);&#10;            session.setAttribute(&quot;userId&quot;, user.getUser_id());&#10;&#10;        User user = userService.login(username, password);&#10;            req.getRequestDispatcher(&quot;/auth/login.jsp&quot;).forward(req, resp);&#10;        if (user != null) {&#10;            HttpSession session = req.getSession();&#10;            session.setAttribute(&quot;user&quot;, user);&#10;            session.setAttribute(&quot;userId&quot;, user.getUser_id());&#10;" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;import org.example.crud_prj_ex.model.User;&#10;&#10;import java.io.IOException;&#10;&#10;@WebServlet({&quot;/auth/login&quot;, &quot;/login&quot;})&#10;public class LoginServlet extends HttpServlet {&#10;    private UserService userService = new UserService();&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        // Check if user is already logged in&#10;        HttpSession session = req.getSession(false);&#10;        if (session != null &amp;&amp; session.getAttribute(&quot;user&quot;) != null) {&#10;            resp.sendRedirect(req.getContextPath() + &quot;/&quot;);&#10;            return;&#10;        }&#10;&#10;        req.getRequestDispatcher(&quot;/auth/login.jsp&quot;).forward(req, resp);&#10;    }&#10;&#10;    @Override&#10;    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        String email = req.getParameter(&quot;email&quot;);  // Changed from username to email&#10;        String password = req.getParameter(&quot;password&quot;);&#10;        String redirectURL = req.getParameter(&quot;redirect&quot;);&#10;&#10;        if (email == null || email.trim().isEmpty() || password == null || password.trim().isEmpty()) {&#10;            req.setAttribute(&quot;error&quot;, &quot;Vui lòng nhập đầy đủ email và mật khẩu&quot;);&#10;            req.setAttribute(&quot;redirect&quot;, redirectURL);&#10;            req.getRequestDispatcher(&quot;/auth/login.jsp&quot;).forward(req, resp);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            User user = userService.login(email.trim(), password);&#10;&#10;            if (user != null) {&#10;                HttpSession session = req.getSession();&#10;                session.setAttribute(&quot;user&quot;, user);&#10;                session.setAttribute(&quot;userId&quot;, user.getUser_id());&#10;&#10;                // Redirect to original page or default to home&#10;                if (redirectURL != null &amp;&amp; !redirectURL.isEmpty()) {&#10;                    resp.sendRedirect(redirectURL);&#10;                } else {&#10;                    resp.sendRedirect(req.getContextPath() + &quot;/&quot;);&#10;                }&#10;            } else {&#10;                req.setAttribute(&quot;error&quot;, &quot;Email hoặc mật khẩu không đúng&quot;);&#10;                req.setAttribute(&quot;email&quot;, email); // Preserve email&#10;                req.setAttribute(&quot;redirect&quot;, redirectURL);&#10;                req.getRequestDispatcher(&quot;/auth/login.jsp&quot;).forward(req, resp);&#10;            }&#10;        } catch (Exception e) {&#10;            req.setAttribute(&quot;error&quot;, &quot;Có lỗi xảy ra trong quá trình đăng nhập. Vui lòng thử lại.&quot;);&#10;            req.setAttribute(&quot;email&quot;, email);&#10;            req.setAttribute(&quot;redirect&quot;, redirectURL);&#10;            req.getRequestDispatcher(&quot;/auth/login.jsp&quot;).forward(req, resp);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/LogoutServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/LogoutServlet.java" />
              <option name="originalContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;&#10;import java.io.IOException;&#10;&#10;@WebServlet(&quot;/logout&quot;)&#10;@WebServlet(&quot;/logout&quot;)&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {&#10;        if (session != null) {&#10;            session.invalidate();&#10;        }&#10;        resp.sendRedirect(req.getContextPath() + &quot;/&quot;);&#10;        resp.sendRedirect(req.getContextPath() + &quot;/&quot;);&#10;" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;&#10;import java.io.IOException;&#10;&#10;@WebServlet({&quot;/auth/logout&quot;, &quot;/logout&quot;})&#10;public class LogoutServlet extends HttpServlet {&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        HttpSession session = req.getSession(false);&#10;        if (session != null) {&#10;            session.invalidate();&#10;        }&#10;        &#10;        // Add success message and redirect to login or home&#10;        resp.sendRedirect(req.getContextPath() + &quot;/auth/login?message=logout_success&quot;);&#10;    }&#10;&#10;    @Override&#10;    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        doGet(req, resp);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/OrderConfirmationServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/OrderConfirmationServlet.java" />
              <option name="originalContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;import org.example.crud_prj_ex.dao.OrderDAO;&#10;import org.example.crud_prj_ex.model.Order;&#10;import org.example.crud_prj_ex.model.User;&#10;&#10;import java.io.IOException;&#10;import java.sql.SQLException;&#10;&#10;@WebServlet(&quot;/order/confirmation&quot;)&#10;public class OrderConfirmationServlet extends HttpServlet {&#10;    private OrderDAO orderDAO = new OrderDAO();&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        String orderId = req.getParameter(&quot;id&quot;);&#10;        if (orderId == null || orderId.isEmpty()) {&#10;            resp.sendRedirect(req.getContextPath() + &quot;/orders&quot;);&#10;            return;&#10;        }&#10;&#10;            req.getRequestDispatcher(&quot;/order/confirmation.jsp&quot;).forward(req, resp);&#10;        } catch (SQLException e) {&#10;" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;import org.example.crud_prj_ex.dao.OrderDAO;&#10;import org.example.crud_prj_ex.model.Order;&#10;import org.example.crud_prj_ex.model.User;&#10;&#10;import java.io.IOException;&#10;import java.sql.SQLException;&#10;&#10;@WebServlet(&quot;/order/confirmation&quot;)&#10;public class OrderConfirmationServlet extends HttpServlet {&#10;    private OrderDAO orderDAO = new OrderDAO();&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        String orderId = req.getParameter(&quot;id&quot;);&#10;        if (orderId == null || orderId.isEmpty()) {&#10;            resp.sendRedirect(req.getContextPath() + &quot;/orders&quot;);&#10;            return;&#10;        }&#10;&#10;        HttpSession session = req.getSession();&#10;        User user = (User) session.getAttribute(&quot;user&quot;);&#10;&#10;        try {&#10;            Order order = orderDAO.getById(Integer.parseInt(orderId));&#10;            if (order != null &amp;&amp; user != null) {&#10;                // Set the email if it's not already set&#10;                if (order.getEmail() == null || order.getEmail().isEmpty()) {&#10;                    order.setEmail(user.getEmail());&#10;                }&#10;                // Set payment method if not set&#10;                if (order.getPaymentMethod() == null || order.getPaymentMethod().isEmpty()) {&#10;                    order.setPaymentMethod(&quot;Thanh toán khi nhận hàng&quot;);&#10;                }&#10;            }&#10;            req.setAttribute(&quot;order&quot;, order);&#10;            req.getRequestDispatcher(&quot;/order/confirmation.jsp&quot;).forward(req, resp);&#10;        } catch (SQLException e) {&#10;            throw new ServletException(e);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/OrderUpdateStatusServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/OrderUpdateStatusServlet.java" />
              <option name="originalContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.example.crud_prj_ex.dao.OrderDAO;&#10;&#10;import java.io.IOException;&#10;import java.sql.SQLException;&#10;&#10;@WebServlet(&quot;/orders/update-status&quot;)&#10;public class OrderUpdateStatusServlet extends HttpServlet {&#10;    private OrderDAO orderDAO = new OrderDAO();&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        String orderIdParam = req.getParameter(&quot;id&quot;);&#10;        String status = req.getParameter(&quot;status&quot;);&#10;        if (orderIdParam == null || status == null) {&#10;            resp.sendRedirect(req.getContextPath() + &quot;/orders&quot;);&#10;            return;&#10;        }&#10;" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.example.crud_prj_ex.dao.OrderDAO;&#10;&#10;import java.io.IOException;&#10;import java.sql.SQLException;&#10;&#10;@WebServlet(&quot;/orders/update-status&quot;)&#10;public class OrderUpdateStatusServlet extends HttpServlet {&#10;    private OrderDAO orderDAO = new OrderDAO();&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        String orderIdParam = req.getParameter(&quot;id&quot;);&#10;        String status = req.getParameter(&quot;status&quot;);&#10;        if (orderIdParam == null || status == null) {&#10;            resp.sendRedirect(req.getContextPath() + &quot;/orders&quot;);&#10;            return;&#10;        }&#10;&#10;        // Validate status to prevent SQL truncation error&#10;        String[] validStatuses = {&quot;pending&quot;, &quot;success&quot;, &quot;cancel&quot;, &quot;error&quot;};&#10;        boolean isValidStatus = false;&#10;        for (String validStatus : validStatuses) {&#10;            if (validStatus.equals(status)) {&#10;                isValidStatus = true;&#10;                break;&#10;            }&#10;        }&#10;&#10;        if (!isValidStatus) {&#10;            resp.sendRedirect(req.getContextPath() + &quot;/orders&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            int orderId = Integer.parseInt(orderIdParam);&#10;            orderDAO.updateOrderStatus(orderId, status);&#10;            resp.sendRedirect(req.getContextPath() + &quot;/orders/detail?id=&quot; + orderId);&#10;        } catch (SQLException | NumberFormatException e) {&#10;            throw new ServletException(e);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/ProductDetailServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/ProductDetailServlet.java" />
              <option name="originalContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.example.crud_prj_ex.dao.ProductDAO;&#10;import org.example.crud_prj_ex.model.Product;&#10;&#10;import java.io.IOException;&#10;import java.sql.SQLException;&#10;&#10;@WebServlet(&quot;/products/detail&quot;)&#10;public class ProductDetailServlet extends HttpServlet {&#10;    private ProductDAO dao = new ProductDAO();&#10;&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        int id = Integer.parseInt(req.getParameter(&quot;id&quot;));&#10;        try {&#10;            Product p = dao.getById(id);&#10;            if (p != null) {&#10;                req.setAttribute(&quot;product&quot;, p);&#10;                req.getRequestDispatcher(&quot;/product/detail.jsp&quot;).forward(req, resp);&#10;            } else {&#10;                resp.sendError(HttpServletResponse.SC_NOT_FOUND, &quot;Product not found&quot;);&#10;            }&#10;        } catch (SQLException e) {&#10;            throw new ServletException(e);&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.example.crud_prj_ex.dao.ProductDAO;&#10;import org.example.crud_prj_ex.model.Product;&#10;&#10;import java.io.IOException;&#10;import java.sql.SQLException;&#10;&#10;@WebServlet(&quot;/product/detail&quot;)&#10;public class ProductDetailServlet extends HttpServlet {&#10;    private ProductDAO dao = new ProductDAO();&#10;&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        int id = Integer.parseInt(req.getParameter(&quot;id&quot;));&#10;        try {&#10;            Product p = dao.getById(id);&#10;            if (p != null) {&#10;                req.setAttribute(&quot;product&quot;, p);&#10;                req.getRequestDispatcher(&quot;/product/detail.jsp&quot;).forward(req, resp);&#10;            } else {&#10;                resp.sendError(HttpServletResponse.SC_NOT_FOUND, &quot;Product not found&quot;);&#10;            }&#10;        } catch (SQLException e) {&#10;            throw new ServletException(e);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/RegisterServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/RegisterServlet.java" />
              <option name="originalContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;import org.example.crud_prj_ex.model.User;&#10;&#10;import java.io.IOException;&#10;&#10;@WebServlet(&quot;/register&quot;)&#10;public class RegisterServlet extends HttpServlet {&#10;    private UserService userService = new UserService();&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        String email = req.getParameter(&quot;email&quot;);&#10;        String fullName = req.getParameter(&quot;fullName&quot;);&#10;&#10;        if (!password.equals(confirmPassword)) {&#10;            req.setAttribute(&quot;error&quot;, &quot;Mật khẩu xác nhận không khớp&quot;);&#10;            req.getRequestDispatcher(&quot;/auth/register.jsp&quot;).forward(req, resp);&#10;            return;&#10;        }&#10;&#10;" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;import org.example.crud_prj_ex.model.User;&#10;&#10;import java.io.IOException;&#10;&#10;@WebServlet({&quot;/auth/register&quot;, &quot;/register&quot;})&#10;public class RegisterServlet extends HttpServlet {&#10;    private UserService userService = new UserService();&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        // Check if user is already logged in&#10;        HttpSession session = req.getSession(false);&#10;        if (session != null &amp;&amp; session.getAttribute(&quot;user&quot;) != null) {&#10;            resp.sendRedirect(req.getContextPath() + &quot;/&quot;);&#10;            return;&#10;        }&#10;        &#10;        req.getRequestDispatcher(&quot;/auth/register.jsp&quot;).forward(req, resp);&#10;    }&#10;&#10;    @Override&#10;    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        String password = req.getParameter(&quot;password&quot;);&#10;        String confirmPassword = req.getParameter(&quot;confirmPassword&quot;);&#10;        String email = req.getParameter(&quot;email&quot;);&#10;        String fullName = req.getParameter(&quot;fullName&quot;);&#10;        String phoneNumber = req.getParameter(&quot;phoneNumber&quot;);&#10;&#10;        // Validation&#10;        if (email == null || email.trim().isEmpty() || &#10;            password == null || password.trim().isEmpty() || &#10;            fullName == null || fullName.trim().isEmpty()) {&#10;            req.setAttribute(&quot;error&quot;, &quot;Vui lòng điền đầy đủ thông tin bắt buộc&quot;);&#10;            req.setAttribute(&quot;email&quot;, email);&#10;            req.setAttribute(&quot;fullName&quot;, fullName);&#10;            req.setAttribute(&quot;phoneNumber&quot;, phoneNumber);&#10;            req.getRequestDispatcher(&quot;/auth/register.jsp&quot;).forward(req, resp);&#10;            return;&#10;        }&#10;&#10;        if (!password.equals(confirmPassword)) {&#10;            req.setAttribute(&quot;error&quot;, &quot;Mật khẩu xác nhận không khớp&quot;);&#10;            req.setAttribute(&quot;email&quot;, email);&#10;            req.setAttribute(&quot;fullName&quot;, fullName);&#10;            req.setAttribute(&quot;phoneNumber&quot;, phoneNumber);&#10;            req.getRequestDispatcher(&quot;/auth/register.jsp&quot;).forward(req, resp);&#10;            return;&#10;        }&#10;&#10;        if (password.length() &lt; 6) {&#10;            req.setAttribute(&quot;error&quot;, &quot;Mật khẩu phải có ít nhất 6 ký tự&quot;);&#10;            req.setAttribute(&quot;email&quot;, email);&#10;            req.setAttribute(&quot;fullName&quot;, fullName);&#10;            req.setAttribute(&quot;phoneNumber&quot;, phoneNumber);&#10;            req.getRequestDispatcher(&quot;/auth/register.jsp&quot;).forward(req, resp);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            User user = new User(password.trim(), email.trim(), fullName.trim());&#10;            if (phoneNumber != null &amp;&amp; !phoneNumber.trim().isEmpty()) {&#10;                user.setPhoneNumber(phoneNumber.trim());&#10;            }&#10;&#10;            if (userService.register(user)) {&#10;                HttpSession session = req.getSession();&#10;                session.setAttribute(&quot;user&quot;, user);&#10;                session.setAttribute(&quot;userId&quot;, user.getUser_id());&#10;                resp.sendRedirect(req.getContextPath() + &quot;/&quot;);&#10;            } else {&#10;                req.setAttribute(&quot;error&quot;, &quot;Email đã được sử dụng. Vui lòng chọn email khác.&quot;);&#10;                req.setAttribute(&quot;email&quot;, email);&#10;                req.setAttribute(&quot;fullName&quot;, fullName);&#10;                req.setAttribute(&quot;phoneNumber&quot;, phoneNumber);&#10;                req.getRequestDispatcher(&quot;/auth/register.jsp&quot;).forward(req, resp);&#10;            }&#10;        } catch (Exception e) {&#10;            req.setAttribute(&quot;error&quot;, &quot;Có lỗi xảy ra trong quá trình đăng ký. Vui lòng thử lại.&quot;);&#10;            req.setAttribute(&quot;email&quot;, email);&#10;            req.setAttribute(&quot;fullName&quot;, fullName);&#10;            req.setAttribute(&quot;phoneNumber&quot;, phoneNumber);&#10;            req.getRequestDispatcher(&quot;/auth/register.jsp&quot;).forward(req, resp);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/ShopServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/ShopServlet.java" />
              <option name="originalContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.example.crud_prj_ex.dao.CategoryDAO;&#10;import org.example.crud_prj_ex.dao.ProductDAO;&#10;import org.example.crud_prj_ex.model.Category;&#10;import org.example.crud_prj_ex.model.Product;&#10;&#10;import java.io.IOException;&#10;import java.sql.SQLException;&#10;import java.util.List;&#10;&#10;@WebServlet(&quot;/shop&quot;)&#10;public class ShopServlet extends HttpServlet {&#10;    private ProductDAO productDAO = new ProductDAO();&#10;    private CategoryDAO categoryDAO = new CategoryDAO();&#10;&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        System.out.println(&quot;=== ShopServlet.doGet() START ===&quot;);&#10;&#10;        try {&#10;            String categoryIdParam = req.getParameter(&quot;categoryId&quot;);&#10;            String searchQuery = req.getParameter(&quot;search&quot;);&#10;&#10;            System.out.println(&quot;Parameters - categoryId: &quot; + categoryIdParam + &quot;, search: &quot; + searchQuery);&#10;&#10;            List&lt;Product&gt; products;&#10;            List&lt;Category&gt; categories = categoryDAO.getAll();&#10;&#10;            System.out.println(&quot;Categories loaded: &quot; + (categories != null ? categories.size() : &quot;null&quot;));&#10;&#10;            if (searchQuery != null &amp;&amp; !searchQuery.trim().isEmpty()) {&#10;                System.out.println(&quot;Searching products by name: &quot; + searchQuery.trim());&#10;                products = productDAO.searchByName(searchQuery.trim());&#10;                req.setAttribute(&quot;searchQuery&quot;, searchQuery.trim());&#10;            } else if (categoryIdParam != null &amp;&amp; !categoryIdParam.isEmpty()) {&#10;                try {&#10;                    int categoryId = Integer.parseInt(categoryIdParam);&#10;                    System.out.println(&quot;Getting products by categoryId: &quot; + categoryId);&#10;                    products = productDAO.getByCategoryId(categoryId);&#10;                    req.setAttribute(&quot;selectedCategoryId&quot;, categoryId);&#10;                } catch (NumberFormatException e) {&#10;                    System.out.println(&quot;Invalid categoryId format, getting all products&quot;);&#10;                    products = productDAO.getAll();&#10;                }&#10;            } else {&#10;                System.out.println(&quot;Getting all products&quot;);&#10;                products = productDAO.getAll();&#10;            }&#10;&#10;            System.out.println(&quot;Products loaded: &quot; + (products != null ? products.size() : &quot;null&quot;));&#10;&#10;            if (products != null &amp;&amp; products.size() &gt; 0) {&#10;                System.out.println(&quot;First product: &quot; + products.get(0));&#10;            }&#10;&#10;            req.setAttribute(&quot;products&quot;, products);&#10;            req.setAttribute(&quot;categories&quot;, categories);&#10;&#10;            System.out.println(&quot;Forwarding to /shop/index.jsp&quot;);&#10;            req.getRequestDispatcher(&quot;/shop/index.jsp&quot;).forward(req, resp);&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;SQLException in ShopServlet: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            req.setAttribute(&quot;error&quot;, &quot;Có lỗi xảy ra khi tải sản phẩm. Vui lòng thử lại.&quot;);&#10;            req.getRequestDispatcher(&quot;/shop/index.jsp&quot;).forward(req, resp);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Unexpected error in ShopServlet: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            req.setAttribute(&quot;error&quot;, &quot;Có lỗi không mong muốn xảy ra.&quot;);&#10;            req.getRequestDispatcher(&quot;/shop/index.jsp&quot;).forward(req, resp);&#10;        }&#10;&#10;        System.out.println(&quot;=== ShopServlet.doGet() END ===&quot;);&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.example.crud_prj_ex.dao.CategoryDAO;&#10;import org.example.crud_prj_ex.dao.ProductDAO;&#10;import org.example.crud_prj_ex.model.Category;&#10;import org.example.crud_prj_ex.model.Product;&#10;&#10;import java.io.IOException;&#10;import java.sql.SQLException;&#10;import java.util.List;&#10;&#10;@WebServlet(&quot;/shop&quot;)&#10;public class ShopServlet extends HttpServlet {&#10;    private ProductDAO productDAO = new ProductDAO();&#10;    private CategoryDAO categoryDAO = new CategoryDAO();&#10;&#10;    public ShopServlet() {&#10;        System.out.println(&quot;=== ShopServlet CONSTRUCTOR CALLED ===&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void init() throws ServletException {&#10;        System.out.println(&quot;=== ShopServlet INIT CALLED ===&quot;);&#10;        super.init();&#10;    }&#10;&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        System.out.println(&quot;=== ShopServlet.doGet() START ===&quot;);&#10;        System.out.println(&quot;Request URI: &quot; + req.getRequestURI());&#10;        System.out.println(&quot;Context Path: &quot; + req.getContextPath());&#10;        System.out.println(&quot;Servlet Path: &quot; + req.getServletPath());&#10;&#10;        try {&#10;            String categoryIdParam = req.getParameter(&quot;categoryId&quot;);&#10;            String searchQuery = req.getParameter(&quot;search&quot;);&#10;&#10;            System.out.println(&quot;Parameters - categoryId: &quot; + categoryIdParam + &quot;, search: &quot; + searchQuery);&#10;&#10;            List&lt;Product&gt; products;&#10;            List&lt;Category&gt; categories = categoryDAO.getAll();&#10;&#10;            System.out.println(&quot;Categories loaded: &quot; + (categories != null ? categories.size() : &quot;null&quot;));&#10;&#10;            if (searchQuery != null &amp;&amp; !searchQuery.trim().isEmpty()) {&#10;                System.out.println(&quot;Searching products by name: &quot; + searchQuery.trim());&#10;                products = productDAO.searchByName(searchQuery.trim());&#10;                req.setAttribute(&quot;searchQuery&quot;, searchQuery.trim());&#10;            } else if (categoryIdParam != null &amp;&amp; !categoryIdParam.isEmpty()) {&#10;                try {&#10;                    int categoryId = Integer.parseInt(categoryIdParam);&#10;                    System.out.println(&quot;Getting products by categoryId: &quot; + categoryId);&#10;                    products = productDAO.getByCategoryId(categoryId);&#10;                    req.setAttribute(&quot;selectedCategoryId&quot;, categoryId);&#10;                } catch (NumberFormatException e) {&#10;                    System.out.println(&quot;Invalid categoryId format, getting all products&quot;);&#10;                    products = productDAO.getAll();&#10;                }&#10;            } else {&#10;                System.out.println(&quot;Getting all products&quot;);&#10;                products = productDAO.getAll();&#10;            }&#10;&#10;            System.out.println(&quot;Products loaded: &quot; + (products != null ? products.size() : &quot;null&quot;));&#10;&#10;            if (products != null &amp;&amp; products.size() &gt; 0) {&#10;                System.out.println(&quot;First product: &quot; + products.get(0));&#10;            }&#10;&#10;            req.setAttribute(&quot;products&quot;, products);&#10;            req.setAttribute(&quot;categories&quot;, categories);&#10;&#10;            System.out.println(&quot;Forwarding to /shop/index.jsp&quot;);&#10;            req.getRequestDispatcher(&quot;/shop/index.jsp&quot;).forward(req, resp);&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;SQLException in ShopServlet: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            req.setAttribute(&quot;error&quot;, &quot;Có lỗi xảy ra khi tải sản phẩm. Vui lòng thử lại.&quot;);&#10;            req.getRequestDispatcher(&quot;/shop/index.jsp&quot;).forward(req, resp);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Unexpected error in ShopServlet: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            req.setAttribute(&quot;error&quot;, &quot;Có lỗi không mong muốn xảy ra.&quot;);&#10;            req.getRequestDispatcher(&quot;/shop/index.jsp&quot;).forward(req, resp);&#10;        }&#10;&#10;        System.out.println(&quot;=== ShopServlet.doGet() END ===&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/TestProductServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/crud_prj_ex/servlet/TestProductServlet.java" />
              <option name="updatedContent" value="package org.example.crud_prj_ex.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.example.crud_prj_ex.dao.ProductDAO;&#10;import org.example.crud_prj_ex.model.Product;&#10;&#10;import java.io.IOException;&#10;import java.io.PrintWriter;&#10;import java.sql.SQLException;&#10;import java.util.List;&#10;&#10;@WebServlet(&quot;/test-products&quot;)&#10;public class TestProductServlet extends HttpServlet {&#10;    private ProductDAO productDAO = new ProductDAO();&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        System.out.println(&quot;=== TestProductServlet.doGet() START ===&quot;);&#10;        &#10;        resp.setContentType(&quot;text/html; charset=UTF-8&quot;);&#10;        PrintWriter out = resp.getWriter();&#10;        &#10;        out.println(&quot;&lt;!DOCTYPE html&gt;&quot;);&#10;        out.println(&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Test Products&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&quot;);&#10;        out.println(&quot;&lt;h1&gt;Product Test Results&lt;/h1&gt;&quot;);&#10;        &#10;        try {&#10;            System.out.println(&quot;Calling productDAO.getAll()...&quot;);&#10;            List&lt;Product&gt; products = productDAO.getAll();&#10;            &#10;            out.println(&quot;&lt;h2&gt;Database Connection: SUCCESS&lt;/h2&gt;&quot;);&#10;            out.println(&quot;&lt;p&gt;Total products found: &quot; + (products != null ? products.size() : 0) + &quot;&lt;/p&gt;&quot;);&#10;            &#10;            if (products != null &amp;&amp; !products.isEmpty()) {&#10;                out.println(&quot;&lt;h3&gt;First 5 Products:&lt;/h3&gt;&quot;);&#10;                out.println(&quot;&lt;ul&gt;&quot;);&#10;                for (int i = 0; i &lt; Math.min(5, products.size()); i++) {&#10;                    Product p = products.get(i);&#10;                    out.println(&quot;&lt;li&gt;ID: &quot; + p.getId() + &quot; - Name: &quot; + p.getName() + &quot; - Price: &quot; + p.getPrice() + &quot;&lt;/li&gt;&quot;);&#10;                }&#10;                out.println(&quot;&lt;/ul&gt;&quot;);&#10;                &#10;                out.println(&quot;&lt;h3&gt;All Products:&lt;/h3&gt;&quot;);&#10;                out.println(&quot;&lt;table border='1'&gt;&quot;);&#10;                out.println(&quot;&lt;tr&gt;&lt;th&gt;ID&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Price&lt;/th&gt;&lt;th&gt;Category&lt;/th&gt;&lt;th&gt;Stock&lt;/th&gt;&lt;/tr&gt;&quot;);&#10;                for (Product p : products) {&#10;                    out.println(&quot;&lt;tr&gt;&quot;);&#10;                    out.println(&quot;&lt;td&gt;&quot; + p.getId() + &quot;&lt;/td&gt;&quot;);&#10;                    out.println(&quot;&lt;td&gt;&quot; + p.getName() + &quot;&lt;/td&gt;&quot;);&#10;                    out.println(&quot;&lt;td&gt;&quot; + p.getPrice() + &quot;&lt;/td&gt;&quot;);&#10;                    out.println(&quot;&lt;td&gt;&quot; + p.getCategoryName() + &quot;&lt;/td&gt;&quot;);&#10;                    out.println(&quot;&lt;td&gt;&quot; + p.getStock() + &quot;&lt;/td&gt;&quot;);&#10;                    out.println(&quot;&lt;/tr&gt;&quot;);&#10;                }&#10;                out.println(&quot;&lt;/table&gt;&quot;);&#10;            } else {&#10;                out.println(&quot;&lt;p&gt;&lt;strong&gt;No products found in database!&lt;/strong&gt;&lt;/p&gt;&quot;);&#10;                out.println(&quot;&lt;p&gt;This means either:&lt;/p&gt;&quot;);&#10;                out.println(&quot;&lt;ul&gt;&quot;);&#10;                out.println(&quot;&lt;li&gt;Database is empty&lt;/li&gt;&quot;);&#10;                out.println(&quot;&lt;li&gt;All products have deleted_at IS NOT NULL&lt;/li&gt;&quot;);&#10;                out.println(&quot;&lt;li&gt;Database connection issue&lt;/li&gt;&quot;);&#10;                out.println(&quot;&lt;/ul&gt;&quot;);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;SQLException in TestProductServlet: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            &#10;            out.println(&quot;&lt;h2&gt;Database Connection: FAILED&lt;/h2&gt;&quot;);&#10;            out.println(&quot;&lt;p&gt;&lt;strong&gt;Error:&lt;/strong&gt; &quot; + e.getMessage() + &quot;&lt;/p&gt;&quot;);&#10;            out.println(&quot;&lt;p&gt;&lt;strong&gt;SQL State:&lt;/strong&gt; &quot; + e.getSQLState() + &quot;&lt;/p&gt;&quot;);&#10;            out.println(&quot;&lt;p&gt;&lt;strong&gt;Error Code:&lt;/strong&gt; &quot; + e.getErrorCode() + &quot;&lt;/p&gt;&quot;);&#10;            &#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Unexpected error in TestProductServlet: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            &#10;            out.println(&quot;&lt;h2&gt;Unexpected Error&lt;/h2&gt;&quot;);&#10;            out.println(&quot;&lt;p&gt;&lt;strong&gt;Error:&lt;/strong&gt; &quot; + e.getMessage() + &quot;&lt;/p&gt;&quot;);&#10;        }&#10;        &#10;        out.println(&quot;&lt;hr&gt;&quot;);&#10;        out.println(&quot;&lt;p&gt;&lt;a href='/CRUD_PRJ_EX_war_exploded/shop'&gt;Go to Shop&lt;/a&gt;&lt;/p&gt;&quot;);&#10;        out.println(&quot;&lt;/body&gt;&lt;/html&gt;&quot;);&#10;        &#10;        System.out.println(&quot;=== TestProductServlet.doGet() END ===&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/webapp/auth/login.jsp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/webapp/auth/login.jsp" />
              <option name="originalContent" value="&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;&#10;&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;  &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;  &lt;title&gt;Đăng nhập&lt;/title&gt;&#10;  &lt;link rel=&quot;stylesheet&quot; href=&quot;${pageContext.request.contextPath}/css/style.css&quot;&gt;&#10;" />
              <option name="updatedContent" value="&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;&#10;&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;vi&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Đăng nhập - GoMsu Store&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;${pageContext.request.contextPath}/css/style.css&quot;&gt;&#10;    &lt;style&gt;&#10;        .auth-container {&#10;            min-height: 100vh;&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            padding: 2rem;&#10;        }&#10;&#10;        .auth-card {&#10;            width: 100%;&#10;            max-width: 450px;&#10;            background: rgba(255, 255, 255, 0.12);&#10;            backdrop-filter: blur(30px);&#10;            -webkit-backdrop-filter: blur(30px);&#10;            border: 1px solid rgba(255, 255, 255, 0.25);&#10;            border-radius: var(--radius-2xl);&#10;            padding: 3rem;&#10;            box-shadow: 0 25px 50px rgba(31, 38, 135, 0.4);&#10;            position: relative;&#10;            overflow: hidden;&#10;            animation: morphIn 1.2s cubic-bezier(0.4, 0, 0.2, 1);&#10;        }&#10;&#10;        .auth-card::before {&#10;            content: '';&#10;            position: absolute;&#10;            top: 0;&#10;            left: 0;&#10;            right: 0;&#10;            height: 2px;&#10;            background: linear-gradient(90deg, transparent, var(--primary), var(--secondary), transparent);&#10;            animation: borderFlow 3s linear infinite;&#10;        }&#10;&#10;        .auth-card::after {&#10;            content: '';&#10;            position: absolute;&#10;            top: -50%;&#10;            left: -50%;&#10;            width: 200%;&#10;            height: 200%;&#10;            background: conic-gradient(from 0deg, transparent, rgba(102, 126, 234, 0.1), transparent);&#10;            animation: rotate 15s linear infinite;&#10;            pointer-events: none;&#10;        }&#10;&#10;        @keyframes morphIn {&#10;            0% {&#10;                opacity: 0;&#10;                transform: scale(0.8) rotateY(20deg);&#10;                filter: blur(10px);&#10;            }&#10;            100% {&#10;                opacity: 1;&#10;                transform: scale(1) rotateY(0deg);&#10;                filter: blur(0px);&#10;            }&#10;        }&#10;&#10;        @keyframes borderFlow {&#10;            0% { transform: translateX(-100%); }&#10;            100% { transform: translateX(100%); }&#10;        }&#10;&#10;        .auth-header {&#10;            text-align: center;&#10;            margin-bottom: 2.5rem;&#10;            position: relative;&#10;            z-index: 1;&#10;        }&#10;&#10;        .auth-logo {&#10;            font-family: 'Orbitron', monospace;&#10;            font-size: 2.5rem;&#10;            font-weight: 900;&#10;            background: linear-gradient(45deg, #fff, var(--primary), var(--secondary));&#10;            background-size: 200% 200%;&#10;            -webkit-background-clip: text;&#10;            -webkit-text-fill-color: transparent;&#10;            background-clip: text;&#10;            animation: gradientText 3s ease infinite;&#10;            margin-bottom: 0.5rem;&#10;            display: block;&#10;        }&#10;&#10;        .auth-subtitle {&#10;            color: rgba(255, 255, 255, 0.8);&#10;            font-size: 1rem;&#10;            font-weight: 300;&#10;        }&#10;&#10;        .form-floating {&#10;            position: relative;&#10;            margin-bottom: 2rem;&#10;            animation: slideInLeft 0.8s ease-out;&#10;        }&#10;&#10;        .form-floating:nth-child(2) { animation-delay: 0.2s; }&#10;        .form-floating:nth-child(3) { animation-delay: 0.4s; }&#10;&#10;        @keyframes slideInLeft {&#10;            from {&#10;                opacity: 0;&#10;                transform: translateX(-50px);&#10;            }&#10;            to {&#10;                opacity: 1;&#10;                transform: translateX(0);&#10;            }&#10;        }&#10;&#10;        .form-control-glass {&#10;            width: 100%;&#10;            padding: 1.25rem 1.5rem;&#10;            background: rgba(255, 255, 255, 0.1);&#10;            backdrop-filter: blur(10px);&#10;            border: 1px solid rgba(255, 255, 255, 0.2);&#10;            border-radius: var(--radius-lg);&#10;            font-size: 1rem;&#10;            color: white;&#10;            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);&#10;            position: relative;&#10;            z-index: 1;&#10;        }&#10;&#10;        .form-control-glass:focus {&#10;            outline: none;&#10;            border-color: var(--primary);&#10;            background: rgba(255, 255, 255, 0.15);&#10;            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.3), &#10;                        0 8px 25px rgba(102, 126, 234, 0.2);&#10;            transform: translateY(-2px) scale(1.02);&#10;        }&#10;&#10;        .form-control-glass::placeholder {&#10;            color: rgba(255, 255, 255, 0.6);&#10;            transition: all 0.3s ease;&#10;        }&#10;&#10;        .form-control-glass:focus::placeholder {&#10;            color: rgba(255, 255, 255, 0.4);&#10;            transform: translateY(-2px);&#10;        }&#10;&#10;        .floating-label {&#10;            position: absolute;&#10;            left: 1.5rem;&#10;            top: 1.25rem;&#10;            color: rgba(255, 255, 255, 0.6);&#10;            font-size: 1rem;&#10;            pointer-events: none;&#10;            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);&#10;            background: rgba(0, 0, 0, 0.1);&#10;            padding: 0 0.5rem;&#10;            border-radius: 4px;&#10;            backdrop-filter: blur(5px);&#10;        }&#10;&#10;        .form-control-glass:focus + .floating-label,&#10;        .form-control-glass:not(:placeholder-shown) + .floating-label {&#10;            top: -0.5rem;&#10;            left: 1rem;&#10;            font-size: 0.85rem;&#10;            color: var(--primary);&#10;            background: rgba(102, 126, 234, 0.2);&#10;        }&#10;&#10;        .btn-liquid {&#10;            width: 100%;&#10;            padding: 1.25rem;&#10;            background: linear-gradient(135deg, var(--primary), var(--primary-light), var(--secondary));&#10;            background-size: 300% 300%;&#10;            border: none;&#10;            border-radius: var(--radius-lg);&#10;            color: white;&#10;            font-size: 1.1rem;&#10;            font-weight: 700;&#10;            text-transform: uppercase;&#10;            letter-spacing: 1px;&#10;            cursor: pointer;&#10;            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);&#10;            position: relative;&#10;            overflow: hidden;&#10;            margin-top: 1rem;&#10;            animation: slideInUp 0.8s ease-out 0.6s both;&#10;        }&#10;&#10;        .btn-liquid::before {&#10;            content: '';&#10;            position: absolute;&#10;            top: 0;&#10;            left: -100%;&#10;            width: 100%;&#10;            height: 100%;&#10;            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);&#10;            transition: left 0.6s;&#10;        }&#10;&#10;        .btn-liquid:hover {&#10;            background-position: 100% 50%;&#10;            transform: translateY(-3px) scale(1.02);&#10;            box-shadow: 0 15px 40px rgba(102, 126, 234, 0.4);&#10;            animation: liquidPulse 2s ease infinite;&#10;        }&#10;&#10;        .btn-liquid:hover::before {&#10;            left: 100%;&#10;        }&#10;&#10;        .btn-liquid:active {&#10;            transform: translateY(-1px) scale(0.98);&#10;        }&#10;&#10;        @keyframes liquidPulse {&#10;            0%, 100% { box-shadow: 0 15px 40px rgba(102, 126, 234, 0.4); }&#10;            50% { box-shadow: 0 20px 50px rgba(102, 126, 234, 0.6); }&#10;        }&#10;&#10;        .auth-footer {&#10;            text-align: center;&#10;            margin-top: 2rem;&#10;            position: relative;&#10;            z-index: 1;&#10;            animation: fadeIn 1s ease-out 0.8s both;&#10;        }&#10;&#10;        .auth-link {&#10;            color: rgba(255, 255, 255, 0.8);&#10;            text-decoration: none;&#10;            font-weight: 500;&#10;            transition: all 0.3s ease;&#10;            position: relative;&#10;        }&#10;&#10;        .auth-link::after {&#10;            content: '';&#10;            position: absolute;&#10;            bottom: -2px;&#10;            left: 0;&#10;            width: 0;&#10;            height: 2px;&#10;            background: linear-gradient(90deg, var(--primary), var(--secondary));&#10;            transition: width 0.3s ease;&#10;        }&#10;&#10;        .auth-link:hover {&#10;            color: white;&#10;            transform: translateY(-1px);&#10;        }&#10;&#10;        .auth-link:hover::after {&#10;            width: 100%;&#10;        }&#10;&#10;        .alert-glass {&#10;            background: rgba(255, 107, 107, 0.2);&#10;            backdrop-filter: blur(10px);&#10;            border: 1px solid rgba(255, 107, 107, 0.3);&#10;            border-radius: var(--radius-lg);&#10;            padding: 1rem 1.5rem;&#10;            color: white;&#10;            margin-bottom: 1.5rem;&#10;            animation: shakeIn 0.6s ease-out;&#10;        }&#10;&#10;        @keyframes shakeIn {&#10;            0% { transform: translateX(-100px); opacity: 0; }&#10;            60% { transform: translateX(10px); }&#10;            80% { transform: translateX(-5px); }&#10;            100% { transform: translateX(0); opacity: 1; }&#10;        }&#10;&#10;        /* Particle background */&#10;        .particles {&#10;            position: absolute;&#10;            top: 0;&#10;            left: 0;&#10;            width: 100%;&#10;            height: 100%;&#10;            pointer-events: none;&#10;            z-index: 0;&#10;        }&#10;&#10;        .particle {&#10;            position: absolute;&#10;            width: 4px;&#10;            height: 4px;&#10;            background: rgba(255, 255, 255, 0.6);&#10;            border-radius: 50%;&#10;            animation: particleFloat 6s ease-in-out infinite;&#10;        }&#10;&#10;        .particle:nth-child(1) { top: 20%; left: 20%; animation-delay: 0s; }&#10;        .particle:nth-child(2) { top: 80%; left: 80%; animation-delay: 2s; }&#10;        .particle:nth-child(3) { top: 60%; left: 10%; animation-delay: 4s; }&#10;        .particle:nth-child(4) { top: 30%; left: 90%; animation-delay: 1s; }&#10;        .particle:nth-child(5) { top: 70%; left: 50%; animation-delay: 3s; }&#10;&#10;        @keyframes particleFloat {&#10;            0%, 100% { &#10;                transform: translateY(0px) scale(1); &#10;                opacity: 0.6; &#10;            }&#10;            50% { &#10;                transform: translateY(-20px) scale(1.2); &#10;                opacity: 1; &#10;            }&#10;        }&#10;&#10;        @keyframes fadeIn {&#10;            from { opacity: 0; }&#10;            to { opacity: 1; }&#10;        }&#10;&#10;        /* Responsive */&#10;        @media (max-width: 768px) {&#10;            .auth-container {&#10;                padding: 1rem;&#10;            }&#10;            &#10;            .auth-card {&#10;                padding: 2rem;&#10;            }&#10;            &#10;            .auth-logo {&#10;                font-size: 2rem;&#10;            }&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;auth-container&quot;&gt;&#10;        &lt;div class=&quot;auth-card&quot;&gt;&#10;            &lt;div class=&quot;particles&quot;&gt;&#10;                &lt;div class=&quot;particle&quot;&gt;&lt;/div&gt;&#10;                &lt;div class=&quot;particle&quot;&gt;&lt;/div&gt;&#10;                &lt;div class=&quot;particle&quot;&gt;&lt;/div&gt;&#10;                &lt;div class=&quot;particle&quot;&gt;&lt;/div&gt;&#10;                &lt;div class=&quot;particle&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;auth-header&quot;&gt;&#10;                &lt;span class=&quot;auth-logo&quot;&gt; GoMsu&lt;/span&gt;&#10;                &lt;p class=&quot;auth-subtitle&quot;&gt;Chào mừng bạn quay trở lại&lt;/p&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;c:if test=&quot;${not empty error}&quot;&gt;&#10;                &lt;div class=&quot;alert-glass&quot;&gt;&#10;                    &lt;strong&gt;❌ Lỗi:&lt;/strong&gt; ${error}&#10;                &lt;/div&gt;&#10;            &lt;/c:if&gt;&#10;&#10;            &lt;form method=&quot;post&quot; action=&quot;${pageContext.request.contextPath}/auth/login&quot;&gt;&#10;                &lt;div class=&quot;form-floating&quot;&gt;&#10;                    &lt;input type=&quot;email&quot; class=&quot;form-control-glass&quot; id=&quot;email&quot; name=&quot;email&quot; &#10;                           placeholder=&quot; &quot; required&gt;&#10;                    &lt;label for=&quot;email&quot; class=&quot;floating-label&quot;&gt; Email&lt;/label&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div class=&quot;form-floating&quot;&gt;&#10;                    &lt;input type=&quot;password&quot; class=&quot;form-control-glass&quot; id=&quot;password&quot; name=&quot;password&quot; &#10;                           placeholder=&quot; &quot; required&gt;&#10;                    &lt;label for=&quot;password&quot; class=&quot;floating-label&quot;&gt; Mật khẩu&lt;/label&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button type=&quot;submit&quot; class=&quot;btn-liquid&quot;&gt;&#10;                    ✨ Đăng nhập&#10;                &lt;/button&gt;&#10;            &lt;/form&gt;&#10;&#10;            &lt;div class=&quot;auth-footer&quot;&gt;&#10;                &lt;p style=&quot;color: rgba(255, 255, 255, 0.7); margin-bottom: 1rem;&quot;&gt;&#10;                    Chưa có tài khoản?&#10;                &lt;/p&gt;&#10;                &lt;a href=&quot;${pageContext.request.contextPath}/auth/register&quot; class=&quot;auth-link&quot;&gt;&#10;                     Đăng ký ngay&#10;                &lt;/a&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script&gt;&#10;        // Add interactive ripple effect&#10;        document.querySelector('.btn-liquid').addEventListener('click', function(e) {&#10;            const ripple = document.createElement('span');&#10;            const rect = this.getBoundingClientRect();&#10;            const size = Math.max(rect.width, rect.height);&#10;            const x = e.clientX - rect.left - size / 2;&#10;            const y = e.clientY - rect.top - size / 2;&#10;            &#10;            ripple.style.width = ripple.style.height = size + 'px';&#10;            ripple.style.left = x + 'px';&#10;            ripple.style.top = y + 'px';&#10;            ripple.style.position = 'absolute';&#10;            ripple.style.borderRadius = '50%';&#10;            ripple.style.background = 'rgba(255, 255, 255, 0.6)';&#10;            ripple.style.transform = 'scale(0)';&#10;            ripple.style.animation = 'ripple 0.6s linear';&#10;            ripple.style.pointerEvents = 'none';&#10;            &#10;            this.appendChild(ripple);&#10;            &#10;            setTimeout(() =&gt; ripple.remove(), 600);&#10;        });&#10;&#10;        // Add CSS for ripple animation&#10;        const style = document.createElement('style');&#10;        style.textContent = `&#10;            @keyframes ripple {&#10;                to {&#10;                    transform: scale(2);&#10;                    opacity: 0;&#10;                }&#10;            }&#10;        `;&#10;        document.head.appendChild(style);&#10;&#10;        // Enhanced form validation with smooth animations&#10;        const inputs = document.querySelectorAll('.form-control-glass');&#10;        inputs.forEach(input =&gt; {&#10;            input.addEventListener('focus', function() {&#10;                this.parentElement.style.transform = 'scale(1.02)';&#10;            });&#10;            &#10;            input.addEventListener('blur', function() {&#10;                this.parentElement.style.transform = 'scale(1)';&#10;            });&#10;        });&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/webapp/auth/register.jsp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/webapp/auth/register.jsp" />
              <option name="updatedContent" value="&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;&#10;&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;vi&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Đăng ký - GoMsu Store&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;${pageContext.request.contextPath}/css/style.css&quot;&gt;&#10;    &lt;style&gt;&#10;        .auth-container {&#10;            min-height: 100vh;&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            padding: 2rem;&#10;        }&#10;&#10;        .auth-card {&#10;            width: 100%;&#10;            max-width: 500px;&#10;            background: rgba(255, 255, 255, 0.12);&#10;            backdrop-filter: blur(30px);&#10;            -webkit-backdrop-filter: blur(30px);&#10;            border: 1px solid rgba(255, 255, 255, 0.25);&#10;            border-radius: var(--radius-2xl);&#10;            padding: 3rem;&#10;            box-shadow: 0 25px 50px rgba(31, 38, 135, 0.4);&#10;            position: relative;&#10;            overflow: hidden;&#10;            animation: morphIn 1.2s cubic-bezier(0.4, 0, 0.2, 1);&#10;        }&#10;&#10;        .auth-card::before {&#10;            content: '';&#10;            position: absolute;&#10;            top: 0;&#10;            left: 0;&#10;            right: 0;&#10;            height: 2px;&#10;            background: linear-gradient(90deg, transparent, var(--primary), var(--secondary), transparent);&#10;            animation: borderFlow 3s linear infinite;&#10;        }&#10;&#10;        .auth-card::after {&#10;            content: '';&#10;            position: absolute;&#10;            top: -50%;&#10;            left: -50%;&#10;            width: 200%;&#10;            height: 200%;&#10;            background: conic-gradient(from 0deg, transparent, rgba(102, 126, 234, 0.1), transparent);&#10;            animation: rotate 15s linear infinite;&#10;            pointer-events: none;&#10;        }&#10;&#10;        @keyframes morphIn {&#10;            0% {&#10;                opacity: 0;&#10;                transform: scale(0.8) rotateY(20deg);&#10;                filter: blur(10px);&#10;            }&#10;            100% {&#10;                opacity: 1;&#10;                transform: scale(1) rotateY(0deg);&#10;                filter: blur(0px);&#10;            }&#10;        }&#10;&#10;        @keyframes borderFlow {&#10;            0% { transform: translateX(-100%); }&#10;            100% { transform: translateX(100%); }&#10;        }&#10;&#10;        @keyframes rotate {&#10;            0% { transform: rotate(0deg); }&#10;            100% { transform: rotate(360deg); }&#10;        }&#10;&#10;        .auth-header {&#10;            text-align: center;&#10;            margin-bottom: 2.5rem;&#10;            position: relative;&#10;            z-index: 1;&#10;        }&#10;&#10;        .auth-logo {&#10;            font-family: 'Orbitron', monospace;&#10;            font-size: 2.5rem;&#10;            font-weight: 900;&#10;            background: linear-gradient(45deg, #fff, var(--primary), var(--secondary));&#10;            background-size: 200% 200%;&#10;            -webkit-background-clip: text;&#10;            -webkit-text-fill-color: transparent;&#10;            background-clip: text;&#10;            animation: gradientText 3s ease infinite;&#10;            margin-bottom: 0.5rem;&#10;            display: block;&#10;        }&#10;&#10;        .auth-subtitle {&#10;            color: rgba(255, 255, 255, 0.8);&#10;            font-size: 1rem;&#10;            font-weight: 300;&#10;        }&#10;&#10;        .form-floating {&#10;            position: relative;&#10;            margin-bottom: 2rem;&#10;            animation: slideInLeft 0.8s ease-out;&#10;        }&#10;&#10;        .form-floating:nth-child(2) { animation-delay: 0.1s; }&#10;        .form-floating:nth-child(3) { animation-delay: 0.2s; }&#10;        .form-floating:nth-child(4) { animation-delay: 0.3s; }&#10;        .form-floating:nth-child(5) { animation-delay: 0.4s; }&#10;&#10;        @keyframes slideInLeft {&#10;            from {&#10;                opacity: 0;&#10;                transform: translateX(-50px);&#10;            }&#10;            to {&#10;                opacity: 1;&#10;                transform: translateX(0);&#10;            }&#10;        }&#10;&#10;        .form-control-glass {&#10;            width: 100%;&#10;            padding: 1.25rem 1.5rem;&#10;            background: rgba(255, 255, 255, 0.1);&#10;            backdrop-filter: blur(10px);&#10;            border: 1px solid rgba(255, 255, 255, 0.2);&#10;            border-radius: var(--radius-lg);&#10;            font-size: 1rem;&#10;            color: white;&#10;            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);&#10;            position: relative;&#10;            z-index: 1;&#10;        }&#10;&#10;        .form-control-glass:focus {&#10;            outline: none;&#10;            border-color: var(--primary);&#10;            background: rgba(255, 255, 255, 0.15);&#10;            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.3), &#10;                        0 8px 25px rgba(102, 126, 234, 0.2);&#10;            transform: translateY(-2px) scale(1.02);&#10;        }&#10;&#10;        .form-control-glass::placeholder {&#10;            color: rgba(255, 255, 255, 0.6);&#10;            transition: all 0.3s ease;&#10;        }&#10;&#10;        .form-control-glass:focus::placeholder {&#10;            color: rgba(255, 255, 255, 0.4);&#10;            transform: translateY(-2px);&#10;        }&#10;&#10;        .floating-label {&#10;            position: absolute;&#10;            left: 1.5rem;&#10;            top: 1.25rem;&#10;            color: rgba(255, 255, 255, 0.6);&#10;            font-size: 1rem;&#10;            pointer-events: none;&#10;            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);&#10;            background: rgba(0, 0, 0, 0.1);&#10;            padding: 0 0.5rem;&#10;            border-radius: 4px;&#10;            backdrop-filter: blur(5px);&#10;        }&#10;&#10;        .form-control-glass:focus + .floating-label,&#10;        .form-control-glass:not(:placeholder-shown) + .floating-label {&#10;            top: -0.5rem;&#10;            left: 1rem;&#10;            font-size: 0.85rem;&#10;            color: var(--primary);&#10;            background: rgba(102, 126, 234, 0.2);&#10;        }&#10;&#10;        .btn-liquid {&#10;            width: 100%;&#10;            padding: 1.25rem;&#10;            background: linear-gradient(135deg, var(--primary), var(--primary-light), var(--secondary));&#10;            background-size: 300% 300%;&#10;            border: none;&#10;            border-radius: var(--radius-lg);&#10;            color: white;&#10;            font-size: 1.1rem;&#10;            font-weight: 700;&#10;            text-transform: uppercase;&#10;            letter-spacing: 1px;&#10;            cursor: pointer;&#10;            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);&#10;            position: relative;&#10;            overflow: hidden;&#10;            margin-top: 1rem;&#10;            animation: slideInUp 0.8s ease-out 0.6s both;&#10;        }&#10;&#10;        .btn-liquid::before {&#10;            content: '';&#10;            position: absolute;&#10;            top: 0;&#10;            left: -100%;&#10;            width: 100%;&#10;            height: 100%;&#10;            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);&#10;            transition: left 0.6s;&#10;        }&#10;&#10;        .btn-liquid:hover {&#10;            background-position: 100% 50%;&#10;            transform: translateY(-3px) scale(1.02);&#10;            box-shadow: 0 15px 40px rgba(102, 126, 234, 0.4);&#10;            animation: liquidPulse 2s ease infinite;&#10;        }&#10;&#10;        .btn-liquid:hover::before {&#10;            left: 100%;&#10;        }&#10;&#10;        .btn-liquid:active {&#10;            transform: translateY(-1px) scale(0.98);&#10;        }&#10;&#10;        @keyframes liquidPulse {&#10;            0%, 100% { box-shadow: 0 15px 40px rgba(102, 126, 234, 0.4); }&#10;            50% { box-shadow: 0 20px 50px rgba(102, 126, 234, 0.6); }&#10;        }&#10;&#10;        .auth-footer {&#10;            text-align: center;&#10;            margin-top: 2rem;&#10;            position: relative;&#10;            z-index: 1;&#10;            animation: fadeIn 1s ease-out 0.8s both;&#10;        }&#10;&#10;        .auth-link {&#10;            color: rgba(255, 255, 255, 0.8);&#10;            text-decoration: none;&#10;            font-weight: 500;&#10;            transition: all 0.3s ease;&#10;            position: relative;&#10;        }&#10;&#10;        .auth-link::after {&#10;            content: '';&#10;            position: absolute;&#10;            bottom: -2px;&#10;            left: 0;&#10;            width: 0;&#10;            height: 2px;&#10;            background: linear-gradient(90deg, var(--primary), var(--secondary));&#10;            transition: width 0.3s ease;&#10;        }&#10;&#10;        .auth-link:hover {&#10;            color: white;&#10;            transform: translateY(-1px);&#10;        }&#10;&#10;        .auth-link:hover::after {&#10;            width: 100%;&#10;        }&#10;&#10;        .alert-glass {&#10;            background: rgba(255, 107, 107, 0.2);&#10;            backdrop-filter: blur(10px);&#10;            border: 1px solid rgba(255, 107, 107, 0.3);&#10;            border-radius: var(--radius-lg);&#10;            padding: 1rem 1.5rem;&#10;            color: white;&#10;            margin-bottom: 1.5rem;&#10;            animation: shakeIn 0.6s ease-out;&#10;        }&#10;&#10;        @keyframes shakeIn {&#10;            0% { transform: translateX(-100px); opacity: 0; }&#10;            60% { transform: translateX(10px); }&#10;            80% { transform: translateX(-5px); }&#10;            100% { transform: translateX(0); opacity: 1; }&#10;        }&#10;&#10;        .form-row {&#10;            display: grid;&#10;            grid-template-columns: 1fr 1fr;&#10;            gap: 1rem;&#10;        }&#10;&#10;        /* Particle background */&#10;        .particles {&#10;            position: absolute;&#10;            top: 0;&#10;            left: 0;&#10;            width: 100%;&#10;            height: 100%;&#10;            pointer-events: none;&#10;            z-index: 0;&#10;        }&#10;&#10;        .particle {&#10;            position: absolute;&#10;            width: 4px;&#10;            height: 4px;&#10;            background: rgba(255, 255, 255, 0.6);&#10;            border-radius: 50%;&#10;            animation: particleFloat 6s ease-in-out infinite;&#10;        }&#10;&#10;        .particle:nth-child(1) { top: 20%; left: 20%; animation-delay: 0s; }&#10;        .particle:nth-child(2) { top: 80%; left: 80%; animation-delay: 2s; }&#10;        .particle:nth-child(3) { top: 60%; left: 10%; animation-delay: 4s; }&#10;        .particle:nth-child(4) { top: 30%; left: 90%; animation-delay: 1s; }&#10;        .particle:nth-child(5) { top: 70%; left: 50%; animation-delay: 3s; }&#10;&#10;        @keyframes particleFloat {&#10;            0%, 100% { &#10;                transform: translateY(0px) scale(1); &#10;                opacity: 0.6; &#10;            }&#10;            50% { &#10;                transform: translateY(-20px) scale(1.2); &#10;                opacity: 1; &#10;            }&#10;        }&#10;&#10;        @keyframes fadeIn {&#10;            from { opacity: 0; }&#10;            to { opacity: 1; }&#10;        }&#10;&#10;        @keyframes slideInUp {&#10;            from {&#10;                opacity: 0;&#10;                transform: translateY(30px);&#10;            }&#10;            to {&#10;                opacity: 1;&#10;                transform: translateY(0);&#10;            }&#10;        }&#10;&#10;        @keyframes gradientText {&#10;            0%, 100% { background-position: 0% 50%; }&#10;            50% { background-position: 100% 50%; }&#10;        }&#10;&#10;        /* Responsive */&#10;        @media (max-width: 768px) {&#10;            .auth-container {&#10;                padding: 1rem;&#10;            }&#10;            &#10;            .auth-card {&#10;                padding: 2rem;&#10;            }&#10;            &#10;            .auth-logo {&#10;                font-size: 2rem;&#10;            }&#10;&#10;            .form-row {&#10;                grid-template-columns: 1fr;&#10;            }&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;auth-container&quot;&gt;&#10;        &lt;div class=&quot;auth-card&quot;&gt;&#10;            &lt;div class=&quot;particles&quot;&gt;&#10;                &lt;div class=&quot;particle&quot;&gt;&lt;/div&gt;&#10;                &lt;div class=&quot;particle&quot;&gt;&lt;/div&gt;&#10;                &lt;div class=&quot;particle&quot;&gt;&lt;/div&gt;&#10;                &lt;div class=&quot;particle&quot;&gt;&lt;/div&gt;&#10;                &lt;div class=&quot;particle&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;auth-header&quot;&gt;&#10;                &lt;span class=&quot;auth-logo&quot;&gt; GoMsu&lt;/span&gt;&#10;                &lt;p class=&quot;auth-subtitle&quot;&gt;Tạo tài khoản mới để bắt đầu mua sắm&lt;/p&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;c:if test=&quot;${not empty error}&quot;&gt;&#10;                &lt;div class=&quot;alert-glass&quot;&gt;&#10;                    &lt;strong&gt;❌ Lỗi:&lt;/strong&gt; ${error}&#10;                &lt;/div&gt;&#10;            &lt;/c:if&gt;&#10;&#10;            &lt;form method=&quot;post&quot; action=&quot;${pageContext.request.contextPath}/auth/register&quot;&gt;&#10;                &lt;div class=&quot;form-floating&quot;&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control-glass&quot; id=&quot;fullName&quot; name=&quot;fullName&quot; &#10;                           placeholder=&quot; &quot; value=&quot;${fullName}&quot; required&gt;&#10;                    &lt;label for=&quot;fullName&quot; class=&quot;floating-label&quot;&gt; Họ và tên&lt;/label&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div class=&quot;form-floating&quot;&gt;&#10;                    &lt;input type=&quot;email&quot; class=&quot;form-control-glass&quot; id=&quot;email&quot; name=&quot;email&quot; &#10;                           placeholder=&quot; &quot; value=&quot;${email}&quot; required&gt;&#10;                    &lt;label for=&quot;email&quot; class=&quot;floating-label&quot;&gt; Email&lt;/label&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div class=&quot;form-floating&quot;&gt;&#10;                    &lt;input type=&quot;tel&quot; class=&quot;form-control-glass&quot; id=&quot;phoneNumber&quot; name=&quot;phoneNumber&quot; &#10;                           placeholder=&quot; &quot; value=&quot;${phoneNumber}&quot;&gt;&#10;                    &lt;label for=&quot;phoneNumber&quot; class=&quot;floating-label&quot;&gt; Số điện thoại&lt;/label&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div class=&quot;form-row&quot;&gt;&#10;                    &lt;div class=&quot;form-floating&quot;&gt;&#10;                        &lt;input type=&quot;password&quot; class=&quot;form-control-glass&quot; id=&quot;password&quot; name=&quot;password&quot; &#10;                               placeholder=&quot; &quot; required&gt;&#10;                        &lt;label for=&quot;password&quot; class=&quot;floating-label&quot;&gt; Mật khẩu&lt;/label&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;form-floating&quot;&gt;&#10;                        &lt;input type=&quot;password&quot; class=&quot;form-control-glass&quot; id=&quot;confirmPassword&quot; name=&quot;confirmPassword&quot; &#10;                               placeholder=&quot; &quot; required&gt;&#10;                        &lt;label for=&quot;confirmPassword&quot; class=&quot;floating-label&quot;&gt; Xác nhận mật khẩu&lt;/label&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button type=&quot;submit&quot; class=&quot;btn-liquid&quot;&gt;&#10;                    ✨ Đăng ký ngay&#10;                &lt;/button&gt;&#10;            &lt;/form&gt;&#10;&#10;            &lt;div class=&quot;auth-footer&quot;&gt;&#10;                &lt;p style=&quot;color: rgba(255, 255, 255, 0.7); margin-bottom: 1rem;&quot;&gt;&#10;                    Đã có tài khoản?&#10;                &lt;/p&gt;&#10;                &lt;a href=&quot;${pageContext.request.contextPath}/auth/login&quot; class=&quot;auth-link&quot;&gt;&#10;                     Đăng nhập ngay&#10;                &lt;/a&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script&gt;&#10;        // Add interactive ripple effect&#10;        document.querySelector('.btn-liquid').addEventListener('click', function(e) {&#10;            const ripple = document.createElement('span');&#10;            const rect = this.getBoundingClientRect();&#10;            const size = Math.max(rect.width, rect.height);&#10;            const x = e.clientX - rect.left - size / 2;&#10;            const y = e.clientY - rect.top - size / 2;&#10;            &#10;            ripple.style.width = ripple.style.height = size + 'px';&#10;            ripple.style.left = x + 'px';&#10;            ripple.style.top = y + 'px';&#10;            ripple.style.position = 'absolute';&#10;            ripple.style.borderRadius = '50%';&#10;            ripple.style.background = 'rgba(255, 255, 255, 0.6)';&#10;            ripple.style.transform = 'scale(0)';&#10;            ripple.style.animation = 'ripple 0.6s linear';&#10;            ripple.style.pointerEvents = 'none';&#10;            &#10;            this.appendChild(ripple);&#10;            &#10;            setTimeout(() =&gt; ripple.remove(), 600);&#10;        });&#10;&#10;        // Add CSS for ripple animation&#10;        const style = document.createElement('style');&#10;        style.textContent = `&#10;            @keyframes ripple {&#10;                to {&#10;                    transform: scale(2);&#10;                    opacity: 0;&#10;                }&#10;            }&#10;        `;&#10;        document.head.appendChild(style);&#10;&#10;        // Enhanced form validation with smooth animations&#10;        const inputs = document.querySelectorAll('.form-control-glass');&#10;        inputs.forEach(input =&gt; {&#10;            input.addEventListener('focus', function() {&#10;                this.parentElement.style.transform = 'scale(1.02)';&#10;            });&#10;            &#10;            input.addEventListener('blur', function() {&#10;                this.parentElement.style.transform = 'scale(1)';&#10;            });&#10;        });&#10;&#10;        // Password confirmation validation&#10;        const password = document.getElementById('password');&#10;        const confirmPassword = document.getElementById('confirmPassword');&#10;&#10;        confirmPassword.addEventListener('input', function() {&#10;            if (this.value !== password.value) {&#10;                this.style.borderColor = 'var(--danger)';&#10;            } else {&#10;                this.style.borderColor = 'var(--success)';&#10;            }&#10;        });&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/webapp/cart/cart.jsp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/webapp/cart/cart.jsp" />
              <option name="originalContent" value="&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&#10;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;&#10;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; prefix=&quot;fmt&quot; %&gt;&#10;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/functions&quot; prefix=&quot;fn&quot; %&gt;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;vi&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Giỏ Hàng - GoMsu Store&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;${pageContext.request.contextPath}/css/style.css&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot;&gt;&#10;    &lt;style&gt;&#10;        :root {&#10;            --primary: #667eea;&#10;            --primary-dark: #5a67d8;&#10;            --secondary: #f093fb;&#10;            --accent: #4ecdc4;&#10;            --success: #48bb78;&#10;            --warning: #ed8936;&#10;            --danger: #f56565;&#10;            --dark: #1a202c;&#10;            --light: #2d3748;&#10;            --glass-bg: rgba(255, 255, 255, 0.1);&#10;            --glass-border: rgba(255, 255, 255, 0.2);&#10;            --text-primary: #ffffff;&#10;            --text-secondary: #e2e8f0;&#10;            --text-muted: #a0aec0;&#10;            --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.3);&#10;            --shadow-md: 0 4px 16px rgba(0, 0, 0, 0.4);&#10;            --shadow-lg: 0 8px 32px rgba(0, 0, 0, 0.5);&#10;            --radius: 8px;&#10;            --radius-md: 12px;&#10;            --radius-lg: 16px;&#10;            --radius-xl: 20px;&#10;        }&#10;&#10;        body {&#10;            font-family: 'Inter', sans-serif;&#10;            background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);&#10;            background-attachment: fixed;&#10;            min-height: 100vh;&#10;            margin: 0;&#10;            padding: 0;&#10;            color: var(--text-primary);&#10;            overflow-x: hidden;&#10;        }&#10;&#10;        .navbar {&#10;            background: rgba(26, 32, 44, 0.95);&#10;            backdrop-filter: blur(10px);&#10;            border-bottom: 1px solid var(--glass-border);&#10;            padding: 1rem 0;&#10;            position: fixed;&#10;            top: 0;&#10;            left: 0;&#10;            right: 0;&#10;            z-index: 1000;&#10;            transition: all 0.3s ease;&#10;        }&#10;&#10;        .navbar-container {&#10;            max-width: 1200px;&#10;            margin: 0 auto;&#10;            padding: 0 2rem;&#10;            display: flex;&#10;            justify-content: space-between;&#10;            align-items: center;&#10;        }&#10;&#10;        .navbar-brand {&#10;            font-size: 1.5rem;&#10;            font-weight: 700;&#10;            color: var(--primary);&#10;            text-decoration: none;&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .navbar-nav {&#10;            display: flex;&#10;            list-style: none;&#10;            margin: 0;&#10;            padding: 0;&#10;            gap: 2rem;&#10;        }&#10;&#10;        .nav-link {&#10;            color: var(--text-secondary);&#10;            text-decoration: none;&#10;            font-weight: 500;&#10;            padding: 0.5rem 1rem;&#10;            border-radius: var(--radius);&#10;            transition: all 0.3s ease;&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .nav-link:hover,&#10;        .nav-link.active {&#10;            background: var(--primary);&#10;            color: white;&#10;            transform: translateY(-2px);&#10;        }&#10;&#10;        .user-menu {&#10;            position: relative;&#10;        }&#10;&#10;        .dropdown {&#10;            position: relative;&#10;        }&#10;&#10;        .dropdown-menu {&#10;            position: absolute;&#10;            top: 100%;&#10;            right: 0;&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(15px);&#10;            border: 1px solid var(--glass-border);&#10;            border-radius: var(--radius-md);&#10;            box-shadow: var(--shadow-lg);&#10;            padding: 0.5rem;&#10;            min-width: 200px;&#10;            opacity: 0;&#10;            visibility: hidden;&#10;            transform: translateY(-10px);&#10;            transition: all 0.3s ease;&#10;        }&#10;&#10;        .dropdown:hover .dropdown-menu {&#10;            opacity: 1;&#10;            visibility: visible;&#10;            transform: translateY(0);&#10;        }&#10;&#10;        .dropdown-item {&#10;            display: block;&#10;            padding: 0.75rem 1rem;&#10;            color: var(--text-primary);&#10;            text-decoration: none;&#10;            border-radius: var(--radius);&#10;            transition: background 0.2s ease;&#10;        }&#10;&#10;        .dropdown-item:hover {&#10;            background: rgba(255, 255, 255, 0.1);&#10;        }&#10;&#10;        .main-content {&#10;            margin-top: 100px;&#10;            padding: 2rem;&#10;            min-height: calc(100vh - 100px);&#10;        }&#10;&#10;        .container {&#10;            max-width: 1200px;&#10;            margin: 0 auto;&#10;        }&#10;&#10;        .cart-header {&#10;            text-align: center;&#10;            margin-bottom: 3rem;&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(20px);&#10;            padding: 2rem;&#10;            border-radius: var(--radius-xl);&#10;            border: 1px solid var(--glass-border);&#10;        }&#10;&#10;        .cart-title {&#10;            font-size: 2.5rem;&#10;            font-weight: 700;&#10;            margin-bottom: 1rem;&#10;            background: linear-gradient(135deg, var(--primary), var(--secondary));&#10;            -webkit-background-clip: text;&#10;            -webkit-text-fill-color: transparent;&#10;            background-clip: text;&#10;        }&#10;&#10;        .cart-subtitle {&#10;            color: var(--text-secondary);&#10;            font-size: 1.1rem;&#10;        }&#10;&#10;        .cart-content {&#10;            display: grid;&#10;            grid-template-columns: 1fr 350px;&#10;            gap: 2rem;&#10;        }&#10;&#10;        .cart-items {&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(20px);&#10;            border-radius: var(--radius-xl);&#10;            border: 1px solid var(--glass-border);&#10;            overflow: hidden;&#10;        }&#10;&#10;        .cart-item {&#10;            display: grid;&#10;            grid-template-columns: 120px 1fr auto;&#10;            gap: 1.5rem;&#10;            padding: 2rem;&#10;            border-bottom: 1px solid var(--glass-border);&#10;            align-items: center;&#10;            transition: all 0.3s ease;&#10;        }&#10;&#10;        .cart-item:hover {&#10;            background: rgba(102, 126, 234, 0.1);&#10;            transform: translateX(5px);&#10;        }&#10;&#10;        .cart-item:last-child {&#10;            border-bottom: none;&#10;        }&#10;&#10;        .item-image {&#10;            width: 120px;&#10;            height: 120px;&#10;            border-radius: var(--radius-lg);&#10;            overflow: hidden;&#10;            box-shadow: var(--shadow-md);&#10;            position: relative;&#10;        }&#10;&#10;        .item-image img {&#10;            width: 100%;&#10;            height: 100%;&#10;            object-fit: cover;&#10;            transition: transform 0.3s ease;&#10;        }&#10;&#10;        .cart-item:hover .item-image img {&#10;            transform: scale(1.05);&#10;        }&#10;&#10;        .item-details {&#10;            display: flex;&#10;            flex-direction: column;&#10;            gap: 0.75rem;&#10;        }&#10;&#10;        .item-name {&#10;            font-weight: 700;&#10;            font-size: 1.25rem;&#10;            color: var(--text-primary);&#10;            margin-bottom: 0.5rem;&#10;            line-height: 1.3;&#10;        }&#10;&#10;        .item-category {&#10;            color: var(--text-muted);&#10;            font-size: 0.9rem;&#10;            text-transform: uppercase;&#10;            letter-spacing: 0.5px;&#10;            font-weight: 500;&#10;        }&#10;&#10;        .item-price {&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.75rem;&#10;            flex-wrap: wrap;&#10;        }&#10;&#10;        .current-price {&#10;            font-size: 1.25rem;&#10;            font-weight: 700;&#10;            color: var(--primary);&#10;        }&#10;&#10;        .original-price {&#10;            font-size: 1rem;&#10;            color: var(--text-muted);&#10;            text-decoration: line-through;&#10;        }&#10;&#10;        .discount-badge {&#10;            background: var(--danger);&#10;            color: white;&#10;            padding: 0.25rem 0.5rem;&#10;            border-radius: 12px;&#10;            font-size: 0.75rem;&#10;            font-weight: 600;&#10;        }&#10;&#10;        .item-actions {&#10;            display: flex;&#10;            flex-direction: column;&#10;            align-items: center;&#10;            gap: 1rem;&#10;        }&#10;&#10;        .quantity-controls {&#10;            display: flex;&#10;            align-items: center;&#10;            background: var(--glass-bg);&#10;            border: 1px solid var(--glass-border);&#10;            border-radius: var(--radius-lg);&#10;            overflow: hidden;&#10;            box-shadow: var(--shadow-sm);&#10;        }&#10;&#10;        .qty-btn {&#10;            width: 40px;&#10;            height: 40px;&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            background: transparent;&#10;            border: none;&#10;            cursor: pointer;&#10;            font-size: 1rem;&#10;            font-weight: bold;&#10;            color: var(--primary);&#10;            transition: all 0.2s ease;&#10;        }&#10;&#10;        .qty-btn:hover:not(:disabled) {&#10;            background: var(--primary);&#10;            color: white;&#10;        }&#10;&#10;        .qty-btn:disabled {&#10;            opacity: 0.5;&#10;            cursor: not-allowed;&#10;        }&#10;&#10;        .qty-input {&#10;            width: 60px;&#10;            height: 40px;&#10;            text-align: center;&#10;            border: none;&#10;            background: transparent;&#10;            font-size: 1rem;&#10;            font-weight: 600;&#10;            color: var(--text-primary);&#10;        }&#10;&#10;        .item-total {&#10;            text-align: center;&#10;        }&#10;&#10;        .total-value {&#10;            font-weight: 700;&#10;            font-size: 1.1rem;&#10;            color: var(--text-primary);&#10;        }&#10;&#10;        .remove-btn {&#10;            background: var(--danger);&#10;            color: white;&#10;            border: none;&#10;            width: 40px;&#10;            height: 40px;&#10;            border-radius: 50%;&#10;            cursor: pointer;&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            transition: all 0.3s ease;&#10;            margin-top: 0.5rem;&#10;        }&#10;&#10;        .remove-btn:hover {&#10;            background: #e53e3e;&#10;            transform: scale(1.1);&#10;        }&#10;&#10;        .cart-summary {&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(20px);&#10;            border-radius: var(--radius-xl);&#10;            border: 1px solid var(--glass-border);&#10;            padding: 2rem;&#10;            height: fit-content;&#10;            position: sticky;&#10;            top: 120px;&#10;        }&#10;&#10;        .summary-title {&#10;            font-size: 1.5rem;&#10;            font-weight: 700;&#10;            margin-bottom: 1.5rem;&#10;            color: var(--text-primary);&#10;            text-align: center;&#10;            padding-bottom: 1rem;&#10;            border-bottom: 2px solid var(--primary);&#10;        }&#10;&#10;        .summary-row {&#10;            display: flex;&#10;            justify-content: space-between;&#10;            align-items: center;&#10;            padding: 0.75rem 0;&#10;            border-bottom: 1px dashed var(--glass-border);&#10;        }&#10;&#10;        .summary-row:last-of-type {&#10;            border-bottom: none;&#10;            margin-top: 1rem;&#10;            padding-top: 1rem;&#10;            border-top: 2px solid var(--glass-border);&#10;        }&#10;&#10;        .summary-label {&#10;            color: var(--text-secondary);&#10;            font-weight: 500;&#10;        }&#10;&#10;        .summary-value {&#10;            font-weight: 600;&#10;            color: var(--text-primary);&#10;        }&#10;&#10;        .checkout-btn {&#10;            width: 100%;&#10;            background: linear-gradient(135deg, var(--primary), var(--primary-dark));&#10;            color: white;&#10;            border: none;&#10;            padding: 1rem 2rem;&#10;            border-radius: var(--radius-lg);&#10;            font-size: 1.1rem;&#10;            font-weight: 600;&#10;            cursor: pointer;&#10;            margin-top: 1.5rem;&#10;            transition: all 0.3s ease;&#10;            text-decoration: none;&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .checkout-btn:hover {&#10;            transform: translateY(-2px);&#10;            box-shadow: var(--shadow-lg);&#10;        }&#10;&#10;        .empty-cart {&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(20px);&#10;            border-radius: var(--radius-xl);&#10;            border: 1px solid var(--glass-border);&#10;            padding: 4rem 2rem;&#10;            text-align: center;&#10;        }&#10;&#10;        .empty-cart-icon {&#10;            font-size: 4rem;&#10;            color: var(--text-muted);&#10;            margin-bottom: 1.5rem;&#10;            opacity: 0.7;&#10;        }&#10;&#10;        .empty-cart-title {&#10;            font-size: 1.75rem;&#10;            font-weight: 700;&#10;            margin-bottom: 1rem;&#10;            color: var(--text-primary);&#10;        }&#10;&#10;        .empty-cart-message {&#10;            color: var(--text-secondary);&#10;            margin-bottom: 2rem;&#10;            font-size: 1.1rem;&#10;        }&#10;&#10;        .btn {&#10;            display: inline-flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;            padding: 0.75rem 1.5rem;&#10;            border-radius: var(--radius-lg);&#10;            text-decoration: none;&#10;            font-weight: 600;&#10;            transition: all 0.3s ease;&#10;            border: none;&#10;            cursor: pointer;&#10;        }&#10;&#10;        .btn-primary {&#10;            background: linear-gradient(135deg, var(--primary), var(--primary-dark));&#10;            color: white;&#10;        }&#10;&#10;        .btn-primary:hover {&#10;            transform: translateY(-2px);&#10;            box-shadow: var(--shadow-md);&#10;        }&#10;&#10;        /* Responsive */&#10;        @media (max-width: 768px) {&#10;            .navbar-container {&#10;                padding: 0 1rem;&#10;            }&#10;&#10;            .navbar-nav {&#10;                gap: 1rem;&#10;            }&#10;&#10;            .main-content {&#10;                padding: 1rem;&#10;                margin-top: 80px;&#10;            }&#10;&#10;            .cart-content {&#10;                grid-template-columns: 1fr;&#10;                gap: 1rem;&#10;            }&#10;&#10;            .cart-item {&#10;                grid-template-columns: 80px 1fr;&#10;                gap: 1rem;&#10;                padding: 1.5rem;&#10;            }&#10;&#10;            .item-image {&#10;                width: 80px;&#10;                height: 80px;&#10;            }&#10;&#10;            .item-actions {&#10;                grid-column: 1 / -1;&#10;                flex-direction: row;&#10;                justify-content: space-between;&#10;                margin-top: 1rem;&#10;            }&#10;&#10;            .cart-title {&#10;                font-size: 2rem;&#10;            }&#10;        }&#10;&#10;        /* Notification */&#10;        .notification {&#10;            position: fixed;&#10;            top: 100px;&#10;            right: 20px;&#10;            background: var(--success);&#10;            color: white;&#10;            padding: 1rem 1.5rem;&#10;            border-radius: var(--radius-lg);&#10;            box-shadow: var(--shadow-lg);&#10;            transform: translateX(400px);&#10;            transition: transform 0.3s ease;&#10;            z-index: 1001;&#10;        }&#10;&#10;        .notification.show {&#10;            transform: translateX(0);&#10;        }&#10;&#10;        .notification.error {&#10;            background: var(--danger);&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;!-- Fixed Navbar --&gt;&#10;    &lt;nav class=&quot;navbar&quot; id=&quot;navbar&quot;&gt;&#10;        &lt;div class=&quot;navbar-container&quot;&gt;&#10;            &lt;a href=&quot;${pageContext.request.contextPath}/&quot; class=&quot;navbar-brand&quot;&gt;&#10;                &lt;i class=&quot;fas fa-store&quot;&gt;&lt;/i&gt;&#10;                GoMsu Store&#10;            &lt;/a&gt;&#10;&#10;            &lt;ul class=&quot;navbar-nav&quot; id=&quot;navbarNav&quot;&gt;&#10;                &lt;li class=&quot;nav-item&quot;&gt;&#10;                    &lt;a href=&quot;${pageContext.request.contextPath}/&quot; class=&quot;nav-link&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-home&quot;&gt;&lt;/i&gt; Trang Chủ&#10;                    &lt;/a&gt;&#10;                &lt;/li&gt;&#10;                &lt;li class=&quot;nav-item&quot;&gt;&#10;                    &lt;a href=&quot;${pageContext.request.contextPath}/shop&quot; class=&quot;nav-link&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-shopping-bag&quot;&gt;&lt;/i&gt; Cửa Hàng&#10;                    &lt;/a&gt;&#10;                &lt;/li&gt;&#10;                &lt;li class=&quot;nav-item&quot;&gt;&#10;                    &lt;a href=&quot;${pageContext.request.contextPath}/cart&quot; class=&quot;nav-link active&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-shopping-cart&quot;&gt;&lt;/i&gt; Giỏ Hàng&#10;                    &lt;/a&gt;&#10;                &lt;/li&gt;&#10;            &lt;/ul&gt;&#10;&#10;            &lt;div class=&quot;user-menu&quot;&gt;&#10;                &lt;c:choose&gt;&#10;                    &lt;c:when test=&quot;${sessionScope.user != null}&quot;&gt;&#10;                        &lt;div class=&quot;dropdown&quot;&gt;&#10;                            &lt;a href=&quot;#&quot; class=&quot;nav-link&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-user&quot;&gt;&lt;/i&gt; ${sessionScope.user.username}&#10;                            &lt;/a&gt;&#10;                            &lt;div class=&quot;dropdown-menu&quot;&gt;&#10;                                &lt;a href=&quot;${pageContext.request.contextPath}/profile&quot; class=&quot;dropdown-item&quot;&gt;Hồ Sơ&lt;/a&gt;&#10;                                &lt;a href=&quot;${pageContext.request.contextPath}/orders&quot; class=&quot;dropdown-item&quot;&gt;Đơn Hàng&lt;/a&gt;&#10;                                &lt;a href=&quot;${pageContext.request.contextPath}/logout&quot; class=&quot;dropdown-item&quot;&gt;Đăng Xuất&lt;/a&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/c:when&gt;&#10;                    &lt;c:otherwise&gt;&#10;                        &lt;a href=&quot;${pageContext.request.contextPath}/login&quot; class=&quot;btn btn-primary&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-sign-in-alt&quot;&gt;&lt;/i&gt; Đăng Nhập&#10;                        &lt;/a&gt;&#10;                    &lt;/c:otherwise&gt;&#10;                &lt;/c:choose&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;&#10;    &lt;!-- Main Content --&gt;&#10;    &lt;div class=&quot;main-content&quot;&gt;&#10;        &lt;div class=&quot;container&quot;&gt;&#10;            &lt;div class=&quot;cart-header&quot;&gt;&#10;                &lt;h1 class=&quot;cart-title&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-shopping-cart&quot;&gt;&lt;/i&gt;&#10;                    Giỏ Hàng Của Bạn&#10;                &lt;/h1&gt;&#10;                &lt;p class=&quot;cart-subtitle&quot;&gt;&#10;                    &lt;c:choose&gt;&#10;                        &lt;c:when test=&quot;${fn:length(cartItems) &gt; 0}&quot;&gt;&#10;                            Bạn có ${fn:length(cartItems)} sản phẩm trong giỏ hàng&#10;                        &lt;/c:when&gt;&#10;                        &lt;c:otherwise&gt;&#10;                            Giỏ hàng của bạn đang trống&#10;                        &lt;/c:otherwise&gt;&#10;                    &lt;/c:choose&gt;&#10;                &lt;/p&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;c:choose&gt;&#10;                &lt;c:when test=&quot;${fn:length(cartItems) &gt; 0}&quot;&gt;&#10;                    &lt;div class=&quot;cart-content&quot;&gt;&#10;                        &lt;div class=&quot;cart-items&quot;&gt;&#10;                            &lt;c:forEach var=&quot;item&quot; items=&quot;${cartItems}&quot;&gt;&#10;                                &lt;div class=&quot;cart-item&quot; data-id=&quot;${item.id}&quot;&gt;&#10;                                    &lt;div class=&quot;item-image&quot;&gt;&#10;                                        &lt;img src=&quot;${not empty item.product.imageUrl ? item.product.imageUrl : '/images/no-image.jpg'}&quot;&#10;                                             alt=&quot;${item.product.name}&quot; loading=&quot;lazy&quot;&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;div class=&quot;item-details&quot;&gt;&#10;                                        &lt;h3 class=&quot;item-name&quot;&gt;${item.product.name}&lt;/h3&gt;&#10;                                        &lt;p class=&quot;item-category&quot;&gt;${item.product.categoryName}&lt;/p&gt;&#10;                                        &lt;div class=&quot;item-price&quot;&gt;&#10;                                            &lt;c:choose&gt;&#10;                                                &lt;c:when test=&quot;${item.product.discount != null &amp;&amp; item.product.discount &gt; 0}&quot;&gt;&#10;                                                    &lt;span class=&quot;current-price&quot;&gt;&#10;                                                        &lt;fmt:formatNumber value=&quot;${item.product.price * (1 - item.product.discount/100)}&quot; type=&quot;currency&quot; currencyCode=&quot;VND&quot;/&gt;&#10;                                                    &lt;/span&gt;&#10;                                                    &lt;span class=&quot;original-price&quot;&gt;&#10;                                                        &lt;fmt:formatNumber value=&quot;${item.product.price}&quot; type=&quot;currency&quot; currencyCode=&quot;VND&quot;/&gt;&#10;                                                    &lt;/span&gt;&#10;                                                &lt;/c:when&gt;&#10;                                                &lt;c:otherwise&gt;&#10;                                                    &lt;span class=&quot;current-price&quot;&gt;&#10;                                                        &lt;fmt:formatNumber value=&quot;${item.product.price}&quot; type=&quot;currency&quot; currencyCode=&quot;VND&quot;/&gt;&#10;                                                    &lt;/span&gt;&#10;                                                &lt;/c:otherwise&gt;&#10;                                            &lt;/c:choose&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;div class=&quot;item-actions&quot;&gt;&#10;                                        &lt;div class=&quot;quantity-controls&quot;&gt;&#10;                                            &lt;button class=&quot;qty-btn&quot; onclick=&quot;updateQuantity(${item.id}, ${item.quantity - 1})&quot;&#10;                                                    ${item.quantity &lt;= 1 ? 'disabled' : ''} type=&quot;button&quot;&gt;&#10;                                                &lt;i class=&quot;fas fa-minus&quot;&gt;&lt;/i&gt;&#10;                                            &lt;/button&gt;&#10;                                            &lt;input type=&quot;number&quot; class=&quot;qty-input&quot; value=&quot;${item.quantity}&quot;&#10;                                                   min=&quot;1&quot; max=&quot;99&quot; onchange=&quot;updateQuantity(${item.id}, this.value)&quot;&gt;&#10;                                            &lt;button class=&quot;qty-btn&quot; onclick=&quot;updateQuantity(${item.id}, ${item.quantity + 1})&quot; type=&quot;button&quot;&gt;&#10;                                                &lt;i class=&quot;fas fa-plus&quot;&gt;&lt;/i&gt;&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;&#10;                                        &lt;div class=&quot;item-total&quot;&gt;&#10;                                            &lt;c:set var=&quot;itemPrice&quot; value=&quot;${item.product.discount != null &amp;&amp; item.product.discount &gt; 0 ?&#10;                                                item.product.price * (1 - item.product.discount/100) : item.product.price}&quot; /&gt;&#10;                                            &lt;fmt:formatNumber value=&quot;${itemPrice * item.quantity}&quot; type=&quot;currency&quot; currencyCode=&quot;VND&quot;/&gt;&#10;                                        &lt;/div&gt;&#10;&#10;                                        &lt;button class=&quot;remove-btn&quot; onclick=&quot;removeItem(${item.id})&quot;&#10;                                                title=&quot;Xóa sản phẩm&quot; type=&quot;button&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-trash&quot;&gt;&lt;/i&gt;&#10;                                        &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/c:forEach&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;cart-summary&quot;&gt;&#10;                            &lt;div class=&quot;summary-card&quot;&gt;&#10;                                &lt;h3 class=&quot;summary-title&quot;&gt;Tóm Tắt Đơn Hàng&lt;/h3&gt;&#10;&#10;                                &lt;div class=&quot;summary-row&quot;&gt;&#10;                                    &lt;span&gt;Tạm tính (${fn:length(cartItems)} sản phẩm):&lt;/span&gt;&#10;                                    &lt;span id=&quot;subtotal&quot;&gt;&#10;                                        &lt;fmt:formatNumber value=&quot;${cartTotal}&quot; type=&quot;currency&quot; currencyCode=&quot;VND&quot;/&gt;&#10;                                    &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div class=&quot;summary-row&quot;&gt;&#10;                                    &lt;span&gt;Phí vận chuyển:&lt;/span&gt;&#10;                                    &lt;span class=&quot;shipping-fee&quot;&gt;Miễn phí&lt;/span&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div class=&quot;summary-row discount-row&quot; style=&quot;display: none;&quot;&gt;&#10;                                    &lt;span&gt;Giảm giá:&lt;/span&gt;&#10;                                    &lt;span class=&quot;discount-amount&quot;&gt;-0₫&lt;/span&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;hr&gt;&#10;&#10;                                &lt;div class=&quot;summary-row total-row&quot;&gt;&#10;                                    &lt;span&gt;Tổng cộng:&lt;/span&gt;&#10;                                    &lt;span class=&quot;total-amount&quot; id=&quot;totalAmount&quot;&gt;&#10;                                        &lt;fmt:formatNumber value=&quot;${cartTotal}&quot; type=&quot;currency&quot; currencyCode=&quot;VND&quot;/&gt;&#10;                                    &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div class=&quot;coupon-section&quot;&gt;&#10;                                    &lt;input type=&quot;text&quot; class=&quot;coupon-input&quot; placeholder=&quot;Nhập mã giảm giá&quot; id=&quot;couponInput&quot;&gt;&#10;                                    &lt;button class=&quot;coupon-btn&quot; onclick=&quot;applyCoupon()&quot;&gt;Áp dụng&lt;/button&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div class=&quot;checkout-actions&quot;&gt;&#10;                                    &lt;button class=&quot;btn-checkout&quot; onclick=&quot;proceedToCheckout()&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-credit-card&quot;&gt;&lt;/i&gt;&#10;                                        Tiến Hành Thanh Toán&#10;                                    &lt;/button&gt;&#10;                                    &lt;a href=&quot;${pageContext.request.contextPath}/shop&quot; class=&quot;btn-continue&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-arrow-left&quot;&gt;&lt;/i&gt;&#10;                                        Tiếp Tục Mua Sắm&#10;                                    &lt;/a&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/c:when&gt;&#10;                &lt;c:otherwise&gt;&#10;                    &lt;div class=&quot;empty-cart&quot;&gt;&#10;                        &lt;div class=&quot;empty-cart-icon&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-shopping-cart&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h2 class=&quot;empty-cart-title&quot;&gt;Giỏ hàng của bạn đang trống&lt;/h2&gt;&#10;                        &lt;p class=&quot;empty-cart-message&quot;&gt;Hãy khám phá các sản phẩm tuyệt vời của chúng tôi!&lt;/p&gt;&#10;                        &lt;a href=&quot;${pageContext.request.contextPath}/shop&quot; class=&quot;btn btn-primary&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-shopping-bag&quot;&gt;&lt;/i&gt;&#10;                            Bắt Đầu Mua Sắm&#10;                        &lt;/a&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/c:otherwise&gt;&#10;            &lt;/c:choose&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script&gt;&#10;        // Fixed navbar on scroll&#10;        window.addEventListener('scroll', function() {&#10;            const navbar = document.getElementById('navbar');&#10;            if (window.scrollY &gt; 50) {&#10;                navbar.classList.add('scrolled');&#10;            } else {&#10;                navbar.classList.remove('scrolled');&#10;            }&#10;        });&#10;&#10;        // Update quantity function&#10;        function updateQuantity(itemId, newQuantity) {&#10;            if (newQuantity &lt; 1) {&#10;                removeItem(itemId);&#10;                return;&#10;            }&#10;&#10;            if (newQuantity &gt; 99) {&#10;                showNotification('Số lượng không được vượt quá 99', 'error');&#10;                return;&#10;            }&#10;&#10;            fetch('${pageContext.request.contextPath}/cart/update', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/x-www-form-urlencoded',&#10;                },&#10;                body: 'itemId=' + itemId + '&amp;quantity=' + newQuantity&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.success) {&#10;                    location.reload();&#10;                } else {&#10;                    showNotification(data.message || 'Có lỗi xảy ra!', 'error');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Error:', error);&#10;                showNotification('Có lỗi xảy ra khi cập nhật!', 'error');&#10;            });&#10;        }&#10;&#10;        // Remove item function&#10;        function removeItem(itemId) {&#10;            if (!confirm('Bạn có chắc muốn xóa sản phẩm này khỏi giỏ hàng?')) {&#10;                return;&#10;            }&#10;&#10;            fetch('${pageContext.request.contextPath}/cart/remove', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/x-www-form-urlencoded',&#10;                },&#10;                body: 'itemId=' + itemId&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.success) {&#10;                    location.reload();&#10;                } else {&#10;                    showNotification(data.message || 'Có lỗi xảy ra!', 'error');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Error:', error);&#10;                showNotification('Có lỗi xảy ra khi xóa sản phẩm!', 'error');&#10;            });&#10;        }&#10;&#10;        // Apply coupon function&#10;        function applyCoupon() {&#10;            const couponCode = document.getElementById('couponInput').value.trim();&#10;            if (!couponCode) {&#10;                showNotification('Vui lòng nhập mã giảm giá!', 'error');&#10;                return;&#10;            }&#10;&#10;            // Simulate coupon application&#10;            showNotification('Tính năng mã giảm giá đang được phát triển!', 'info');&#10;        }&#10;&#10;        // Proceed to checkout function&#10;        function proceedToCheckout() {&#10;            &lt;c:choose&gt;&#10;                &lt;c:when test=&quot;${sessionScope.user != null}&quot;&gt;&#10;                    window.location.href = '${pageContext.request.contextPath}/checkout';&#10;                &lt;/c:when&gt;&#10;                &lt;c:otherwise&gt;&#10;                    if (confirm('Bạn cần đăng nhập để thanh toán. Chuyển đến trang đăng nhập?')) {&#10;                        window.location.href = '${pageContext.request.contextPath}/login?redirect=checkout';&#10;                    }&#10;                &lt;/c:otherwise&gt;&#10;            &lt;/c:choose&gt;&#10;        }&#10;&#10;        // Notification function&#10;        function showNotification(message, type) {&#10;            const notification = document.createElement('div');&#10;            notification.className = 'notification notification-' + type;&#10;            notification.innerHTML = '&lt;i class=&quot;fas fa-info-circle&quot;&gt;&lt;/i&gt;' + message;&#10;&#10;            document.body.appendChild(notification);&#10;&#10;            setTimeout(() =&gt; {&#10;                notification.classList.add('show');&#10;            }, 100);&#10;&#10;            setTimeout(() =&gt; {&#10;                notification.classList.remove('show');&#10;                setTimeout(() =&gt; notification.remove(), 300);&#10;            }, 3000);&#10;        }&#10;&#10;        // Add ripple effect to buttons&#10;        document.querySelectorAll('.btn-checkout, .btn-continue').forEach(btn =&gt; {&#10;            btn.addEventListener('click', function(e) {&#10;                const ripple = document.createElement('span');&#10;                const rect = this.getBoundingClientRect();&#10;                const size = Math.max(rect.width, rect.height);&#10;                const x = e.clientX - rect.left - size / 2;&#10;                const y = e.clientY - rect.top - size / 2;&#10;&#10;                ripple.style.width = ripple.style.height = size + 'px';&#10;                ripple.style.left = x + 'px';&#10;                ripple.style.top = y + 'px';&#10;                ripple.classList.add('ripple');&#10;&#10;                this.appendChild(ripple);&#10;&#10;                setTimeout(() =&gt; {&#10;                    ripple.remove();&#10;                }, 400);&#10;            });&#10;        });&#10;    &lt;/script&gt;&#10;&#10;    &lt;style&gt;&#10;        .notification {&#10;            position: fixed;&#10;            top: 100px;&#10;            right: 20px;&#10;            background: var(--success);&#10;            color: white;&#10;            padding: 1rem 1.5rem;&#10;            border-radius: var(--radius-lg);&#10;            box-shadow: var(--shadow-lg);&#10;            transform: translateX(400px);&#10;            transition: transform 0.3s ease;&#10;            z-index: 1001;&#10;        }&#10;&#10;        .notification.show {&#10;            transform: translateX(0);&#10;        }&#10;&#10;        .notification.error {&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&#10;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;&#10;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; prefix=&quot;fmt&quot; %&gt;&#10;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/functions&quot; prefix=&quot;fn&quot; %&gt;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;vi&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Giỏ Hàng - GoMsu Store&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;${pageContext.request.contextPath}/css/style.css&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot;&gt;&#10;    &lt;style&gt;&#10;        :root {&#10;            --primary: #667eea;&#10;            --primary-dark: #5a67d8;&#10;            --secondary: #f093fb;&#10;            --accent: #4ecdc4;&#10;            --success: #48bb78;&#10;            --warning: #ed8936;&#10;            --danger: #f56565;&#10;            --dark: #1a202c;&#10;            --light: #2d3748;&#10;            --glass-bg: rgba(255, 255, 255, 0.1);&#10;            --glass-border: rgba(255, 255, 255, 0.2);&#10;            --text-primary: #ffffff;&#10;            --text-secondary: #e2e8f0;&#10;            --text-muted: #a0aec0;&#10;            --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.3);&#10;            --shadow-md: 0 4px 16px rgba(0, 0, 0, 0.4);&#10;            --shadow-lg: 0 8px 32px rgba(0, 0, 0, 0.5);&#10;            --radius: 8px;&#10;            --radius-md: 12px;&#10;            --radius-lg: 16px;&#10;            --radius-xl: 20px;&#10;        }&#10;&#10;        body {&#10;            font-family: 'Inter', sans-serif;&#10;            background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);&#10;            background-attachment: fixed;&#10;            min-height: 100vh;&#10;            margin: 0;&#10;            padding: 0;&#10;            color: var(--text-primary);&#10;            overflow-x: hidden;&#10;        }&#10;&#10;        .navbar {&#10;            background: rgba(26, 32, 44, 0.95);&#10;            backdrop-filter: blur(10px);&#10;            border-bottom: 1px solid var(--glass-border);&#10;            padding: 1rem 0;&#10;            position: fixed;&#10;            top: 0;&#10;            left: 0;&#10;            right: 0;&#10;            z-index: 1000;&#10;            transition: all 0.3s ease;&#10;        }&#10;&#10;        .navbar-container {&#10;            max-width: 1200px;&#10;            margin: 0 auto;&#10;            padding: 0 2rem;&#10;            display: flex;&#10;            justify-content: space-between;&#10;            align-items: center;&#10;        }&#10;&#10;        .navbar-brand {&#10;            font-size: 1.5rem;&#10;            font-weight: 700;&#10;            color: var(--primary);&#10;            text-decoration: none;&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .navbar-nav {&#10;            display: flex;&#10;            list-style: none;&#10;            margin: 0;&#10;            padding: 0;&#10;            gap: 2rem;&#10;        }&#10;&#10;        .nav-link {&#10;            color: var(--text-secondary);&#10;            text-decoration: none;&#10;            font-weight: 500;&#10;            padding: 0.5rem 1rem;&#10;            border-radius: var(--radius);&#10;            transition: all 0.3s ease;&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .nav-link:hover,&#10;        .nav-link.active {&#10;            background: var(--primary);&#10;            color: white;&#10;            transform: translateY(-2px);&#10;        }&#10;&#10;        .user-menu {&#10;            position: relative;&#10;        }&#10;&#10;        .dropdown {&#10;            position: relative;&#10;        }&#10;&#10;        .dropdown-menu {&#10;            position: absolute;&#10;            top: 100%;&#10;            right: 0;&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(15px);&#10;            border: 1px solid var(--glass-border);&#10;            border-radius: var(--radius-md);&#10;            box-shadow: var(--shadow-lg);&#10;            padding: 0.5rem;&#10;            min-width: 200px;&#10;            opacity: 0;&#10;            visibility: hidden;&#10;            transform: translateY(-10px);&#10;            transition: all 0.3s ease;&#10;        }&#10;&#10;        .dropdown:hover .dropdown-menu {&#10;            opacity: 1;&#10;            visibility: visible;&#10;            transform: translateY(0);&#10;        }&#10;&#10;        .dropdown-item {&#10;            display: block;&#10;            padding: 0.75rem 1rem;&#10;            color: var(--text-primary);&#10;            text-decoration: none;&#10;            border-radius: var(--radius);&#10;            transition: background 0.2s ease;&#10;        }&#10;&#10;        .dropdown-item:hover {&#10;            background: rgba(255, 255, 255, 0.1);&#10;        }&#10;&#10;        .main-content {&#10;            margin-top: 100px;&#10;            padding: 2rem;&#10;            min-height: calc(100vh - 100px);&#10;        }&#10;&#10;        .container {&#10;            max-width: 1200px;&#10;            margin: 0 auto;&#10;        }&#10;&#10;        .cart-header {&#10;            text-align: center;&#10;            margin-bottom: 3rem;&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(20px);&#10;            padding: 2rem;&#10;            border-radius: var(--radius-xl);&#10;            border: 1px solid var(--glass-border);&#10;        }&#10;&#10;        .cart-title {&#10;            font-size: 2.5rem;&#10;            font-weight: 700;&#10;            margin-bottom: 1rem;&#10;            background: linear-gradient(135deg, var(--primary), var(--secondary));&#10;            -webkit-background-clip: text;&#10;            -webkit-text-fill-color: transparent;&#10;            background-clip: text;&#10;        }&#10;&#10;        .cart-subtitle {&#10;            color: var(--text-secondary);&#10;            font-size: 1.1rem;&#10;        }&#10;&#10;        .cart-content {&#10;            display: grid;&#10;            grid-template-columns: 1fr 350px;&#10;            gap: 2rem;&#10;        }&#10;&#10;        .cart-items {&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(20px);&#10;            border-radius: var(--radius-xl);&#10;            border: 1px solid var(--glass-border);&#10;            overflow: hidden;&#10;        }&#10;&#10;        .cart-item {&#10;            display: grid;&#10;            grid-template-columns: 120px 1fr auto;&#10;            gap: 1.5rem;&#10;            padding: 2rem;&#10;            border-bottom: 1px solid var(--glass-border);&#10;            align-items: center;&#10;            transition: all 0.3s ease;&#10;        }&#10;&#10;        .cart-item:hover {&#10;            background: rgba(102, 126, 234, 0.1);&#10;            transform: translateX(5px);&#10;        }&#10;&#10;        .cart-item:last-child {&#10;            border-bottom: none;&#10;        }&#10;&#10;        .item-image {&#10;            width: 120px;&#10;            height: 120px;&#10;            border-radius: var(--radius-lg);&#10;            overflow: hidden;&#10;            box-shadow: var(--shadow-md);&#10;            position: relative;&#10;        }&#10;&#10;        .item-image img {&#10;            width: 100%;&#10;            height: 100%;&#10;            object-fit: cover;&#10;            transition: transform 0.3s ease;&#10;        }&#10;&#10;        .cart-item:hover .item-image img {&#10;            transform: scale(1.05);&#10;        }&#10;&#10;        .item-details {&#10;            display: flex;&#10;            flex-direction: column;&#10;            gap: 0.75rem;&#10;        }&#10;&#10;        .item-name {&#10;            font-weight: 700;&#10;            font-size: 1.25rem;&#10;            color: var(--text-primary);&#10;            margin-bottom: 0.5rem;&#10;            line-height: 1.3;&#10;        }&#10;&#10;        .item-category {&#10;            color: var(--text-muted);&#10;            font-size: 0.9rem;&#10;            text-transform: uppercase;&#10;            letter-spacing: 0.5px;&#10;            font-weight: 500;&#10;        }&#10;&#10;        .item-price {&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.75rem;&#10;            flex-wrap: wrap;&#10;        }&#10;&#10;        .current-price {&#10;            font-size: 1.25rem;&#10;            font-weight: 700;&#10;            color: var(--primary);&#10;        }&#10;&#10;        .original-price {&#10;            font-size: 1rem;&#10;            color: var(--text-muted);&#10;            text-decoration: line-through;&#10;        }&#10;&#10;        .discount-badge {&#10;            background: var(--danger);&#10;            color: white;&#10;            padding: 0.25rem 0.5rem;&#10;            border-radius: 12px;&#10;            font-size: 0.75rem;&#10;            font-weight: 600;&#10;        }&#10;&#10;        .item-actions {&#10;            display: flex;&#10;            flex-direction: column;&#10;            align-items: center;&#10;            gap: 1rem;&#10;        }&#10;&#10;        .quantity-controls {&#10;            display: flex;&#10;            align-items: center;&#10;            background: var(--glass-bg);&#10;            border: 1px solid var(--glass-border);&#10;            border-radius: var(--radius-lg);&#10;            overflow: hidden;&#10;            box-shadow: var(--shadow-sm);&#10;        }&#10;&#10;        .qty-btn {&#10;            width: 40px;&#10;            height: 40px;&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            background: transparent;&#10;            border: none;&#10;            cursor: pointer;&#10;            font-size: 1rem;&#10;            font-weight: bold;&#10;            color: var(--primary);&#10;            transition: all 0.2s ease;&#10;        }&#10;&#10;        .qty-btn:hover:not(:disabled) {&#10;            background: var(--primary);&#10;            color: white;&#10;        }&#10;&#10;        .qty-btn:disabled {&#10;            opacity: 0.5;&#10;            cursor: not-allowed;&#10;        }&#10;&#10;        .qty-input {&#10;            width: 60px;&#10;            height: 40px;&#10;            text-align: center;&#10;            border: none;&#10;            background: transparent;&#10;            font-size: 1rem;&#10;            font-weight: 600;&#10;            color: var(--text-primary);&#10;        }&#10;&#10;        .item-total {&#10;            text-align: center;&#10;        }&#10;&#10;        .total-value {&#10;            font-weight: 700;&#10;            font-size: 1.1rem;&#10;            color: var(--text-primary);&#10;        }&#10;&#10;        .remove-btn {&#10;            background: var(--danger);&#10;            color: white;&#10;            border: none;&#10;            width: 40px;&#10;            height: 40px;&#10;            border-radius: 50%;&#10;            cursor: pointer;&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            transition: all 0.3s ease;&#10;            margin-top: 0.5rem;&#10;        }&#10;&#10;        .remove-btn:hover {&#10;            background: #e53e3e;&#10;            transform: scale(1.1);&#10;        }&#10;&#10;        .cart-summary {&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(20px);&#10;            border-radius: var(--radius-xl);&#10;            border: 1px solid var(--glass-border);&#10;            padding: 2rem;&#10;            height: fit-content;&#10;            position: sticky;&#10;            top: 120px;&#10;        }&#10;&#10;        .summary-title {&#10;            font-size: 1.5rem;&#10;            font-weight: 700;&#10;            margin-bottom: 1.5rem;&#10;            color: var(--text-primary);&#10;            text-align: center;&#10;            padding-bottom: 1rem;&#10;            border-bottom: 2px solid var(--primary);&#10;        }&#10;&#10;        .summary-row {&#10;            display: flex;&#10;            justify-content: space-between;&#10;            align-items: center;&#10;            padding: 0.75rem 0;&#10;            border-bottom: 1px dashed var(--glass-border);&#10;        }&#10;&#10;        .summary-row:last-of-type {&#10;            border-bottom: none;&#10;            margin-top: 1rem;&#10;            padding-top: 1rem;&#10;            border-top: 2px solid var(--glass-border);&#10;        }&#10;&#10;        .summary-label {&#10;            color: var(--text-secondary);&#10;            font-weight: 500;&#10;        }&#10;&#10;        .summary-value {&#10;            font-weight: 600;&#10;            color: var(--text-primary);&#10;        }&#10;&#10;        .checkout-btn {&#10;            width: 100%;&#10;            background: linear-gradient(135deg, var(--primary), var(--primary-dark));&#10;            color: white;&#10;            border: none;&#10;            padding: 1rem 2rem;&#10;            border-radius: var(--radius-lg);&#10;            font-size: 1.1rem;&#10;            font-weight: 600;&#10;            cursor: pointer;&#10;            margin-top: 1.5rem;&#10;            transition: all 0.3s ease;&#10;            text-decoration: none;&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .checkout-btn:hover {&#10;            transform: translateY(-2px);&#10;            box-shadow: var(--shadow-lg);&#10;        }&#10;&#10;        .empty-cart {&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(20px);&#10;            border-radius: var(--radius-xl);&#10;            border: 1px solid var(--glass-border);&#10;            padding: 4rem 2rem;&#10;            text-align: center;&#10;        }&#10;&#10;        .empty-cart-icon {&#10;            font-size: 4rem;&#10;            color: var(--text-muted);&#10;            margin-bottom: 1.5rem;&#10;            opacity: 0.7;&#10;        }&#10;&#10;        .empty-cart-title {&#10;            font-size: 1.75rem;&#10;            font-weight: 700;&#10;            margin-bottom: 1rem;&#10;            color: var(--text-primary);&#10;        }&#10;&#10;        .empty-cart-message {&#10;            color: var(--text-secondary);&#10;            margin-bottom: 2rem;&#10;            font-size: 1.1rem;&#10;        }&#10;&#10;        .btn {&#10;            display: inline-flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;            padding: 0.75rem 1.5rem;&#10;            border-radius: var(--radius-lg);&#10;            text-decoration: none;&#10;            font-weight: 600;&#10;            transition: all 0.3s ease;&#10;            border: none;&#10;            cursor: pointer;&#10;        }&#10;&#10;        .btn-primary {&#10;            background: linear-gradient(135deg, var(--primary), var(--primary-dark));&#10;            color: white;&#10;        }&#10;&#10;        .btn-primary:hover {&#10;            transform: translateY(-2px);&#10;            box-shadow: var(--shadow-md);&#10;        }&#10;&#10;        /* Coupon section styles */&#10;        .coupon-section {&#10;            margin: 1.5rem 0;&#10;            display: flex;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .coupon-input {&#10;            flex: 1;&#10;            padding: 0.75rem;&#10;            background: var(--glass-bg);&#10;            border: 1px solid var(--glass-border);&#10;            border-radius: var(--radius);&#10;            color: var(--text-primary);&#10;            font-size: 0.9rem;&#10;        }&#10;&#10;        .coupon-input::placeholder {&#10;            color: var(--text-muted);&#10;        }&#10;&#10;        .coupon-btn {&#10;            padding: 0.75rem 1rem;&#10;            background: var(--accent);&#10;            color: white;&#10;            border: none;&#10;            border-radius: var(--radius);&#10;            font-weight: 600;&#10;            cursor: pointer;&#10;            transition: all 0.3s ease;&#10;        }&#10;&#10;        .coupon-btn:hover {&#10;            background: #45b7aa;&#10;            transform: translateY(-1px);&#10;        }&#10;&#10;        /* Checkout actions */&#10;        .checkout-actions {&#10;            display: flex;&#10;            flex-direction: column;&#10;            gap: 1rem;&#10;        }&#10;&#10;        .btn-checkout {&#10;            width: 100%;&#10;            background: linear-gradient(135deg, var(--primary), var(--primary-dark));&#10;            color: white;&#10;            border: none;&#10;            padding: 1rem 2rem;&#10;            border-radius: var(--radius-lg);&#10;            font-size: 1.1rem;&#10;            font-weight: 600;&#10;            cursor: pointer;&#10;            transition: all 0.3s ease;&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .btn-checkout:hover {&#10;            transform: translateY(-2px);&#10;            box-shadow: var(--shadow-lg);&#10;        }&#10;&#10;        .btn-continue {&#10;            width: 100%;&#10;            background: transparent;&#10;            color: var(--text-secondary);&#10;            border: 1px solid var(--glass-border);&#10;            padding: 0.75rem 1.5rem;&#10;            border-radius: var(--radius-lg);&#10;            font-weight: 500;&#10;            cursor: pointer;&#10;            transition: all 0.3s ease;&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            gap: 0.5rem;&#10;            text-decoration: none;&#10;        }&#10;&#10;        .btn-continue:hover {&#10;            background: var(--glass-bg);&#10;            color: var(--text-primary);&#10;            transform: translateY(-1px);&#10;        }&#10;&#10;        /* Responsive */&#10;        @media (max-width: 768px) {&#10;            .navbar-container {&#10;                padding: 0 1rem;&#10;            }&#10;&#10;            .navbar-nav {&#10;                gap: 1rem;&#10;            }&#10;&#10;            .main-content {&#10;                padding: 1rem;&#10;                margin-top: 80px;&#10;            }&#10;&#10;            .cart-content {&#10;                grid-template-columns: 1fr;&#10;                gap: 1rem;&#10;            }&#10;&#10;            .cart-item {&#10;                grid-template-columns: 80px 1fr;&#10;                gap: 1rem;&#10;                padding: 1.5rem;&#10;            }&#10;&#10;            .item-image {&#10;                width: 80px;&#10;                height: 80px;&#10;            }&#10;&#10;            .item-actions {&#10;                grid-column: 1 / -1;&#10;                flex-direction: row;&#10;                justify-content: space-between;&#10;                margin-top: 1rem;&#10;            }&#10;&#10;            .cart-title {&#10;                font-size: 2rem;&#10;            }&#10;        }&#10;&#10;        /* Notification */&#10;        .notification {&#10;            position: fixed;&#10;            top: 100px;&#10;            right: 20px;&#10;            background: var(--success);&#10;            color: white;&#10;            padding: 1rem 1.5rem;&#10;            border-radius: var(--radius-lg);&#10;            box-shadow: var(--shadow-lg);&#10;            transform: translateX(400px);&#10;            transition: transform 0.3s ease;&#10;            z-index: 1001;&#10;        }&#10;&#10;        .notification.show {&#10;            transform: translateX(0);&#10;        }&#10;&#10;        .notification.error {&#10;            background: var(--danger);&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;!-- Fixed Navbar --&gt;&#10;    &lt;nav class=&quot;navbar&quot; id=&quot;navbar&quot;&gt;&#10;        &lt;div class=&quot;navbar-container&quot;&gt;&#10;            &lt;a href=&quot;${pageContext.request.contextPath}/&quot; class=&quot;navbar-brand&quot;&gt;&#10;                &lt;i class=&quot;fas fa-store&quot;&gt;&lt;/i&gt;&#10;                GoMsu Store&#10;            &lt;/a&gt;&#10;&#10;            &lt;ul class=&quot;navbar-nav&quot; id=&quot;navbarNav&quot;&gt;&#10;                &lt;li class=&quot;nav-item&quot;&gt;&#10;                    &lt;a href=&quot;${pageContext.request.contextPath}/&quot; class=&quot;nav-link&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-home&quot;&gt;&lt;/i&gt; Trang Chủ&#10;                    &lt;/a&gt;&#10;                &lt;/li&gt;&#10;                &lt;li class=&quot;nav-item&quot;&gt;&#10;                    &lt;a href=&quot;${pageContext.request.contextPath}/shop&quot; class=&quot;nav-link&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-shopping-bag&quot;&gt;&lt;/i&gt; Cửa Hàng&#10;                    &lt;/a&gt;&#10;                &lt;/li&gt;&#10;                &lt;li class=&quot;nav-item&quot;&gt;&#10;                    &lt;a href=&quot;${pageContext.request.contextPath}/cart&quot; class=&quot;nav-link active&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-shopping-cart&quot;&gt;&lt;/i&gt; Giỏ Hàng&#10;                    &lt;/a&gt;&#10;                &lt;/li&gt;&#10;            &lt;/ul&gt;&#10;&#10;            &lt;div class=&quot;user-menu&quot;&gt;&#10;                &lt;c:choose&gt;&#10;                    &lt;c:when test=&quot;${sessionScope.user != null}&quot;&gt;&#10;                        &lt;div class=&quot;dropdown&quot;&gt;&#10;                            &lt;a href=&quot;#&quot; class=&quot;nav-link&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-user&quot;&gt;&lt;/i&gt; ${sessionScope.user.username}&#10;                            &lt;/a&gt;&#10;                            &lt;div class=&quot;dropdown-menu&quot;&gt;&#10;                                &lt;a href=&quot;${pageContext.request.contextPath}/profile&quot; class=&quot;dropdown-item&quot;&gt;Hồ Sơ&lt;/a&gt;&#10;                                &lt;a href=&quot;${pageContext.request.contextPath}/orders&quot; class=&quot;dropdown-item&quot;&gt;Đơn Hàng&lt;/a&gt;&#10;                                &lt;a href=&quot;${pageContext.request.contextPath}/logout&quot; class=&quot;dropdown-item&quot;&gt;Đăng Xuất&lt;/a&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/c:when&gt;&#10;                    &lt;c:otherwise&gt;&#10;                        &lt;a href=&quot;${pageContext.request.contextPath}/login&quot; class=&quot;btn btn-primary&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-sign-in-alt&quot;&gt;&lt;/i&gt; Đăng Nhập&#10;                        &lt;/a&gt;&#10;                    &lt;/c:otherwise&gt;&#10;                &lt;/c:choose&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;&#10;    &lt;!-- Main Content --&gt;&#10;    &lt;div class=&quot;main-content&quot;&gt;&#10;        &lt;div class=&quot;container&quot;&gt;&#10;            &lt;div class=&quot;cart-header&quot;&gt;&#10;                &lt;h1 class=&quot;cart-title&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-shopping-cart&quot;&gt;&lt;/i&gt;&#10;                    Giỏ Hàng Của Bạn&#10;                &lt;/h1&gt;&#10;                &lt;p class=&quot;cart-subtitle&quot;&gt;&#10;                    &lt;c:choose&gt;&#10;                        &lt;c:when test=&quot;${fn:length(cartItems) &gt; 0}&quot;&gt;&#10;                            Bạn có ${fn:length(cartItems)} sản phẩm trong giỏ hàng&#10;                        &lt;/c:when&gt;&#10;                        &lt;c:otherwise&gt;&#10;                            Giỏ hàng của bạn đang trống&#10;                        &lt;/c:otherwise&gt;&#10;                    &lt;/c:choose&gt;&#10;                &lt;/p&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;c:choose&gt;&#10;                &lt;c:when test=&quot;${fn:length(cartItems) &gt; 0}&quot;&gt;&#10;                    &lt;div class=&quot;cart-content&quot;&gt;&#10;                        &lt;div class=&quot;cart-items&quot;&gt;&#10;                            &lt;c:forEach var=&quot;item&quot; items=&quot;${cartItems}&quot;&gt;&#10;                                &lt;div class=&quot;cart-item&quot; data-id=&quot;${item.id}&quot;&gt;&#10;                                    &lt;div class=&quot;item-image&quot;&gt;&#10;                                        &lt;img src=&quot;${not empty item.product.imageUrl ? item.product.imageUrl : '/images/no-image.jpg'}&quot;&#10;                                             alt=&quot;${item.product.name}&quot; loading=&quot;lazy&quot;&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;div class=&quot;item-details&quot;&gt;&#10;                                        &lt;h3 class=&quot;item-name&quot;&gt;${item.product.name}&lt;/h3&gt;&#10;                                        &lt;p class=&quot;item-category&quot;&gt;${item.product.categoryName}&lt;/p&gt;&#10;                                        &lt;div class=&quot;item-price&quot;&gt;&#10;                                            &lt;c:choose&gt;&#10;                                                &lt;c:when test=&quot;${item.product.discount != null &amp;&amp; item.product.discount &gt; 0}&quot;&gt;&#10;                                                    &lt;span class=&quot;current-price&quot;&gt;&#10;                                                        &lt;fmt:formatNumber value=&quot;${item.product.price * (1 - item.product.discount/100)}&quot; type=&quot;currency&quot; currencyCode=&quot;VND&quot;/&gt;&#10;                                                    &lt;/span&gt;&#10;                                                    &lt;span class=&quot;original-price&quot;&gt;&#10;                                                        &lt;fmt:formatNumber value=&quot;${item.product.price}&quot; type=&quot;currency&quot; currencyCode=&quot;VND&quot;/&gt;&#10;                                                    &lt;/span&gt;&#10;                                                &lt;/c:when&gt;&#10;                                                &lt;c:otherwise&gt;&#10;                                                    &lt;span class=&quot;current-price&quot;&gt;&#10;                                                        &lt;fmt:formatNumber value=&quot;${item.product.price}&quot; type=&quot;currency&quot; currencyCode=&quot;VND&quot;/&gt;&#10;                                                    &lt;/span&gt;&#10;                                                &lt;/c:otherwise&gt;&#10;                                            &lt;/c:choose&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;div class=&quot;item-actions&quot;&gt;&#10;                                        &lt;div class=&quot;quantity-controls&quot;&gt;&#10;                                            &lt;button class=&quot;qty-btn&quot; onclick=&quot;updateQuantity(${item.id}, ${item.quantity - 1})&quot;&#10;                                                    ${item.quantity &lt;= 1 ? 'disabled' : ''} type=&quot;button&quot;&gt;&#10;                                                &lt;i class=&quot;fas fa-minus&quot;&gt;&lt;/i&gt;&#10;                                            &lt;/button&gt;&#10;                                            &lt;input type=&quot;number&quot; class=&quot;qty-input&quot; value=&quot;${item.quantity}&quot;&#10;                                                   min=&quot;1&quot; max=&quot;99&quot; onchange=&quot;updateQuantity(${item.id}, this.value)&quot;&gt;&#10;                                            &lt;button class=&quot;qty-btn&quot; onclick=&quot;updateQuantity(${item.id}, ${item.quantity + 1})&quot; type=&quot;button&quot;&gt;&#10;                                                &lt;i class=&quot;fas fa-plus&quot;&gt;&lt;/i&gt;&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;&#10;                                        &lt;div class=&quot;item-total&quot;&gt;&#10;                                            &lt;c:set var=&quot;itemPrice&quot; value=&quot;${item.product.discount != null &amp;&amp; item.product.discount &gt; 0 ?&#10;                                                item.product.price * (1 - item.product.discount/100) : item.product.price}&quot; /&gt;&#10;                                            &lt;fmt:formatNumber value=&quot;${itemPrice * item.quantity}&quot; type=&quot;currency&quot; currencyCode=&quot;VND&quot;/&gt;&#10;                                        &lt;/div&gt;&#10;&#10;                                        &lt;button class=&quot;remove-btn&quot; onclick=&quot;removeItem(${item.id})&quot;&#10;                                                title=&quot;Xóa sản phẩm&quot; type=&quot;button&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-trash&quot;&gt;&lt;/i&gt;&#10;                                        &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/c:forEach&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;cart-summary&quot;&gt;&#10;                            &lt;div class=&quot;summary-card&quot;&gt;&#10;                                &lt;h3 class=&quot;summary-title&quot;&gt;Tóm Tắt Đơn Hàng&lt;/h3&gt;&#10;&#10;                                &lt;div class=&quot;summary-row&quot;&gt;&#10;                                    &lt;span&gt;Tạm tính (${fn:length(cartItems)} sản phẩm):&lt;/span&gt;&#10;                                    &lt;span id=&quot;subtotal&quot;&gt;&#10;                                        &lt;fmt:formatNumber value=&quot;${cartTotal}&quot; type=&quot;currency&quot; currencyCode=&quot;VND&quot;/&gt;&#10;                                    &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div class=&quot;summary-row&quot;&gt;&#10;                                    &lt;span&gt;Phí vận chuyển:&lt;/span&gt;&#10;                                    &lt;span class=&quot;shipping-fee&quot;&gt;Miễn phí&lt;/span&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div class=&quot;summary-row discount-row&quot; style=&quot;display: none;&quot;&gt;&#10;                                    &lt;span&gt;Giảm giá:&lt;/span&gt;&#10;                                    &lt;span class=&quot;discount-amount&quot;&gt;-0₫&lt;/span&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;hr&gt;&#10;&#10;                                &lt;div class=&quot;summary-row total-row&quot;&gt;&#10;                                    &lt;span&gt;Tổng cộng:&lt;/span&gt;&#10;                                    &lt;span class=&quot;total-amount&quot; id=&quot;totalAmount&quot;&gt;&#10;                                        &lt;fmt:formatNumber value=&quot;${cartTotal}&quot; type=&quot;currency&quot; currencyCode=&quot;VND&quot;/&gt;&#10;                                    &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div class=&quot;coupon-section&quot;&gt;&#10;                                    &lt;input type=&quot;text&quot; class=&quot;coupon-input&quot; placeholder=&quot;Nhập mã giảm giá&quot; id=&quot;couponInput&quot;&gt;&#10;                                    &lt;button class=&quot;coupon-btn&quot; onclick=&quot;applyCoupon()&quot;&gt;Áp dụng&lt;/button&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div class=&quot;checkout-actions&quot;&gt;&#10;                                    &lt;button class=&quot;btn-checkout&quot; onclick=&quot;proceedToCheckout()&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-credit-card&quot;&gt;&lt;/i&gt;&#10;                                        Tiến Hành Thanh Toán&#10;                                    &lt;/button&gt;&#10;                                    &lt;a href=&quot;${pageContext.request.contextPath}/shop&quot; class=&quot;btn-continue&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-arrow-left&quot;&gt;&lt;/i&gt;&#10;                                        Tiếp Tục Mua Sắm&#10;                                    &lt;/a&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/c:when&gt;&#10;                &lt;c:otherwise&gt;&#10;                    &lt;div class=&quot;empty-cart&quot;&gt;&#10;                        &lt;div class=&quot;empty-cart-icon&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-shopping-cart&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h2 class=&quot;empty-cart-title&quot;&gt;Giỏ hàng của bạn đang trống&lt;/h2&gt;&#10;                        &lt;p class=&quot;empty-cart-message&quot;&gt;Hãy khám phá các sản phẩm tuyệt vời của chúng tôi!&lt;/p&gt;&#10;                        &lt;a href=&quot;${pageContext.request.contextPath}/shop&quot; class=&quot;btn btn-primary&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-shopping-bag&quot;&gt;&lt;/i&gt;&#10;                            Bắt Đầu Mua Sắm&#10;                        &lt;/a&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/c:otherwise&gt;&#10;            &lt;/c:choose&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script&gt;&#10;        // Fixed navbar on scroll&#10;        window.addEventListener('scroll', function() {&#10;            const navbar = document.getElementById('navbar');&#10;            if (window.scrollY &gt; 50) {&#10;                navbar.classList.add('scrolled');&#10;            } else {&#10;                navbar.classList.remove('scrolled');&#10;            }&#10;        });&#10;&#10;        // Update quantity function&#10;        function updateQuantity(itemId, newQuantity) {&#10;            if (newQuantity &lt; 1) {&#10;                removeItem(itemId);&#10;                return;&#10;            }&#10;&#10;            if (newQuantity &gt; 99) {&#10;                showNotification('Số lượng không được vượt quá 99', 'error');&#10;                return;&#10;            }&#10;&#10;            fetch('${pageContext.request.contextPath}/cart/update', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/x-www-form-urlencoded',&#10;                },&#10;                body: 'itemId=' + itemId + '&amp;quantity=' + newQuantity&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.success) {&#10;                    location.reload();&#10;                } else {&#10;                    showNotification(data.message || 'Có lỗi xảy ra!', 'error');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Error:', error);&#10;                showNotification('Có lỗi xảy ra khi cập nhật!', 'error');&#10;            });&#10;        }&#10;&#10;        // Remove item function&#10;        function removeItem(itemId) {&#10;            if (!confirm('Bạn có chắc muốn xóa sản phẩm này khỏi giỏ hàng?')) {&#10;                return;&#10;            }&#10;&#10;            fetch('${pageContext.request.contextPath}/cart/remove', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/x-www-form-urlencoded',&#10;                },&#10;                body: 'itemId=' + itemId&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.success) {&#10;                    location.reload();&#10;                } else {&#10;                    showNotification(data.message || 'Có lỗi xảy ra!', 'error');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Error:', error);&#10;                showNotification('Có lỗi xảy ra khi xóa sản phẩm!', 'error');&#10;            });&#10;        }&#10;&#10;        // Apply coupon function&#10;        function applyCoupon() {&#10;            const couponCode = document.getElementById('couponInput').value.trim();&#10;            if (!couponCode) {&#10;                showNotification('Vui lòng nhập mã giảm giá!', 'error');&#10;                return;&#10;            }&#10;&#10;            // Simulate coupon application&#10;            showNotification('Tính năng mã giảm giá đang được phát triển!', 'info');&#10;        }&#10;&#10;        // Proceed to checkout function&#10;        function proceedToCheckout() {&#10;            &lt;c:choose&gt;&#10;                &lt;c:when test=&quot;${sessionScope.user != null}&quot;&gt;&#10;                    window.location.href = '${pageContext.request.contextPath}/checkout';&#10;                &lt;/c:when&gt;&#10;                &lt;c:otherwise&gt;&#10;                    if (confirm('Bạn cần đăng nhập để thanh toán. Chuyển đến trang đăng nhập?')) {&#10;                        window.location.href = '${pageContext.request.contextPath}/login?redirect=checkout';&#10;                    }&#10;                &lt;/c:otherwise&gt;&#10;            &lt;/c:choose&gt;&#10;        }&#10;&#10;        // Notification function&#10;        function showNotification(message, type) {&#10;            const notification = document.createElement('div');&#10;            notification.className = 'notification notification-' + type;&#10;            notification.innerHTML = '&lt;i class=&quot;fas fa-info-circle&quot;&gt;&lt;/i&gt;' + message;&#10;&#10;            document.body.appendChild(notification);&#10;&#10;            setTimeout(() =&gt; {&#10;                notification.classList.add('show');&#10;            }, 100);&#10;&#10;            setTimeout(() =&gt; {&#10;                notification.classList.remove('show');&#10;                setTimeout(() =&gt; notification.remove(), 300);&#10;            }, 3000);&#10;        }&#10;&#10;        // Add ripple effect to buttons&#10;        document.querySelectorAll('.btn-checkout, .btn-continue').forEach(btn =&gt; {&#10;            btn.addEventListener('click', function(e) {&#10;                const ripple = document.createElement('span');&#10;                const rect = this.getBoundingClientRect();&#10;                const size = Math.max(rect.width, rect.height);&#10;                const x = e.clientX - rect.left - size / 2;&#10;                const y = e.clientY - rect.top - size / 2;&#10;&#10;                ripple.style.width = ripple.style.height = size + 'px';&#10;                ripple.style.left = x + 'px';&#10;                ripple.style.top = y + 'px';&#10;                ripple.classList.add('ripple');&#10;&#10;                this.appendChild(ripple);&#10;&#10;                setTimeout(() =&gt; {&#10;                    ripple.remove();&#10;                }, 400);&#10;            });&#10;        });&#10;    &lt;/script&gt;&#10;&#10;    &lt;style&gt;&#10;        .notification {&#10;            position: fixed;&#10;            top: 100px;&#10;            right: 20px;&#10;            background: var(--success);&#10;            color: white;&#10;            padding: 1rem 1.5rem;&#10;            border-radius: var(--radius-lg);&#10;            box-shadow: var(--shadow-lg);&#10;            transform: translateX(400px);&#10;            transition: transform 0.3s ease;&#10;            z-index: 1001;&#10;        }&#10;&#10;        .notification.show {&#10;            transform: translateX(0);&#10;        }&#10;&#10;        .notification.error {&#10;            background: var(--danger);&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/webapp/css/cart.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/webapp/css/cart.css" />
              <option name="originalContent" value="/* Cart Specific Styles */&#10;.cart-container {&#10;    display: grid;&#10;    grid-template-columns: 1fr 300px;&#10;    gap: var(--spacing-xl);&#10;    margin-top: var(--spacing-xl);&#10;}&#10;&#10;.cart-items {&#10;    background: var(--white);&#10;    border-radius: var(--radius-xl);&#10;    box-shadow: var(--shadow-md);&#10;    overflow: hidden;&#10;    border: 1px solid rgba(0, 0, 0, 0.04);&#10;}&#10;&#10;.cart-item {&#10;    display: grid;&#10;    grid-template-columns: 100px 1fr auto;&#10;    gap: var(--spacing-lg);&#10;    padding: var(--spacing-lg);&#10;    border-bottom: 1px solid var(--gray-light);&#10;    align-items: center;&#10;    transition: all 0.2s ease;&#10;}&#10;&#10;.cart-item:hover {&#10;    background-color: rgba(0, 122, 255, 0.03);&#10;}&#10;&#10;.cart-item:last-child {&#10;    border-bottom: none;&#10;}&#10;&#10;.item-image img {&#10;    width: 100%;&#10;    height: 100px;&#10;    object-fit: cover;&#10;    border-radius: var(--radius-md);&#10;    box-shadow: var(--shadow-sm);&#10;}&#10;&#10;.item-details {&#10;    display: flex;&#10;    flex-direction: column;&#10;    gap: var(--spacing-sm);&#10;}&#10;&#10;.item-name {&#10;    font-weight: 600;&#10;    font-size: 1.0625rem;&#10;    color: var(--dark);&#10;}&#10;&#10;.item-price {&#10;    display: flex;&#10;    gap: var(--spacing-sm);&#10;    align-items: center;&#10;    margin-bottom: var(--spacing-sm);&#10;}&#10;&#10;.original-price {&#10;    text-decoration: line-through;&#10;    color: var(--gray);&#10;    font-size: 0.875rem;&#10;}&#10;&#10;.discounted-price {&#10;    color: var(--danger);&#10;    font-weight: 600;&#10;}&#10;&#10;.final-price {&#10;    color: var(--dark);&#10;    font-weight: 600;&#10;}&#10;&#10;.item-actions {&#10;    display: flex;&#10;    gap: var(--spacing-md);&#10;    align-items: center;&#10;}&#10;&#10;.quantity-form {&#10;    display: flex;&#10;    align-items: center;&#10;    gap: var(--spacing-md);&#10;}&#10;&#10;.quantity-controls {&#10;    display: flex;&#10;    align-items: center;&#10;    border: 1px solid var(--gray-light);&#10;    border-radius: var(--radius-md);&#10;    overflow: hidden;&#10;}&#10;&#10;.quantity-btn {&#10;    width: 30px;&#10;    height: 30px;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    background: var(--secondary);&#10;    border: none;&#10;    cursor: pointer;&#10;    font-size: 1rem;&#10;    font-weight: bold;&#10;    transition: all 0.2s ease;&#10;}&#10;&#10;.quantity-btn:hover {&#10;    background: var(--gray-light);&#10;}&#10;&#10;.quantity-input {&#10;    width: 40px;&#10;    text-align: center;&#10;    border: none;&#10;    font-size: 0.9375rem;&#10;    font-weight: 500;&#10;    -moz-appearance: textfield;&#10;    appearance: textfield;&#10;}&#10;&#10;.quantity-input::-webkit-outer-spin-button,&#10;.quantity-input::-webkit-inner-spin-button {&#10;    -webkit-appearance: none;&#10;    margin: 0;&#10;}&#10;&#10;.item-total {&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: flex-end;&#10;    gap: var(--spacing-xs);&#10;}&#10;&#10;.total-label {&#10;    font-size: 0.75rem;&#10;    color: var(--gray);&#10;}&#10;&#10;.total-value {&#10;    font-weight: 700;&#10;    font-size: 1.125rem;&#10;    color: var(--dark);&#10;}&#10;&#10;.cart-summary {&#10;    background: var(--white);&#10;    border-radius: var(--radius-xl);&#10;    box-shadow: var(--shadow-md);&#10;    padding: var(--spacing-xl);&#10;    border: 1px solid rgba(0, 0, 0, 0.04);&#10;    position: sticky;&#10;    top: var(--spacing-xl);&#10;    align-self: start;&#10;}&#10;&#10;.cart-summary h3 {&#10;    margin-bottom: var(--spacing-lg);&#10;    font-size: 1.25rem;&#10;    font-weight: 600;&#10;    color: var(--dark);&#10;    padding-bottom: var(--spacing-md);&#10;    border-bottom: 1px solid var(--gray-light);&#10;}&#10;&#10;.summary-row {&#10;    display: flex;&#10;    justify-content: space-between;&#10;    padding: var(--spacing-md) 0;&#10;    border-bottom: 1px dashed var(--gray-light);&#10;}&#10;&#10;.summary-row.total {&#10;    margin-top: var(--spacing-md);&#10;    padding: var(--spacing-lg) 0;&#10;    border-top: 2px solid var(--gray-light);&#10;    border-bottom: none;&#10;}&#10;&#10;.summary-label {&#10;    color: var(--gray);&#10;    font-weight: 500;&#10;}&#10;&#10;.summary-value {&#10;    font-weight: 600;&#10;    color: var(--dark);&#10;}&#10;&#10;.summary-row.total .summary-label,&#10;.summary-row.total .summary-value {&#10;    font-weight: 700;&#10;    font-size: 1.125rem;&#10;    color: var(--dark);&#10;}&#10;&#10;.checkout-btn {&#10;    margin-top: var(--spacing-lg);&#10;    width: 100%;&#10;    font-weight: 600;&#10;}&#10;&#10;.empty-cart {&#10;    background: var(--white);&#10;    border-radius: var(--radius-xl);&#10;    box-shadow: var(--shadow-md);&#10;    padding: var(--spacing-2xl);&#10;    text-align: center;&#10;    margin: var(--spacing-xl) 0;&#10;    border: 1px solid rgba(0, 0, 0, 0.04);&#10;}&#10;&#10;.empty-cart-icon {&#10;    font-size: 4rem;&#10;    margin-bottom: var(--spacing-lg);&#10;    color: var(--gray);&#10;}&#10;&#10;.empty-cart h2 {&#10;    font-size: 1.5rem;&#10;    font-weight: 600;&#10;    margin-bottom: var(--spacing-md);&#10;    color: var(--dark);&#10;}&#10;&#10;.empty-cart p {&#10;    color: var(--gray);&#10;    margin-bottom: var(--spacing-xl);&#10;}&#10;&#10;.shop-actions {&#10;    display: flex;&#10;    gap: var(--spacing-md);&#10;    margin: var(--spacing-lg) 0;&#10;    justify-content: center;&#10;}&#10;&#10;/* Responsive styles */&#10;@media (max-width: 834px) {&#10;    .cart-container {&#10;        grid-template-columns: 1fr;&#10;    }&#10;&#10;    .cart-item {&#10;        grid-template-columns: 80px 1fr;&#10;    }&#10;&#10;    .item-total {&#10;        grid-column: 1/3;&#10;        align-items: flex-start;&#10;        margin-top: var(--spacing-md);&#10;    }&#10;&#10;    .cart-summary {&#10;        position: static;&#10;    }&#10;}&#10;&#10;@media (max-width: 428px) {&#10;    .item-actions {&#10;        flex-direction: column;&#10;        align-items: flex-start;&#10;        gap: var(--spacing-sm);&#10;    }&#10;&#10;    .quantity-form {&#10;        flex-direction: column;&#10;        align-items: flex-start;&#10;    }&#10;}" />
              <option name="updatedContent" value="/* Cart Specific Styles */&#10;.cart-container {&#10;    display: grid;&#10;    grid-template-columns: 1fr 300px;&#10;    gap: var(--spacing-xl);&#10;    margin-top: var(--spacing-xl);&#10;}&#10;&#10;.cart-items {&#10;    background: var(--white);&#10;    border-radius: var(--radius-xl);&#10;    box-shadow: var(--shadow-md);&#10;    overflow: hidden;&#10;    border: 1px solid rgba(0, 0, 0, 0.04);&#10;}&#10;&#10;.cart-item {&#10;    display: grid;&#10;    grid-template-columns: 100px 1fr auto;&#10;    gap: var(--spacing-lg);&#10;    padding: var(--spacing-lg);&#10;    border-bottom: 1px solid var(--gray-light);&#10;    align-items: center;&#10;    transition: background-color 0.15s ease;&#10;    will-change: background-color;&#10;}&#10;&#10;.cart-item:hover {&#10;    background-color: rgba(0, 122, 255, 0.03);&#10;}&#10;&#10;.cart-item:last-child {&#10;    border-bottom: none;&#10;}&#10;&#10;.item-image img {&#10;    width: 100%;&#10;    height: 100px;&#10;    object-fit: cover;&#10;    border-radius: var(--radius-md);&#10;    box-shadow: var(--shadow-sm);&#10;    transition: transform 0.2s ease;&#10;    will-change: transform;&#10;}&#10;&#10;.cart-item:hover .item-image img {&#10;    transform: scale(1.02);&#10;}&#10;&#10;.item-details {&#10;    display: flex;&#10;    flex-direction: column;&#10;    gap: var(--spacing-sm);&#10;}&#10;&#10;.item-name {&#10;    font-weight: 600;&#10;    font-size: 1.0625rem;&#10;    color: var(--dark);&#10;    transition: color 0.15s ease;&#10;}&#10;&#10;.cart-item:hover .item-name {&#10;    color: var(--primary);&#10;}&#10;&#10;.item-price {&#10;    display: flex;&#10;    gap: var(--spacing-sm);&#10;    align-items: center;&#10;    margin-bottom: var(--spacing-sm);&#10;}&#10;&#10;.original-price {&#10;    text-decoration: line-through;&#10;    color: var(--gray);&#10;    font-size: 0.875rem;&#10;}&#10;&#10;.discounted-price {&#10;    color: var(--danger);&#10;    font-weight: 600;&#10;}&#10;&#10;.final-price {&#10;    color: var(--dark);&#10;    font-weight: 600;&#10;}&#10;&#10;.item-actions {&#10;    display: flex;&#10;    gap: var(--spacing-md);&#10;    align-items: center;&#10;}&#10;&#10;.quantity-form {&#10;    display: flex;&#10;    align-items: center;&#10;    gap: var(--spacing-md);&#10;}&#10;&#10;.quantity-controls {&#10;    display: flex;&#10;    align-items: center;&#10;    border: 1px solid var(--gray-light);&#10;    border-radius: var(--radius-md);&#10;    overflow: hidden;&#10;}&#10;&#10;.quantity-btn {&#10;    width: 30px;&#10;    height: 30px;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    background: var(--secondary);&#10;    border: none;&#10;    cursor: pointer;&#10;    font-size: 1rem;&#10;    font-weight: bold;&#10;    transition: all 0.2s ease;&#10;}&#10;&#10;.quantity-btn:hover {&#10;    background: var(--gray-light);&#10;}&#10;&#10;.quantity-input {&#10;    width: 40px;&#10;    text-align: center;&#10;    border: none;&#10;    font-size: 0.9375rem;&#10;    font-weight: 500;&#10;    -moz-appearance: textfield;&#10;    appearance: textfield;&#10;}&#10;&#10;.quantity-input::-webkit-outer-spin-button,&#10;.quantity-input::-webkit-inner-spin-button {&#10;    -webkit-appearance: none;&#10;    margin: 0;&#10;}&#10;&#10;.item-total {&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: flex-end;&#10;    gap: var(--spacing-xs);&#10;}&#10;&#10;.total-label {&#10;    font-size: 0.75rem;&#10;    color: var(--gray);&#10;}&#10;&#10;.total-value {&#10;    font-weight: 700;&#10;    font-size: 1.125rem;&#10;    color: var(--dark);&#10;}&#10;&#10;.cart-summary {&#10;    background: var(--white);&#10;    border-radius: var(--radius-xl);&#10;    box-shadow: var(--shadow-md);&#10;    padding: var(--spacing-xl);&#10;    border: 1px solid rgba(0, 0, 0, 0.04);&#10;    position: sticky;&#10;    top: var(--spacing-xl);&#10;    align-self: start;&#10;}&#10;&#10;.cart-summary h3 {&#10;    margin-bottom: var(--spacing-lg);&#10;    font-size: 1.25rem;&#10;    font-weight: 600;&#10;    color: var(--dark);&#10;    padding-bottom: var(--spacing-md);&#10;    border-bottom: 1px solid var(--gray-light);&#10;}&#10;&#10;.summary-row {&#10;    display: flex;&#10;    justify-content: space-between;&#10;    padding: var(--spacing-md) 0;&#10;    border-bottom: 1px dashed var(--gray-light);&#10;}&#10;&#10;.summary-row.total {&#10;    margin-top: var(--spacing-md);&#10;    padding: var(--spacing-lg) 0;&#10;    border-top: 2px solid var(--gray-light);&#10;    border-bottom: none;&#10;}&#10;&#10;.summary-label {&#10;    color: var(--gray);&#10;    font-weight: 500;&#10;}&#10;&#10;.summary-value {&#10;    font-weight: 600;&#10;    color: var(--dark);&#10;}&#10;&#10;.summary-row.total .summary-label,&#10;.summary-row.total .summary-value {&#10;    font-weight: 700;&#10;    font-size: 1.125rem;&#10;    color: var(--dark);&#10;}&#10;&#10;.checkout-btn {&#10;    margin-top: var(--spacing-lg);&#10;    width: 100%;&#10;    font-weight: 600;&#10;}&#10;&#10;.empty-cart {&#10;    background: var(--white);&#10;    border-radius: var(--radius-xl);&#10;    box-shadow: var(--shadow-md);&#10;    padding: var(--spacing-2xl);&#10;    text-align: center;&#10;    margin: var(--spacing-xl) 0;&#10;    border: 1px solid rgba(0, 0, 0, 0.04);&#10;}&#10;&#10;.empty-cart-icon {&#10;    font-size: 4rem;&#10;    margin-bottom: var(--spacing-lg);&#10;    color: var(--gray);&#10;}&#10;&#10;.empty-cart h2 {&#10;    font-size: 1.5rem;&#10;    font-weight: 600;&#10;    margin-bottom: var(--spacing-md);&#10;    color: var(--dark);&#10;}&#10;&#10;.empty-cart p {&#10;    color: var(--gray);&#10;    margin-bottom: var(--spacing-xl);&#10;}&#10;&#10;.shop-actions {&#10;    display: flex;&#10;    gap: var(--spacing-md);&#10;    margin: var(--spacing-lg) 0;&#10;    justify-content: center;&#10;}&#10;&#10;/* Responsive styles */&#10;@media (max-width: 834px) {&#10;    .cart-container {&#10;        grid-template-columns: 1fr;&#10;    }&#10;&#10;    .cart-item {&#10;        grid-template-columns: 80px 1fr;&#10;    }&#10;&#10;    .item-total {&#10;        grid-column: 1/3;&#10;        align-items: flex-start;&#10;        margin-top: var(--spacing-md);&#10;    }&#10;&#10;    .cart-summary {&#10;        position: static;&#10;    }&#10;}&#10;&#10;@media (max-width: 428px) {&#10;    .item-actions {&#10;        flex-direction: column;&#10;        align-items: flex-start;&#10;        gap: var(--spacing-sm);&#10;    }&#10;&#10;    .quantity-form {&#10;        flex-direction: column;&#10;        align-items: flex-start;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/webapp/css/shop.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/webapp/css/shop.css" />
              <option name="originalContent" value="/* Shop Styles */&#10;.shop-container {&#10;    display: flex;&#10;    gap: var(--spacing-xl);&#10;    margin: var(--spacing-xl) 0;&#10;}&#10;&#10;.categories-sidebar {&#10;    width: 250px;&#10;    background: var(--white);&#10;    border-radius: var(--radius-lg);&#10;    padding: var(--spacing-lg);&#10;    box-shadow: var(--shadow-md);&#10;    height: fit-content;&#10;    position: sticky;&#10;    top: var(--spacing-xl);&#10;    overflow-y: auto;&#10;}&#10;&#10;.categories-sidebar h3 {&#10;    margin-bottom: var(--spacing-md);&#10;    padding-bottom: var(--spacing-sm);&#10;    border-bottom: 1px solid var(--gray-light);&#10;    font-weight: 600;&#10;    color: var(--dark);&#10;}&#10;&#10;.category-list {&#10;    list-style: none;&#10;    padding: 0;&#10;}&#10;&#10;.category-list li {&#10;    margin-bottom: var(--spacing-xs);&#10;}&#10;&#10;.category-list a {&#10;    display: block;&#10;    padding: var(--spacing-sm) var(--spacing-md);&#10;    color: var(--gray);&#10;    text-decoration: none;&#10;    border-radius: var(--radius-sm);&#10;    transition: all 0.2s ease;&#10;}&#10;&#10;.category-list a:hover {&#10;    background: rgba(0, 122, 255, 0.05);&#10;    color: var(--primary);&#10;    transform: translateX(2px);&#10;}&#10;&#10;.category-list a.active {&#10;    background: var(--primary);&#10;    color: var(--white);&#10;    font-weight: 500;&#10;}&#10;&#10;.products-grid {&#10;    flex: 1;&#10;    display: grid;&#10;    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));&#10;    gap: var(--spacing-lg);&#10;}&#10;&#10;.product-card {&#10;    background: var(--white);&#10;    border-radius: var(--radius-lg);&#10;    overflow: hidden;&#10;    box-shadow: var(--shadow-md);&#10;    transition: transform 0.3s ease, box-shadow 0.3s ease;&#10;    height: 100%;&#10;    display: flex;&#10;    flex-direction: column;&#10;}&#10;&#10;.product-card:hover {&#10;    transform: translateY(-5px);&#10;    box-shadow: var(--shadow-lg);&#10;}&#10;&#10;.product-image {&#10;    width: 100%;&#10;    height: 200px;&#10;    overflow: hidden;&#10;    border-bottom: 1px solid var(--gray-light);&#10;}&#10;&#10;.product-image img {&#10;    width: 100%;&#10;    height: 100%;&#10;    object-fit: cover;&#10;    transition: transform 0.5s ease;&#10;}&#10;&#10;.product-card:hover .product-image img {&#10;    transform: scale(1.05);&#10;}&#10;&#10;.product-info {&#10;    padding: var(--spacing-lg);&#10;    display: flex;&#10;    flex-direction: column;&#10;    flex-grow: 1;&#10;}&#10;&#10;.product-name {&#10;    font-size: 1.125rem;&#10;    font-weight: 600;&#10;    margin-bottom: var(--spacing-xs);&#10;    color: var(--dark);&#10;}&#10;&#10;.product-category {&#10;    color: var(--gray);&#10;    font-size: 0.875rem;&#10;    margin-bottom: var(--spacing-sm);&#10;}&#10;&#10;.product-price {&#10;    margin: var(--spacing-sm) 0;&#10;    font-weight: 700;&#10;    display: flex;&#10;    align-items: center;&#10;    gap: var(--spacing-sm);&#10;}&#10;&#10;.original-price {&#10;    color: var(--gray);&#10;    text-decoration: line-through;&#10;    font-size: 0.875rem;&#10;    font-weight: 400;&#10;}&#10;&#10;.discounted-price, .final-price {&#10;    color: var(--danger);&#10;}&#10;&#10;.product-actions {&#10;    margin-top: auto;&#10;    display: flex;&#10;    gap: var(--spacing-sm);&#10;}&#10;&#10;.shop-actions {&#10;    display: flex;&#10;    gap: var(--spacing-md);&#10;    margin-bottom: var(--spacing-lg);&#10;}&#10;&#10;.no-products {&#10;    grid-column: 1/-1;&#10;    text-align: center;&#10;    padding: var(--spacing-2xl);&#10;    background: var(--white);&#10;    border-radius: var(--radius-lg);&#10;    color: var(--gray);&#10;}&#10;&#10;/* Shop Specific Styles */&#10;.shop-header {&#10;    background: var(--glass-bg);&#10;    backdrop-filter: blur(10px);&#10;    border: 1px solid var(--glass-border);&#10;    border-radius: 16px;&#10;    padding: 2rem;&#10;    margin-bottom: 2rem;&#10;    text-align: center;&#10;}&#10;&#10;.shop-title {&#10;    font-size: 2.5rem;&#10;    font-weight: 700;&#10;    margin-bottom: 1rem;&#10;    background: linear-gradient(135deg, var(--primary), var(--secondary));&#10;    -webkit-background-clip: text;&#10;    -webkit-text-fill-color: transparent;&#10;    background-clip: text;&#10;}&#10;&#10;.shop-subtitle {&#10;    color: var(--text-secondary);&#10;    font-size: 1.1rem;&#10;    max-width: 600px;&#10;    margin: 0 auto;&#10;}&#10;&#10;/* Search and Filter Section */&#10;.shop-controls {&#10;    display: grid;&#10;    grid-template-columns: 1fr auto auto;&#10;    gap: 1rem;&#10;    margin-bottom: 2rem;&#10;    align-items: center;&#10;}&#10;&#10;.search-box {&#10;    position: relative;&#10;}&#10;&#10;.search-input {&#10;    width: 100%;&#10;    padding: 0.75rem 1rem 0.75rem 3rem;&#10;    background: var(--glass-bg);&#10;    border: 1px solid var(--glass-border);&#10;    border-radius: 12px;&#10;    color: var(--text-primary);&#10;    font-size: 1rem;&#10;    transition: all 0.3s ease;&#10;}&#10;&#10;.search-input:focus {&#10;    outline: none;&#10;    border-color: var(--primary);&#10;    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);&#10;}&#10;&#10;.search-input::placeholder {&#10;    color: var(--text-muted);&#10;}&#10;&#10;.search-icon {&#10;    position: absolute;&#10;    left: 1rem;&#10;    top: 50%;&#10;    transform: translateY(-50%);&#10;    color: var(--text-muted);&#10;    font-size: 1.1rem;&#10;}&#10;&#10;.category-filter {&#10;    position: relative;&#10;}&#10;&#10;.category-select {&#10;    padding: 0.75rem 1rem;&#10;    background: var(--glass-bg);&#10;    border: 1px solid var(--glass-border);&#10;    border-radius: 12px;&#10;    color: var(--text-primary);&#10;    font-size: 1rem;&#10;    min-width: 200px;&#10;    cursor: pointer;&#10;    transition: all 0.3s ease;&#10;}&#10;&#10;.category-select:focus {&#10;    outline: none;&#10;    border-color: var(--primary);&#10;}&#10;&#10;.sort-options {&#10;    display: flex;&#10;    gap: 0.5rem;&#10;}&#10;&#10;.sort-btn {&#10;    padding: 0.5rem 1rem;&#10;    background: var(--glass-bg);&#10;    border: 1px solid var(--glass-border);&#10;    border-radius: 8px;&#10;    color: var(--text-secondary);&#10;    cursor: pointer;&#10;    transition: all 0.3s ease;&#10;    font-size: 0.9rem;&#10;}&#10;&#10;.sort-btn:hover,&#10;.sort-btn.active {&#10;    background: var(--primary);&#10;    color: white;&#10;    transform: translateY(-1px);&#10;}&#10;&#10;/* Product Grid */&#10;.products-grid {&#10;    display: grid;&#10;    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));&#10;    gap: 2rem;&#10;    margin-bottom: 3rem;&#10;}&#10;&#10;.product-card {&#10;    background: var(--glass-bg);&#10;    backdrop-filter: blur(10px);&#10;    border: 1px solid var(--glass-border);&#10;    border-radius: 16px;&#10;    overflow: hidden;&#10;    transition: all 0.3s ease;&#10;    position: relative;&#10;    height: 100%;&#10;    display: flex;&#10;    flex-direction: column;&#10;}&#10;&#10;.product-card:hover {&#10;    transform: translateY(-10px);&#10;    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.4);&#10;    border-color: var(--primary);&#10;}&#10;&#10;.product-image {&#10;    position: relative;&#10;    height: 250px;&#10;    overflow: hidden;&#10;}&#10;&#10;.product-image img {&#10;    width: 100%;&#10;    height: 100%;&#10;    object-fit: cover;&#10;    transition: transform 0.3s ease;&#10;}&#10;&#10;.product-card:hover .product-image img {&#10;    transform: scale(1.05);&#10;}&#10;&#10;.product-badge {&#10;    position: absolute;&#10;    top: 1rem;&#10;    right: 1rem;&#10;    background: var(--danger);&#10;    color: white;&#10;    padding: 0.25rem 0.75rem;&#10;    border-radius: 20px;&#10;    font-size: 0.8rem;&#10;    font-weight: 600;&#10;}&#10;&#10;.product-badge.sale {&#10;    background: var(--warning);&#10;}&#10;&#10;.product-badge.new {&#10;    background: var(--success);&#10;}&#10;&#10;.product-info {&#10;    padding: 1.5rem;&#10;    flex: 1;&#10;    display: flex;&#10;    flex-direction: column;&#10;}&#10;&#10;.product-category {&#10;    color: var(--text-muted);&#10;    font-size: 0.9rem;&#10;    margin-bottom: 0.5rem;&#10;    text-transform: uppercase;&#10;    letter-spacing: 0.5px;&#10;}&#10;&#10;.product-name {&#10;    font-size: 1.25rem;&#10;    font-weight: 600;&#10;    color: var(--text-primary);&#10;    margin-bottom: 0.75rem;&#10;    line-height: 1.4;&#10;}&#10;&#10;.product-description {&#10;    color: var(--text-secondary);&#10;    font-size: 0.9rem;&#10;    line-height: 1.5;&#10;    margin-bottom: 1rem;&#10;    flex: 1;&#10;    display: -webkit-box;&#10;    -webkit-line-clamp: 3;&#10;    -webkit-box-orient: vertical;&#10;    overflow: hidden;&#10;}&#10;&#10;.product-price {&#10;    display: flex;&#10;    align-items: center;&#10;    gap: 0.75rem;&#10;    margin-bottom: 1.5rem;&#10;}&#10;&#10;.current-price {&#10;    font-size: 1.5rem;&#10;    font-weight: 700;&#10;    color: var(--primary);&#10;}&#10;&#10;.original-price {&#10;    font-size: 1.1rem;&#10;    color: var(--text-muted);&#10;    text-decoration: line-through;&#10;}&#10;&#10;.discount-percent {&#10;    background: var(--danger);&#10;    color: white;&#10;    padding: 0.25rem 0.5rem;&#10;    border-radius: 6px;&#10;    font-size: 0.8rem;&#10;    font-weight: 600;&#10;}&#10;&#10;.product-actions {&#10;    display: flex;&#10;    gap: 0.75rem;&#10;}&#10;&#10;.btn-add-cart {&#10;    flex: 1;&#10;    background: linear-gradient(135deg, var(--primary), var(--primary-dark));&#10;    color: white;&#10;    border: none;&#10;    padding: 0.75rem 1rem;&#10;    border-radius: 8px;&#10;    font-weight: 500;&#10;    cursor: pointer;&#10;    transition: all 0.3s ease;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    gap: 0.5rem;&#10;}&#10;&#10;.btn-add-cart:hover {&#10;    transform: translateY(-2px);&#10;    box-shadow: 0 10px 25px rgba(102, 126, 234, 0.4);&#10;}&#10;&#10;.btn-quick-view {&#10;    background: var(--glass-bg);&#10;    border: 1px solid var(--glass-border);&#10;    color: var(--text-primary);&#10;    padding: 0.75rem;&#10;    border-radius: 8px;&#10;    cursor: pointer;&#10;    transition: all 0.3s ease;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;}&#10;&#10;.btn-quick-view:hover {&#10;    background: var(--glass-border);&#10;    transform: translateY(-2px);&#10;}&#10;&#10;/* Stock Status */&#10;.stock-status {&#10;    margin-bottom: 1rem;&#10;    font-size: 0.9rem;&#10;}&#10;&#10;.in-stock {&#10;    color: var(--success);&#10;}&#10;&#10;.low-stock {&#10;    color: var(--warning);&#10;}&#10;&#10;.out-of-stock {&#10;    color: var(--danger);&#10;}&#10;&#10;/* Empty State */&#10;.empty-state {&#10;    text-align: center;&#10;    padding: 4rem 2rem;&#10;    background: var(--glass-bg);&#10;    border-radius: 16px;&#10;    border: 1px solid var(--glass-border);&#10;}&#10;&#10;.empty-state-icon {&#10;    font-size: 4rem;&#10;    color: var(--text-muted);&#10;    margin-bottom: 1rem;&#10;}&#10;&#10;.empty-state-title {&#10;    font-size: 1.5rem;&#10;    font-weight: 600;&#10;    margin-bottom: 0.5rem;&#10;    color: var(--text-primary);&#10;}&#10;&#10;.empty-state-message {&#10;    color: var(--text-secondary);&#10;    margin-bottom: 2rem;&#10;}&#10;&#10;/* Pagination */&#10;.pagination {&#10;    display: flex;&#10;    justify-content: center;&#10;    align-items: center;&#10;    gap: 0.5rem;&#10;    margin-top: 3rem;&#10;}&#10;&#10;.pagination-btn {&#10;    padding: 0.75rem 1rem;&#10;    background: var(--glass-bg);&#10;    border: 1px solid var(--glass-border);&#10;    border-radius: 8px;&#10;    color: var(--text-secondary);&#10;    text-decoration: none;&#10;    transition: all 0.3s ease;&#10;    min-width: 44px;&#10;    text-align: center;&#10;}&#10;&#10;.pagination-btn:hover,&#10;.pagination-btn.active {&#10;    background: var(--primary);&#10;    color: white;&#10;    transform: translateY(-1px);&#10;}&#10;&#10;.pagination-btn:disabled {&#10;    opacity: 0.5;&#10;    cursor: not-allowed;&#10;}&#10;&#10;/* Responsive Design */&#10;@media (max-width: 768px) {&#10;    .shop-controls {&#10;        grid-template-columns: 1fr;&#10;        gap: 1rem;&#10;    }&#10;&#10;    .sort-options {&#10;        justify-content: center;&#10;    }&#10;&#10;    .products-grid {&#10;        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));&#10;        gap: 1.5rem;&#10;    }&#10;&#10;    .product-actions {&#10;        flex-direction: column;&#10;    }&#10;&#10;    .shop-title {&#10;        font-size: 2rem;&#10;    }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;    .products-grid {&#10;        grid-template-columns: 1fr;&#10;    }&#10;&#10;    .product-card {&#10;        margin: 0 auto;&#10;        max-width: 350px;&#10;    }&#10;}" />
              <option name="updatedContent" value="/* Shop Styles */&#10;.shop-container {&#10;    display: flex;&#10;    gap: var(--spacing-xl);&#10;    margin: var(--spacing-xl) 0;&#10;}&#10;&#10;.categories-sidebar {&#10;    width: 250px;&#10;    background: var(--white);&#10;    border-radius: var(--radius-lg);&#10;    padding: var(--spacing-lg);&#10;    box-shadow: var(--shadow-md);&#10;    height: fit-content;&#10;    position: sticky;&#10;    top: var(--spacing-xl);&#10;    overflow-y: auto;&#10;}&#10;&#10;.categories-sidebar h3 {&#10;    margin-bottom: var(--spacing-md);&#10;    padding-bottom: var(--spacing-sm);&#10;    border-bottom: 1px solid var(--gray-light);&#10;    font-weight: 600;&#10;    color: var(--dark);&#10;}&#10;&#10;.category-list {&#10;    list-style: none;&#10;    padding: 0;&#10;}&#10;&#10;.category-list li {&#10;    margin-bottom: var(--spacing-xs);&#10;}&#10;&#10;.category-list a {&#10;    display: block;&#10;    padding: var(--spacing-sm) var(--spacing-md);&#10;    color: var(--gray);&#10;    text-decoration: none;&#10;    border-radius: var(--radius-sm);&#10;    transition: background-color 0.15s ease, color 0.15s ease, transform 0.15s ease;&#10;    will-change: background-color, color, transform;&#10;}&#10;&#10;.category-list a:hover {&#10;    background: rgba(0, 122, 255, 0.05);&#10;    color: var(--primary);&#10;    transform: translateX(2px);&#10;}&#10;&#10;.category-list a.active {&#10;    background: var(--primary);&#10;    color: var(--white);&#10;    font-weight: 500;&#10;}&#10;&#10;.products-grid {&#10;    flex: 1;&#10;    display: grid;&#10;    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));&#10;    gap: var(--spacing-lg);&#10;}&#10;&#10;.product-card {&#10;    background: var(--white);&#10;    border-radius: var(--radius-lg);&#10;    overflow: hidden;&#10;    box-shadow: var(--shadow-md);&#10;    transition: transform 0.2s ease, box-shadow 0.2s ease;&#10;    will-change: transform, box-shadow;&#10;    height: 100%;&#10;    display: flex;&#10;    flex-direction: column;&#10;    backface-visibility: hidden;&#10;    transform: translateZ(0);&#10;}&#10;&#10;.product-card:hover {&#10;    transform: translateY(-3px) translateZ(0);&#10;    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);&#10;}&#10;&#10;.product-image {&#10;    width: 100%;&#10;    height: 200px;&#10;    overflow: hidden;&#10;    border-bottom: 1px solid var(--gray-light);&#10;}&#10;&#10;.product-image img {&#10;    width: 100%;&#10;    height: 100%;&#10;    object-fit: cover;&#10;    transition: transform 0.25s ease;&#10;    will-change: transform;&#10;    backface-visibility: hidden;&#10;}&#10;&#10;.product-card:hover .product-image img {&#10;    transform: scale(1.03) translateZ(0);&#10;}&#10;&#10;.product-info {&#10;    padding: var(--spacing-lg);&#10;    display: flex;&#10;    flex-direction: column;&#10;    flex-grow: 1;&#10;}&#10;&#10;.product-name {&#10;    font-size: 1.125rem;&#10;    font-weight: 600;&#10;    margin-bottom: var(--spacing-xs);&#10;    color: var(--dark);&#10;}&#10;&#10;.product-category {&#10;    color: var(--gray);&#10;    font-size: 0.875rem;&#10;    margin-bottom: var(--spacing-sm);&#10;}&#10;&#10;.product-price {&#10;    margin: var(--spacing-sm) 0;&#10;    font-weight: 700;&#10;    display: flex;&#10;    align-items: center;&#10;    gap: var(--spacing-sm);&#10;}&#10;&#10;.original-price {&#10;    color: var(--gray);&#10;    text-decoration: line-through;&#10;    font-size: 0.875rem;&#10;    font-weight: 400;&#10;}&#10;&#10;.discounted-price, .final-price {&#10;    color: var(--danger);&#10;}&#10;&#10;.product-actions {&#10;    margin-top: auto;&#10;    display: flex;&#10;    gap: var(--spacing-sm);&#10;}&#10;&#10;.shop-actions {&#10;    display: flex;&#10;    gap: var(--spacing-md);&#10;    margin-bottom: var(--spacing-lg);&#10;}&#10;&#10;.no-products {&#10;    grid-column: 1/-1;&#10;    text-align: center;&#10;    padding: var(--spacing-2xl);&#10;    background: var(--white);&#10;    border-radius: var(--radius-lg);&#10;    color: var(--gray);&#10;}&#10;&#10;/* Shop Specific Styles */&#10;.shop-header {&#10;    background: var(--glass-bg);&#10;    backdrop-filter: blur(10px);&#10;    border: 1px solid var(--glass-border);&#10;    border-radius: 16px;&#10;    padding: 2rem;&#10;    margin-bottom: 2rem;&#10;    text-align: center;&#10;}&#10;&#10;.shop-title {&#10;    font-size: 2.5rem;&#10;    font-weight: 700;&#10;    margin-bottom: 1rem;&#10;    background: linear-gradient(135deg, var(--primary), var(--secondary));&#10;    -webkit-background-clip: text;&#10;    -webkit-text-fill-color: transparent;&#10;    background-clip: text;&#10;}&#10;&#10;.shop-subtitle {&#10;    color: var(--text-secondary);&#10;    font-size: 1.1rem;&#10;    max-width: 600px;&#10;    margin: 0 auto;&#10;}&#10;&#10;/* Search and Filter Section */&#10;.shop-controls {&#10;    display: grid;&#10;    grid-template-columns: 1fr auto auto;&#10;    gap: 1rem;&#10;    margin-bottom: 2rem;&#10;    align-items: center;&#10;}&#10;&#10;.search-box {&#10;    position: relative;&#10;}&#10;&#10;.search-input {&#10;    width: 100%;&#10;    padding: 0.75rem 1rem 0.75rem 3rem;&#10;    background: var(--glass-bg);&#10;    border: 1px solid var(--glass-border);&#10;    border-radius: 12px;&#10;    color: var(--text-primary);&#10;    font-size: 1rem;&#10;    transition: all 0.3s ease;&#10;}&#10;&#10;.search-input:focus {&#10;    outline: none;&#10;    border-color: var(--primary);&#10;    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);&#10;}&#10;&#10;.search-input::placeholder {&#10;    color: var(--text-muted);&#10;}&#10;&#10;.search-icon {&#10;    position: absolute;&#10;    left: 1rem;&#10;    top: 50%;&#10;    transform: translateY(-50%);&#10;    color: var(--text-muted);&#10;    font-size: 1.1rem;&#10;}&#10;&#10;.category-filter {&#10;    position: relative;&#10;}&#10;&#10;.category-select {&#10;    padding: 0.75rem 1rem;&#10;    background: var(--glass-bg);&#10;    border: 1px solid var(--glass-border);&#10;    border-radius: 12px;&#10;    color: var(--text-primary);&#10;    font-size: 1rem;&#10;    min-width: 200px;&#10;    cursor: pointer;&#10;    transition: all 0.3s ease;&#10;}&#10;&#10;.category-select:focus {&#10;    outline: none;&#10;    border-color: var(--primary);&#10;}&#10;&#10;.sort-options {&#10;    display: flex;&#10;    gap: 0.5rem;&#10;}&#10;&#10;.sort-btn {&#10;    padding: 0.5rem 1rem;&#10;    background: var(--glass-bg);&#10;    border: 1px solid var(--glass-border);&#10;    border-radius: 8px;&#10;    color: var(--text-secondary);&#10;    cursor: pointer;&#10;    transition: all 0.3s ease;&#10;    font-size: 0.9rem;&#10;}&#10;&#10;.sort-btn:hover,&#10;.sort-btn.active {&#10;    background: var(--primary);&#10;    color: white;&#10;    transform: translateY(-1px);&#10;}&#10;&#10;/* Product Grid */&#10;.products-grid {&#10;    display: grid;&#10;    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));&#10;    gap: 2rem;&#10;    margin-bottom: 3rem;&#10;}&#10;&#10;.product-card {&#10;    background: var(--glass-bg);&#10;    backdrop-filter: blur(10px);&#10;    border: 1px solid var(--glass-border);&#10;    border-radius: 16px;&#10;    overflow: hidden;&#10;    transition: all 0.3s ease;&#10;    position: relative;&#10;    height: 100%;&#10;    display: flex;&#10;    flex-direction: column;&#10;}&#10;&#10;.product-card:hover {&#10;    transform: translateY(-10px);&#10;    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.4);&#10;    border-color: var(--primary);&#10;}&#10;&#10;.product-image {&#10;    position: relative;&#10;    height: 250px;&#10;    overflow: hidden;&#10;}&#10;&#10;.product-image img {&#10;    width: 100%;&#10;    height: 100%;&#10;    object-fit: cover;&#10;    transition: transform 0.3s ease;&#10;}&#10;&#10;.product-card:hover .product-image img {&#10;    transform: scale(1.05);&#10;}&#10;&#10;.product-badge {&#10;    position: absolute;&#10;    top: 1rem;&#10;    right: 1rem;&#10;    background: var(--danger);&#10;    color: white;&#10;    padding: 0.25rem 0.75rem;&#10;    border-radius: 20px;&#10;    font-size: 0.8rem;&#10;    font-weight: 600;&#10;}&#10;&#10;.product-badge.sale {&#10;    background: var(--warning);&#10;}&#10;&#10;.product-badge.new {&#10;    background: var(--success);&#10;}&#10;&#10;.product-info {&#10;    padding: 1.5rem;&#10;    flex: 1;&#10;    display: flex;&#10;    flex-direction: column;&#10;}&#10;&#10;.product-category {&#10;    color: var(--text-muted);&#10;    font-size: 0.9rem;&#10;    margin-bottom: 0.5rem;&#10;    text-transform: uppercase;&#10;    letter-spacing: 0.5px;&#10;}&#10;&#10;.product-name {&#10;    font-size: 1.25rem;&#10;    font-weight: 600;&#10;    color: var(--text-primary);&#10;    margin-bottom: 0.75rem;&#10;    line-height: 1.4;&#10;}&#10;&#10;.product-description {&#10;    color: var(--text-secondary);&#10;    font-size: 0.9rem;&#10;    line-height: 1.5;&#10;    margin-bottom: 1rem;&#10;    flex: 1;&#10;    display: -webkit-box;&#10;    -webkit-line-clamp: 3;&#10;    -webkit-box-orient: vertical;&#10;    overflow: hidden;&#10;}&#10;&#10;.product-price {&#10;    display: flex;&#10;    align-items: center;&#10;    gap: 0.75rem;&#10;    margin-bottom: 1.5rem;&#10;}&#10;&#10;.current-price {&#10;    font-size: 1.5rem;&#10;    font-weight: 700;&#10;    color: var(--primary);&#10;}&#10;&#10;.original-price {&#10;    font-size: 1.1rem;&#10;    color: var(--text-muted);&#10;    text-decoration: line-through;&#10;}&#10;&#10;.discount-percent {&#10;    background: var(--danger);&#10;    color: white;&#10;    padding: 0.25rem 0.5rem;&#10;    border-radius: 6px;&#10;    font-size: 0.8rem;&#10;    font-weight: 600;&#10;}&#10;&#10;.product-actions {&#10;    display: flex;&#10;    gap: 0.75rem;&#10;}&#10;&#10;.btn-add-cart {&#10;    flex: 1;&#10;    background: linear-gradient(135deg, var(--primary), var(--primary-dark));&#10;    color: white;&#10;    border: none;&#10;    padding: 0.75rem 1rem;&#10;    border-radius: 8px;&#10;    font-weight: 500;&#10;    cursor: pointer;&#10;    transition: all 0.3s ease;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    gap: 0.5rem;&#10;}&#10;&#10;.btn-add-cart:hover {&#10;    transform: translateY(-2px);&#10;    box-shadow: 0 10px 25px rgba(102, 126, 234, 0.4);&#10;}&#10;&#10;.btn-quick-view {&#10;    background: var(--glass-bg);&#10;    border: 1px solid var(--glass-border);&#10;    color: var(--text-primary);&#10;    padding: 0.75rem;&#10;    border-radius: 8px;&#10;    cursor: pointer;&#10;    transition: all 0.3s ease;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;}&#10;&#10;.btn-quick-view:hover {&#10;    background: var(--glass-border);&#10;    transform: translateY(-2px);&#10;}&#10;&#10;/* Stock Status */&#10;.stock-status {&#10;    margin-bottom: 1rem;&#10;    font-size: 0.9rem;&#10;}&#10;&#10;.in-stock {&#10;    color: var(--success);&#10;}&#10;&#10;.low-stock {&#10;    color: var(--warning);&#10;}&#10;&#10;.out-of-stock {&#10;    color: var(--danger);&#10;}&#10;&#10;/* Empty State */&#10;.empty-state {&#10;    text-align: center;&#10;    padding: 4rem 2rem;&#10;    background: var(--glass-bg);&#10;    border-radius: 16px;&#10;    border: 1px solid var(--glass-border);&#10;}&#10;&#10;.empty-state-icon {&#10;    font-size: 4rem;&#10;    color: var(--text-muted);&#10;    margin-bottom: 1rem;&#10;}&#10;&#10;.empty-state-title {&#10;    font-size: 1.5rem;&#10;    font-weight: 600;&#10;    margin-bottom: 0.5rem;&#10;    color: var(--text-primary);&#10;}&#10;&#10;.empty-state-message {&#10;    color: var(--text-secondary);&#10;    margin-bottom: 2rem;&#10;}&#10;&#10;/* Pagination */&#10;.pagination {&#10;    display: flex;&#10;    justify-content: center;&#10;    align-items: center;&#10;    gap: 0.5rem;&#10;    margin-top: 3rem;&#10;}&#10;&#10;.pagination-btn {&#10;    padding: 0.75rem 1rem;&#10;    background: var(--glass-bg);&#10;    border: 1px solid var(--glass-border);&#10;    border-radius: 8px;&#10;    color: var(--text-secondary);&#10;    text-decoration: none;&#10;    transition: all 0.3s ease;&#10;    min-width: 44px;&#10;    text-align: center;&#10;}&#10;&#10;.pagination-btn:hover,&#10;.pagination-btn.active {&#10;    background: var(--primary);&#10;    color: white;&#10;    transform: translateY(-1px);&#10;}&#10;&#10;.pagination-btn:disabled {&#10;    opacity: 0.5;&#10;    cursor: not-allowed;&#10;}&#10;&#10;/* Notification Styles */&#10;#notificationContainer {&#10;    position: fixed;&#10;    top: 100px;&#10;    right: 20px;&#10;    z-index: 10000;&#10;    pointer-events: none;&#10;}&#10;&#10;.notification {&#10;    background: var(--glass-bg);&#10;    backdrop-filter: blur(15px);&#10;    border: 1px solid var(--glass-border);&#10;    border-radius: 16px;&#10;    padding: 1.25rem 1.75rem;&#10;    color: var(--text-primary);&#10;    transform: translateX(400px);&#10;    transition: all 0.4s ease;&#10;    display: flex;&#10;    align-items: center;&#10;    gap: 0.75rem;&#10;    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.4);&#10;    margin-bottom: 1rem;&#10;    min-width: 300px;&#10;    pointer-events: auto;&#10;    position: relative;&#10;    overflow: hidden;&#10;}&#10;&#10;.notification::before {&#10;    content: '';&#10;    position: absolute;&#10;    top: 0;&#10;    left: 0;&#10;    width: 4px;&#10;    height: 100%;&#10;    background: var(--success);&#10;    transition: background 0.3s ease;&#10;}&#10;&#10;.notification.show {&#10;    transform: translateX(0);&#10;}&#10;&#10;.notification-success::before {&#10;    background: var(--success);&#10;}&#10;&#10;.notification-error::before {&#10;    background: var(--danger);&#10;}&#10;&#10;.notification i {&#10;    font-size: 1.25rem;&#10;    flex-shrink: 0;&#10;}&#10;&#10;.notification-success i {&#10;    color: var(--success);&#10;}&#10;&#10;.notification-error i {&#10;    color: var(--danger);&#10;}&#10;&#10;/* Enhanced Form Styles */&#10;.search-input,&#10;.category-select {&#10;    background: var(--glass-bg);&#10;    backdrop-filter: blur(10px);&#10;    border: 2px solid var(--glass-border);&#10;    border-radius: 16px;&#10;    color: var(--text-primary);&#10;    font-size: 1rem;&#10;    transition: all 0.3s ease;&#10;    outline: none;&#10;}&#10;&#10;.search-input:focus,&#10;.category-select:focus {&#10;    border-color: var(--primary);&#10;    box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.15);&#10;    background: rgba(255, 255, 255, 0.15);&#10;}&#10;&#10;.search-input::placeholder {&#10;    color: var(--text-muted);&#10;    font-style: italic;&#10;}&#10;&#10;/* Enhanced Button Styles */&#10;.sort-btn {&#10;    padding: 0.75rem 1.25rem;&#10;    background: var(--glass-bg);&#10;    backdrop-filter: blur(10px);&#10;    border: 2px solid var(--glass-border);&#10;    border-radius: 12px;&#10;    color: var(--text-secondary);&#10;    cursor: pointer;&#10;    transition: all 0.3s ease;&#10;    font-size: 0.9rem;&#10;    font-weight: 500;&#10;    white-space: nowrap;&#10;}&#10;&#10;.sort-btn:hover {&#10;    background: rgba(255, 255, 255, 0.15);&#10;    border-color: var(--primary);&#10;    transform: translateY(-2px);&#10;}&#10;&#10;.sort-btn.active {&#10;    background: linear-gradient(135deg, var(--primary), var(--primary-dark));&#10;    border-color: var(--primary);&#10;    color: white;&#10;    transform: translateY(-2px);&#10;    box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);&#10;}&#10;&#10;/* Enhanced Product Card Styles */&#10;.product-card {&#10;    background: var(--glass-bg);&#10;    backdrop-filter: blur(15px);&#10;    border: 2px solid var(--glass-border);&#10;    border-radius: 24px;&#10;    overflow: hidden;&#10;    transition: all 0.4s ease;&#10;    position: relative;&#10;    height: 100%;&#10;    display: flex;&#10;    flex-direction: column;&#10;    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);&#10;}&#10;&#10;.product-card:hover {&#10;    transform: translateY(-12px) scale(1.02);&#10;    box-shadow: 0 30px 60px rgba(0, 0, 0, 0.4);&#10;    border-color: var(--primary);&#10;    background: rgba(255, 255, 255, 0.15);&#10;}&#10;&#10;.product-image {&#10;    position: relative;&#10;    height: 280px;&#10;    overflow: hidden;&#10;    border-radius: 20px 20px 0 0;&#10;}&#10;&#10;.product-image img {&#10;    width: 100%;&#10;    height: 100%;&#10;    object-fit: cover;&#10;    transition: transform 0.4s ease;&#10;    border-radius: 20px 20px 0 0;&#10;}&#10;&#10;.product-card:hover .product-image img {&#10;    transform: scale(1.08);&#10;}&#10;&#10;.product-badge {&#10;    position: absolute;&#10;    top: 1.25rem;&#10;    right: 1.25rem;&#10;    background: linear-gradient(135deg, var(--danger), #ff4757);&#10;    color: white;&#10;    padding: 0.5rem 1rem;&#10;    border-radius: 25px;&#10;    font-size: 0.85rem;&#10;    font-weight: 700;&#10;    box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);&#10;    z-index: 10;&#10;}&#10;&#10;.product-badge.sale {&#10;    background: linear-gradient(135deg, var(--warning), #ffa726);&#10;    box-shadow: 0 4px 15px rgba(255, 193, 7, 0.4);&#10;}&#10;&#10;.product-badge.new {&#10;    background: linear-gradient(135deg, var(--success), #26a69a);&#10;    box-shadow: 0 4px 15px rgba(72, 187, 120, 0.4);&#10;}&#10;&#10;.product-info {&#10;    padding: 2rem;&#10;    flex: 1;&#10;    display: flex;&#10;    flex-direction: column;&#10;    background: rgba(255, 255, 255, 0.05);&#10;}&#10;&#10;.product-category {&#10;    color: var(--text-muted);&#10;    font-size: 0.85rem;&#10;    margin-bottom: 0.75rem;&#10;    text-transform: uppercase;&#10;    letter-spacing: 1px;&#10;    font-weight: 600;&#10;}&#10;&#10;.product-name {&#10;    font-size: 1.35rem;&#10;    font-weight: 700;&#10;    color: var(--text-primary);&#10;    margin-bottom: 1rem;&#10;    line-height: 1.3;&#10;    display: -webkit-box;&#10;    -webkit-line-clamp: 2;&#10;    -webkit-box-orient: vertical;&#10;    overflow: hidden;&#10;}&#10;&#10;.product-description {&#10;    color: var(--text-secondary);&#10;    font-size: 0.95rem;&#10;    line-height: 1.6;&#10;    margin-bottom: 1.5rem;&#10;    flex: 1;&#10;    display: -webkit-box;&#10;    -webkit-line-clamp: 3;&#10;    -webkit-box-orient: vertical;&#10;    overflow: hidden;&#10;}&#10;&#10;.stock-status {&#10;    margin-bottom: 1.25rem;&#10;    font-size: 0.9rem;&#10;    font-weight: 600;&#10;    display: flex;&#10;    align-items: center;&#10;    gap: 0.5rem;&#10;}&#10;&#10;.product-price {&#10;    display: flex;&#10;    align-items: center;&#10;    gap: 1rem;&#10;    margin-bottom: 2rem;&#10;    flex-wrap: wrap;&#10;}&#10;&#10;.current-price {&#10;    font-size: 1.75rem;&#10;    font-weight: 800;&#10;    color: var(--primary);&#10;    background: linear-gradient(135deg, var(--primary), var(--secondary));&#10;    -webkit-background-clip: text;&#10;    -webkit-text-fill-color: transparent;&#10;    background-clip: text;&#10;}&#10;&#10;.original-price {&#10;    font-size: 1.2rem;&#10;    color: var(--text-muted);&#10;    text-decoration: line-through;&#10;    font-weight: 500;&#10;}&#10;&#10;.discount-percent {&#10;    background: linear-gradient(135deg, var(--danger), #ff4757);&#10;    color: white;&#10;    padding: 0.4rem 0.8rem;&#10;    border-radius: 12px;&#10;    font-size: 0.8rem;&#10;    font-weight: 700;&#10;    box-shadow: 0 4px 12px rgba(255, 107, 107, 0.3);&#10;}&#10;&#10;/* Enhanced Action Buttons */&#10;.product-actions {&#10;    display: flex;&#10;    gap: 1rem;&#10;}&#10;&#10;.btn-add-cart {&#10;    flex: 1;&#10;    background: linear-gradient(135deg, var(--primary), var(--primary-dark));&#10;    color: white;&#10;    border: none;&#10;    padding: 1rem 1.5rem;&#10;    border-radius: 16px;&#10;    font-weight: 600;&#10;    font-size: 0.95rem;&#10;    cursor: pointer;&#10;    transition: all 0.3s ease;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    gap: 0.75rem;&#10;    position: relative;&#10;    overflow: hidden;&#10;}&#10;&#10;.btn-add-cart::before {&#10;    content: '';&#10;    position: absolute;&#10;    top: 0;&#10;    left: -100%;&#10;    width: 100%;&#10;    height: 100%;&#10;    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);&#10;    transition: left 0.5s;&#10;}&#10;&#10;.btn-add-cart:hover::before {&#10;    left: 100%;&#10;}&#10;&#10;.btn-add-cart:hover {&#10;    transform: translateY(-3px);&#10;    box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);&#10;    background: linear-gradient(135deg, var(--primary-dark), var(--secondary));&#10;}&#10;&#10;.btn-quick-view {&#10;    background: var(--glass-bg);&#10;    backdrop-filter: blur(10px);&#10;    border: 2px solid var(--glass-border);&#10;    color: var(--text-primary);&#10;    padding: 1rem;&#10;    border-radius: 16px;&#10;    cursor: pointer;&#10;    transition: all 0.3s ease;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    min-width: 50px;&#10;}&#10;&#10;.btn-quick-view:hover {&#10;    background: rgba(255, 255, 255, 0.15);&#10;    border-color: var(--accent);&#10;    color: var(--accent);&#10;    transform: translateY(-3px);&#10;    box-shadow: 0 10px 25px rgba(78, 205, 196, 0.3);&#10;}&#10;&#10;/* Enhanced Shop Header */&#10;.shop-header {&#10;    background: var(--glass-bg);&#10;    backdrop-filter: blur(20px);&#10;    border: 2px solid var(--glass-border);&#10;    border-radius: 32px;&#10;    padding: 3rem 2rem;&#10;    margin-bottom: 3rem;&#10;    text-align: center;&#10;    position: relative;&#10;    overflow: hidden;&#10;}&#10;&#10;.shop-header::before {&#10;    content: '';&#10;    position: absolute;&#10;    top: -50%;&#10;    left: -50%;&#10;    width: 200%;&#10;    height: 200%;&#10;    background: radial-gradient(circle, rgba(102, 126, 234, 0.1) 0%, transparent 70%);&#10;    animation: rotate 20s linear infinite;&#10;}&#10;&#10;@keyframes rotate {&#10;    from { transform: rotate(0deg); }&#10;    to { transform: rotate(360deg); }&#10;}&#10;&#10;.shop-title {&#10;    font-size: 3rem;&#10;    font-weight: 800;&#10;    margin-bottom: 1.5rem;&#10;    background: linear-gradient(135deg, var(--primary), var(--secondary), var(--accent));&#10;    -webkit-background-clip: text;&#10;    -webkit-text-fill-color: transparent;&#10;    background-clip: text;&#10;    position: relative;&#10;    z-index: 1;&#10;}&#10;&#10;.shop-subtitle {&#10;    color: var(--text-secondary);&#10;    font-size: 1.2rem;&#10;    max-width: 700px;&#10;    margin: 0 auto;&#10;    line-height: 1.6;&#10;    position: relative;&#10;    z-index: 1;&#10;}&#10;&#10;/* Enhanced Empty State */&#10;.empty-state {&#10;    text-align: center;&#10;    padding: 5rem 3rem;&#10;    background: var(--glass-bg);&#10;    backdrop-filter: blur(15px);&#10;    border-radius: 32px;&#10;    border: 2px solid var(--glass-border);&#10;    grid-column: 1 / -1;&#10;}&#10;&#10;.empty-state-icon {&#10;    font-size: 5rem;&#10;    color: var(--text-muted);&#10;    margin-bottom: 2rem;&#10;    opacity: 0.7;&#10;}&#10;&#10;.empty-state-title {&#10;    font-size: 2rem;&#10;    font-weight: 700;&#10;    margin-bottom: 1rem;&#10;    color: var(--text-primary);&#10;}&#10;&#10;.empty-state-message {&#10;    color: var(--text-secondary);&#10;    margin-bottom: 3rem;&#10;    font-size: 1.1rem;&#10;    line-height: 1.5;&#10;}&#10;&#10;/* Responsive Improvements */&#10;@media (max-width: 768px) {&#10;    .shop-controls {&#10;        grid-template-columns: 1fr;&#10;        gap: 1.5rem;&#10;    }&#10;&#10;    .sort-options {&#10;        justify-content: center;&#10;        flex-wrap: wrap;&#10;    }&#10;&#10;    .products-grid {&#10;        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));&#10;        gap: 2rem;&#10;    }&#10;&#10;    .product-actions {&#10;        flex-direction: column;&#10;        gap: 1rem;&#10;    }&#10;&#10;    .shop-title {&#10;        font-size: 2.5rem;&#10;    }&#10;&#10;    .shop-header {&#10;        padding: 2.5rem 1.5rem;&#10;        border-radius: 24px;&#10;    }&#10;&#10;    .product-card {&#10;        border-radius: 20px;&#10;    }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;    .products-grid {&#10;        grid-template-columns: 1fr;&#10;        gap: 1.5rem;&#10;    }&#10;&#10;    .product-card {&#10;        margin: 0 auto;&#10;        max-width: 380px;&#10;        border-radius: 20px;&#10;    }&#10;&#10;    .shop-title {&#10;        font-size: 2rem;&#10;    }&#10;&#10;    .container {&#10;        padding: 0 1rem;&#10;    }&#10;&#10;    .notification {&#10;        right: 10px;&#10;        left: 10px;&#10;        transform: translateY(-100px);&#10;        min-width: auto;&#10;    }&#10;&#10;    .notification.show {&#10;        transform: translateY(0);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/webapp/order/checkout.jsp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/webapp/order/checkout.jsp" />
              <option name="originalContent" value="&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;&#10;&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;&#10;&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&gt;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Thanh toán - GoMsu Store&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;${pageContext.request.contextPath}/css/style.css&quot;&gt;&#10;    &lt;style&gt;&#10;        .checkout-container {&#10;            display: grid;&#10;            grid-template-columns: 1fr 400px;&#10;            gap: 2rem;&#10;            max-width: 1200px;&#10;            margin: 0 auto;&#10;            padding: 2rem;&#10;        }&#10;&#10;        .checkout-form {&#10;            background: var(--white);&#10;            border-radius: var(--radius-lg);&#10;            padding: 2rem;&#10;            box-shadow: var(--shadow-md);&#10;        }&#10;&#10;        .order-summary {&#10;            background: var(--white);&#10;            border-radius: var(--radius-lg);&#10;            padding: 2rem;&#10;            box-shadow: var(--shadow-md);&#10;            height: fit-content;&#10;            position: sticky;&#10;            top: 2rem;&#10;        }&#10;&#10;        .form-section {&#10;            margin-bottom: 2rem;&#10;            padding-bottom: 2rem;&#10;            border-bottom: 1px solid var(--gray-light);&#10;        }&#10;&#10;        .form-section:last-child {&#10;            border-bottom: none;&#10;            margin-bottom: 0;&#10;        }&#10;&#10;        .form-section h3 {&#10;            color: var(--dark);&#10;            margin-bottom: 1rem;&#10;            font-size: 1.2rem;&#10;            font-weight: 600;&#10;        }&#10;&#10;        .form-row {&#10;            display: grid;&#10;            grid-template-columns: 1fr 1fr;&#10;            gap: 1rem;&#10;        }&#10;&#10;        .order-item {&#10;            display: flex;&#10;            align-items: flex-start;&#10;            padding: 1.5rem 0;&#10;            border-bottom: 1px solid var(--gray-light);&#10;            gap: 1rem;&#10;        }&#10;&#10;        .order-item:last-child {&#10;            border-bottom: none;&#10;        }&#10;&#10;        .item-image {&#10;            width: 80px;&#10;            height: 80px;&#10;            border-radius: var(--radius-md);&#10;            overflow: hidden;&#10;            flex-shrink: 0;&#10;            box-shadow: var(--shadow-sm);&#10;        }&#10;&#10;        .item-image img {&#10;            width: 100%;&#10;            height: 100%;&#10;            object-fit: cover;&#10;            transition: transform 0.2s ease;&#10;        }&#10;&#10;        .item-image:hover img {&#10;            transform: scale(1.05);&#10;        }&#10;&#10;        .item-info {&#10;            flex: 1;&#10;            display: flex;&#10;            flex-direction: column;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .item-name {&#10;            font-weight: 600;&#10;            color: var(--dark);&#10;            font-size: 1rem;&#10;            line-height: 1.3;&#10;        }&#10;&#10;        .item-category {&#10;            color: var(--gray);&#10;            font-size: 0.85rem;&#10;            text-transform: uppercase;&#10;            letter-spacing: 0.5px;&#10;        }&#10;&#10;        .item-price {&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;            flex-wrap: wrap;&#10;        }&#10;&#10;        .current-price {&#10;            color: var(--primary);&#10;            font-weight: 600;&#10;            font-size: 0.95rem;&#10;        }&#10;&#10;        .original-price {&#10;            color: var(--gray);&#10;            text-decoration: line-through;&#10;            font-size: 0.85rem;&#10;        }&#10;&#10;        .item-quantity {&#10;            color: var(--primary);&#10;            font-weight: 600;&#10;            background: rgba(0, 122, 255, 0.1);&#10;            padding: 0.2rem 0.5rem;&#10;            border-radius: var(--radius-sm);&#10;            font-size: 0.85rem;&#10;        }&#10;&#10;        .item-total {&#10;            display: flex;&#10;            justify-content: space-between;&#10;            align-items: center;&#10;            padding: 0.5rem 0;&#10;            border-top: 1px dashed var(--gray-light);&#10;            margin-top: 0.5rem;&#10;        }&#10;&#10;        .total-label {&#10;            color: var(--gray);&#10;            font-size: 0.85rem;&#10;            font-weight: 500;&#10;        }&#10;&#10;        .total-value {&#10;            color: var(--dark);&#10;            font-weight: 700;&#10;            font-size: 1rem;&#10;        }&#10;&#10;        .order-summary h3 {&#10;            color: var(--dark);&#10;            margin-bottom: 1.5rem;&#10;            font-size: 1.3rem;&#10;            font-weight: 700;&#10;            border-bottom: 2px solid var(--primary);&#10;            padding-bottom: 0.5rem;&#10;        }&#10;&#10;        .order-items {&#10;            max-height: 400px;&#10;            overflow-y: auto;&#10;            margin-bottom: 1rem;&#10;        }&#10;&#10;        .order-items::-webkit-scrollbar {&#10;            width: 6px;&#10;        }&#10;&#10;        .order-items::-webkit-scrollbar-track {&#10;            background: var(--gray-light);&#10;            border-radius: 3px;&#10;        }&#10;&#10;        .order-items::-webkit-scrollbar-thumb {&#10;            background: var(--primary);&#10;            border-radius: 3px;&#10;        }&#10;&#10;        .total-section {&#10;            margin-top: 1.5rem;&#10;            padding-top: 1.5rem;&#10;            border-top: 2px solid var(--gray-light);&#10;        }&#10;&#10;        .total-row {&#10;            display: flex;&#10;            justify-content: space-between;&#10;            margin-bottom: 0.5rem;&#10;        }&#10;&#10;        .total-final {&#10;            font-size: 1.2rem;&#10;            font-weight: 700;&#10;            color: var(--primary);&#10;        }&#10;&#10;        .payment-methods {&#10;            display: grid;&#10;            gap: 1rem;&#10;        }&#10;&#10;        .payment-option {&#10;            display: flex;&#10;            align-items: center;&#10;            padding: 1rem;&#10;            border: 2px solid var(--gray-light);&#10;            border-radius: var(--radius);&#10;            cursor: pointer;&#10;            transition: all 0.3s ease;&#10;        }&#10;&#10;        .payment-option:hover {&#10;            border-color: var(--primary);&#10;            background: rgba(0, 122, 255, 0.05);&#10;        }&#10;&#10;        .payment-option input[type=&quot;radio&quot;] {&#10;            margin-right: 1rem;&#10;        }&#10;&#10;        .payment-option.selected {&#10;            border-color: var(--primary);&#10;            background: rgba(0, 122, 255, 0.1);&#10;        }&#10;&#10;        .alert {&#10;            padding: 1rem;&#10;            margin-bottom: 1rem;&#10;            border-radius: var(--radius);&#10;            font-weight: 500;&#10;        }&#10;&#10;        .alert-danger {&#10;            background: rgba(255, 59, 48, 0.1);&#10;            color: var(--danger);&#10;            border: 1px solid rgba(255, 59, 48, 0.2);&#10;        }&#10;&#10;        @media (max-width: 768px) {&#10;            .checkout-container {&#10;                grid-template-columns: 1fr;&#10;                gap: 1rem;&#10;                padding: 1rem;&#10;            }&#10;&#10;            .form-row {&#10;                grid-template-columns: 1fr;&#10;            }&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;header&quot;&gt;&#10;        &lt;h1&gt; Thanh toán&lt;/h1&gt;&#10;        &lt;p&gt;Hoàn tất đơn hàng của bạn&lt;/p&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;c:if test=&quot;${not empty error}&quot;&gt;&#10;        &lt;div class=&quot;alert alert-danger&quot;&gt;&#10;            ${error}&#10;        &lt;/div&gt;&#10;    &lt;/c:if&gt;&#10;&#10;    &lt;div class=&quot;checkout-container&quot;&gt;&#10;        &lt;!-- Checkout Form --&gt;&#10;        &lt;div class=&quot;checkout-form&quot;&gt;&#10;            &lt;form method=&quot;post&quot; action=&quot;${pageContext.request.contextPath}/checkout&quot;&gt;&#10;                &lt;!-- Customer Information --&gt;&#10;                &lt;div class=&quot;form-section&quot;&gt;&#10;                    &lt;h3&gt; Thông tin khách hàng&lt;/h3&gt;&#10;                    &lt;div class=&quot;form-row&quot;&gt;&#10;                        &lt;div class=&quot;form-group&quot;&gt;&#10;                            &lt;label class=&quot;form-label&quot; for=&quot;customerName&quot;&gt;Họ và tên *&lt;/label&gt;&#10;                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;customerName&quot; name=&quot;customerName&quot;&#10;                                   value=&quot;${sessionScope.user.fullName}&quot; required&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;form-group&quot;&gt;&#10;                            &lt;label class=&quot;form-label&quot; for=&quot;phoneNumber&quot;&gt;Số điện thoại *&lt;/label&gt;&#10;                            &lt;input type=&quot;tel&quot; class=&quot;form-control&quot; id=&quot;phoneNumber&quot; name=&quot;phoneNumber&quot;&#10;                                   value=&quot;${sessionScope.user.phoneNumber}&quot; required&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;!-- Shipping Information --&gt;&#10;                &lt;div class=&quot;form-section&quot;&gt;&#10;                    &lt;h3&gt; Thông tin giao hàng&lt;/h3&gt;&#10;                    &lt;div class=&quot;form-group&quot;&gt;&#10;                        &lt;label class=&quot;form-label&quot; for=&quot;shippingAddress&quot;&gt;Địa chỉ giao hàng *&lt;/label&gt;&#10;                        &lt;textarea class=&quot;form-control&quot; id=&quot;shippingAddress&quot; name=&quot;shippingAddress&quot;&#10;                                  rows=&quot;3&quot; required placeholder=&quot;Nhập địa chỉ chi tiết...&quot;&gt;&lt;/textarea&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;form-group&quot;&gt;&#10;                        &lt;label class=&quot;form-label&quot; for=&quot;note&quot;&gt;Ghi chú&lt;/label&gt;&#10;                        &lt;textarea class=&quot;form-control&quot; id=&quot;note&quot; name=&quot;note&quot;&#10;                                  rows=&quot;2&quot; placeholder=&quot;Ghi chú đặc biệt cho đơn hàng...&quot;&gt;&lt;/textarea&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;!-- Payment Method --&gt;&#10;                &lt;div class=&quot;form-section&quot;&gt;&#10;                    &lt;h3&gt; Phương thức thanh toán&lt;/h3&gt;&#10;                    &lt;div class=&quot;payment-methods&quot;&gt;&#10;                        &lt;label class=&quot;payment-option&quot;&gt;&#10;                            &lt;input type=&quot;radio&quot; name=&quot;paymentMethod&quot; value=&quot;on_delivery&quot; checked&gt;&#10;                            &lt;div&gt;&#10;                                &lt;div style=&quot;font-weight: 600;&quot;&gt; Thanh toán khi nhận hàng&lt;/div&gt;&#10;                                &lt;div style=&quot;color: var(--gray); font-size: 0.9rem;&quot;&gt;Thanh toán bằng tiền mặt khi nhận hàng&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/label&gt;&#10;                        &lt;label class=&quot;payment-option&quot;&gt;&#10;                            &lt;input type=&quot;radio&quot; name=&quot;paymentMethod&quot; value=&quot;online&quot;&gt;&#10;                            &lt;div&gt;&#10;                                &lt;div style=&quot;font-weight: 600;&quot;&gt; Chuyển khoản ngân hàng&lt;/div&gt;&#10;                                &lt;div style=&quot;color: var(--gray); font-size: 0.9rem;&quot;&gt;Thanh toán qua chuyển khoản&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/label&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot; style=&quot;width: 100%; padding: 1rem; font-size: 1.1rem;&quot;&gt;&#10;                     Đặt hàng ngay&#10;                &lt;/button&gt;&#10;            &lt;/form&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Order Summary --&gt;&#10;        &lt;div class=&quot;order-summary&quot;&gt;&#10;            &lt;h3&gt; Đơn hàng của bạn&lt;/h3&gt;&#10;&#10;            &lt;div class=&quot;order-items&quot;&gt;&#10;                &lt;c:forEach items=&quot;${cartItems}&quot; var=&quot;item&quot;&gt;&#10;                    &lt;div class=&quot;order-item&quot;&gt;&#10;                        &lt;div class=&quot;item-image&quot;&gt;&#10;                            &lt;c:choose&gt;&#10;                                &lt;c:when test=&quot;${not empty item.product.imageUrl}&quot;&gt;&#10;                                    &lt;img src=&quot;${item.product.imageUrl}&quot; alt=&quot;${item.product.name}&quot;&gt;&#10;                                &lt;/c:when&gt;&#10;                                &lt;c:otherwise&gt;&#10;                                    &lt;img src=&quot;${pageContext.request.contextPath}/images/default-product.jpg&quot; alt=&quot;Default&quot;&gt;&#10;                                &lt;/c:otherwise&gt;&#10;                            &lt;/c:choose&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;item-info&quot;&gt;&#10;                            &lt;div class=&quot;item-name&quot;&gt;${item.product.name}&lt;/div&gt;&#10;                            &lt;div class=&quot;item-category&quot;&gt;${item.product.categoryName}&lt;/div&gt;&#10;                            &lt;div class=&quot;item-price&quot;&gt;&#10;                                &lt;c:choose&gt;&#10;                                    &lt;c:when test=&quot;${item.product.discount != null &amp;&amp; item.product.discount &gt; 0}&quot;&gt;&#10;                                        &lt;span class=&quot;current-price&quot;&gt;&#10;                                            &lt;fmt:formatNumber value=&quot;${item.product.price * (1 - item.product.discount/100)}&quot;&#10;                                                            type=&quot;currency&quot; currencySymbol=&quot;₫&quot; groupingUsed=&quot;true&quot;/&gt;&#10;                                        &lt;/span&gt;&#10;                                        &lt;span class=&quot;original-price&quot;&gt;&#10;                                            &lt;fmt:formatNumber value=&quot;${item.product.price}&quot;&#10;                                                            type=&quot;currency&quot; currencySymbol=&quot;₫&quot; groupingUsed=&quot;true&quot;/&gt;&#10;                                        &lt;/span&gt;&#10;                                    &lt;/c:when&gt;&#10;                                    &lt;c:otherwise&gt;&#10;                                        &lt;span class=&quot;current-price&quot;&gt;&#10;                                            &lt;fmt:formatNumber value=&quot;${item.product.price}&quot;&#10;                                                            type=&quot;currency&quot; currencySymbol=&quot;₫&quot; groupingUsed=&quot;true&quot;/&gt;&#10;                                        &lt;/span&gt;&#10;                                    &lt;/c:otherwise&gt;&#10;                                &lt;/c:choose&gt;&#10;                                &lt;span class=&quot;item-quantity&quot;&gt;x${item.quantity}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;item-total&quot;&gt;&#10;                                &lt;c:set var=&quot;itemPrice&quot; value=&quot;${item.product.discount != null &amp;&amp; item.product.discount &gt; 0 ?&#10;                                    item.product.price * (1 - item.product.discount/100) : item.product.price}&quot; /&gt;&#10;                                &lt;span class=&quot;total-label&quot;&gt;Thành tiền:&lt;/span&gt;&#10;                                &lt;span class=&quot;total-value&quot;&gt;&#10;                                    &lt;fmt:formatNumber value=&quot;${itemPrice * item.quantity}&quot;&#10;                                                    type=&quot;currency&quot; currencySymbol=&quot;₫&quot; groupingUsed=&quot;true&quot;/&gt;&#10;                                &lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/c:forEach&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;total-section&quot;&gt;&#10;                &lt;div class=&quot;total-row&quot;&gt;&#10;                    &lt;span&gt;Tạm tính:&lt;/span&gt;&#10;                    &lt;span&gt;&lt;fmt:formatNumber value=&quot;${total}&quot; type=&quot;currency&quot; currencySymbol=&quot;₫&quot; groupingUsed=&quot;true&quot;/&gt;&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;total-row&quot;&gt;&#10;                    &lt;span&gt;Phí vận chuyển:&lt;/span&gt;&#10;                    &lt;span&gt;Miễn phí&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;total-row total-final&quot;&gt;&#10;                    &lt;span&gt;Tổng cộng:&lt;/span&gt;&#10;                    &lt;span&gt;&lt;fmt:formatNumber value=&quot;${total}&quot; type=&quot;currency&quot; currencySymbol=&quot;₫&quot; groupingUsed=&quot;true&quot;/&gt;&lt;/span&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script&gt;&#10;        // Payment method selection&#10;        document.querySelectorAll('.payment-option').forEach(option =&gt; {&#10;            option.addEventListener('click', function() {&#10;                document.querySelectorAll('.payment-option').forEach(opt =&gt; opt.classList.remove('selected'));&#10;                this.classList.add('selected');&#10;            });&#10;        });&#10;&#10;        // Form validation&#10;        document.querySelector('form').addEventListener('submit', function(e) {&#10;            const requiredFields = this.querySelectorAll('[required]');&#10;            let isValid = true;&#10;&#10;            requiredFields.forEach(field =&gt; {&#10;                if (!field.value.trim()) {&#10;                    field.style.borderColor = 'var(--danger)';&#10;                    isValid = false;&#10;                } else {&#10;                    field.style.borderColor = 'var(--gray-light)';&#10;                }&#10;            });&#10;&#10;            if (!isValid) {&#10;                e.preventDefault();&#10;                alert('Vui lòng điền đầy đủ thông tin bắt buộc!');&#10;            }&#10;        });&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;&#10;&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;&#10;&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&gt;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Thanh toán - GoMsu Store&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;${pageContext.request.contextPath}/css/style.css&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot;&gt;&#10;    &lt;style&gt;&#10;        :root {&#10;            --primary: #667eea;&#10;            --primary-dark: #5a67d8;&#10;            --secondary: #f093fb;&#10;            --accent: #4ecdc4;&#10;            --success: #48bb78;&#10;            --warning: #ed8936;&#10;            --danger: #f56565;&#10;            --dark: #1a202c;&#10;            --light: #2d3748;&#10;            --glass-bg: rgba(255, 255, 255, 0.1);&#10;            --glass-border: rgba(255, 255, 255, 0.2);&#10;            --text-primary: #ffffff;&#10;            --text-secondary: #e2e8f0;&#10;            --text-muted: #a0aec0;&#10;            --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.3);&#10;            --shadow-md: 0 4px 16px rgba(0, 0, 0, 0.4);&#10;            --shadow-lg: 0 8px 32px rgba(0, 0, 0, 0.5);&#10;            --radius: 8px;&#10;            --radius-md: 12px;&#10;            --radius-lg: 16px;&#10;            --radius-xl: 20px;&#10;        }&#10;&#10;        body {&#10;            font-family: 'Inter', sans-serif;&#10;            background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);&#10;            background-attachment: fixed;&#10;            min-height: 100vh;&#10;            margin: 0;&#10;            padding: 0;&#10;            color: var(--text-primary);&#10;            overflow-x: hidden;&#10;        }&#10;&#10;        .navbar {&#10;            background: rgba(26, 32, 44, 0.95);&#10;            backdrop-filter: blur(10px);&#10;            border-bottom: 1px solid var(--glass-border);&#10;            padding: 1rem 0;&#10;            position: fixed;&#10;            top: 0;&#10;            left: 0;&#10;            right: 0;&#10;            z-index: 1000;&#10;            transition: all 0.3s ease;&#10;        }&#10;&#10;        .navbar-container {&#10;            max-width: 1200px;&#10;            margin: 0 auto;&#10;            padding: 0 2rem;&#10;            display: flex;&#10;            justify-content: space-between;&#10;            align-items: center;&#10;        }&#10;&#10;        .navbar-brand {&#10;            font-size: 1.5rem;&#10;            font-weight: 700;&#10;            color: var(--primary);&#10;            text-decoration: none;&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .header {&#10;            text-align: center;&#10;            margin: 120px 0 3rem 0;&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(20px);&#10;            padding: 2rem;&#10;            border-radius: var(--radius-xl);&#10;            border: 1px solid var(--glass-border);&#10;            max-width: 1200px;&#10;            margin-left: auto;&#10;            margin-right: auto;&#10;            margin-top: 120px;&#10;            margin-bottom: 3rem;&#10;        }&#10;&#10;        .header h1 {&#10;            font-size: 2.5rem;&#10;            font-weight: 700;&#10;            margin-bottom: 1rem;&#10;            background: linear-gradient(135deg, var(--primary), var(--secondary));&#10;            -webkit-background-clip: text;&#10;            -webkit-text-fill-color: transparent;&#10;            background-clip: text;&#10;        }&#10;&#10;        .header p {&#10;            color: var(--text-secondary);&#10;            font-size: 1.1rem;&#10;        }&#10;&#10;        .checkout-container {&#10;            display: grid;&#10;            grid-template-columns: 1fr 450px;&#10;            gap: 2rem;&#10;            max-width: 1200px;&#10;            margin: 0 auto;&#10;            padding: 0 2rem 2rem 2rem;&#10;        }&#10;&#10;        .checkout-form {&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(20px);&#10;            border-radius: var(--radius-xl);&#10;            border: 1px solid var(--glass-border);&#10;            padding: 2rem;&#10;            box-shadow: var(--shadow-md);&#10;        }&#10;&#10;        .order-summary {&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(20px);&#10;            border-radius: var(--radius-xl);&#10;            border: 1px solid var(--glass-border);&#10;            padding: 2rem;&#10;            box-shadow: var(--shadow-md);&#10;            height: fit-content;&#10;            position: sticky;&#10;            top: 120px;&#10;        }&#10;&#10;        .form-section {&#10;            margin-bottom: 2rem;&#10;            padding-bottom: 2rem;&#10;            border-bottom: 1px solid var(--glass-border);&#10;        }&#10;&#10;        .form-section:last-child {&#10;            border-bottom: none;&#10;            margin-bottom: 0;&#10;        }&#10;&#10;        .form-section h3 {&#10;            color: var(--text-primary);&#10;            margin-bottom: 1.5rem;&#10;            font-size: 1.3rem;&#10;            font-weight: 700;&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .form-row {&#10;            display: grid;&#10;            grid-template-columns: 1fr 1fr;&#10;            gap: 1rem;&#10;        }&#10;&#10;        .form-group {&#10;            margin-bottom: 1rem;&#10;        }&#10;&#10;        .form-label {&#10;            display: block;&#10;            margin-bottom: 0.5rem;&#10;            color: var(--text-secondary);&#10;            font-weight: 500;&#10;            font-size: 0.9rem;&#10;        }&#10;&#10;        .form-control {&#10;            width: 100%;&#10;            padding: 0.75rem 1rem;&#10;            background: var(--glass-bg);&#10;            border: 1px solid var(--glass-border);&#10;            border-radius: var(--radius);&#10;            color: var(--text-primary);&#10;            font-size: 1rem;&#10;            transition: all 0.3s ease;&#10;            box-sizing: border-box;&#10;        }&#10;&#10;        .form-control:focus {&#10;            outline: none;&#10;            border-color: var(--primary);&#10;            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);&#10;            background: rgba(255, 255, 255, 0.15);&#10;        }&#10;&#10;        .form-control::placeholder {&#10;            color: var(--text-muted);&#10;        }&#10;&#10;        textarea.form-control {&#10;            resize: vertical;&#10;            min-height: 80px;&#10;        }&#10;&#10;        .order-summary h3 {&#10;            color: var(--text-primary);&#10;            margin-bottom: 1.5rem;&#10;            font-size: 1.3rem;&#10;            font-weight: 700;&#10;            text-align: center;&#10;            padding-bottom: 1rem;&#10;            border-bottom: 2px solid var(--primary);&#10;        }&#10;&#10;        .order-items {&#10;            max-height: 400px;&#10;            overflow-y: auto;&#10;            margin-bottom: 1.5rem;&#10;        }&#10;&#10;        .order-items::-webkit-scrollbar {&#10;            width: 6px;&#10;        }&#10;&#10;        .order-items::-webkit-scrollbar-track {&#10;            background: var(--glass-bg);&#10;            border-radius: 3px;&#10;        }&#10;&#10;        .order-items::-webkit-scrollbar-thumb {&#10;            background: var(--primary);&#10;            border-radius: 3px;&#10;        }&#10;&#10;        .order-item {&#10;            display: flex;&#10;            align-items: flex-start;&#10;            padding: 1.5rem 0;&#10;            border-bottom: 1px solid var(--glass-border);&#10;            gap: 1rem;&#10;        }&#10;&#10;        .order-item:last-child {&#10;            border-bottom: none;&#10;        }&#10;&#10;        .item-image {&#10;            width: 80px;&#10;            height: 80px;&#10;            border-radius: var(--radius-md);&#10;            overflow: hidden;&#10;            flex-shrink: 0;&#10;            box-shadow: var(--shadow-sm);&#10;        }&#10;&#10;        .item-image img {&#10;            width: 100%;&#10;            height: 100%;&#10;            object-fit: cover;&#10;            transition: transform 0.2s ease;&#10;        }&#10;&#10;        .item-image:hover img {&#10;            transform: scale(1.05);&#10;        }&#10;&#10;        .item-info {&#10;            flex: 1;&#10;            display: flex;&#10;            flex-direction: column;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .item-name {&#10;            font-weight: 600;&#10;            color: var(--text-primary);&#10;            font-size: 1rem;&#10;            line-height: 1.3;&#10;        }&#10;&#10;        .item-category {&#10;            color: var(--text-muted);&#10;            font-size: 0.85rem;&#10;            text-transform: uppercase;&#10;            letter-spacing: 0.5px;&#10;        }&#10;&#10;        .item-price {&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;            flex-wrap: wrap;&#10;        }&#10;&#10;        .current-price {&#10;            color: var(--primary);&#10;            font-weight: 600;&#10;            font-size: 0.95rem;&#10;        }&#10;&#10;        .original-price {&#10;            color: var(--text-muted);&#10;            text-decoration: line-through;&#10;            font-size: 0.85rem;&#10;        }&#10;&#10;        .item-quantity {&#10;            color: var(--primary);&#10;            font-weight: 600;&#10;            background: rgba(102, 126, 234, 0.2);&#10;            padding: 0.2rem 0.5rem;&#10;            border-radius: var(--radius-sm);&#10;            font-size: 0.85rem;&#10;        }&#10;&#10;        .item-total {&#10;            display: flex;&#10;            justify-content: space-between;&#10;            align-items: center;&#10;            padding: 0.5rem 0;&#10;            border-top: 1px dashed var(--glass-border);&#10;            margin-top: 0.5rem;&#10;        }&#10;&#10;        .total-label {&#10;            color: var(--text-muted);&#10;            font-size: 0.85rem;&#10;            font-weight: 500;&#10;        }&#10;&#10;        .total-value {&#10;            color: var(--text-primary);&#10;            font-weight: 700;&#10;            font-size: 1rem;&#10;        }&#10;&#10;        .total-section {&#10;            margin-top: 1.5rem;&#10;            padding-top: 1.5rem;&#10;            border-top: 2px solid var(--glass-border);&#10;        }&#10;&#10;        .total-row {&#10;            display: flex;&#10;            justify-content: space-between;&#10;            margin-bottom: 0.75rem;&#10;            padding: 0.5rem 0;&#10;        }&#10;&#10;        .total-row:last-child {&#10;            margin-top: 1rem;&#10;            padding-top: 1rem;&#10;            border-top: 1px solid var(--glass-border);&#10;            font-size: 1.2rem;&#10;            font-weight: 700;&#10;        }&#10;&#10;        .total-row span:first-child {&#10;            color: var(--text-secondary);&#10;        }&#10;&#10;        .total-row span:last-child {&#10;            color: var(--text-primary);&#10;            font-weight: 600;&#10;        }&#10;&#10;        .total-row:last-child span {&#10;            color: var(--primary);&#10;            font-weight: 700;&#10;        }&#10;&#10;        .payment-methods {&#10;            display: grid;&#10;            gap: 1rem;&#10;            margin-top: 1rem;&#10;        }&#10;&#10;        .payment-option {&#10;            display: flex;&#10;            align-items: center;&#10;            padding: 1rem;&#10;            border: 2px solid var(--glass-border);&#10;            border-radius: var(--radius-lg);&#10;            cursor: pointer;&#10;            transition: all 0.3s ease;&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(10px);&#10;        }&#10;&#10;        .payment-option:hover {&#10;            border-color: var(--primary);&#10;            background: rgba(102, 126, 234, 0.1);&#10;            transform: translateY(-2px);&#10;        }&#10;&#10;        .payment-option.selected {&#10;            border-color: var(--primary);&#10;            background: rgba(102, 126, 234, 0.2);&#10;            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);&#10;        }&#10;&#10;        .payment-option input[type=&quot;radio&quot;] {&#10;            margin-right: 1rem;&#10;            width: 20px;&#10;            height: 20px;&#10;            accent-color: var(--primary);&#10;        }&#10;&#10;        .payment-option div {&#10;            flex: 1;&#10;        }&#10;&#10;        .payment-option div div:first-child {&#10;            font-weight: 600;&#10;            color: var(--text-primary);&#10;            margin-bottom: 0.25rem;&#10;        }&#10;&#10;        .payment-option div div:last-child {&#10;            color: var(--text-muted);&#10;            font-size: 0.9rem;&#10;        }&#10;&#10;        .submit-btn {&#10;            width: 100%;&#10;            background: linear-gradient(135deg, var(--primary), var(--primary-dark));&#10;            color: white;&#10;            border: none;&#10;            padding: 1rem 2rem;&#10;            border-radius: var(--radius-lg);&#10;            font-size: 1.1rem;&#10;            font-weight: 600;&#10;            cursor: pointer;&#10;            margin-top: 1.5rem;&#10;            transition: all 0.3s ease;&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .submit-btn:hover {&#10;            transform: translateY(-2px);&#10;            box-shadow: var(--shadow-lg);&#10;        }&#10;&#10;        .alert {&#10;            padding: 1rem 1.5rem;&#10;            margin-bottom: 1.5rem;&#10;            border-radius: var(--radius-lg);&#10;            font-weight: 500;&#10;            border: 1px solid;&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .alert-danger {&#10;            background: rgba(245, 101, 101, 0.1);&#10;            color: var(--danger);&#10;            border-color: rgba(245, 101, 101, 0.3);&#10;        }&#10;&#10;        .alert-success {&#10;            background: rgba(72, 187, 120, 0.1);&#10;            color: var(--success);&#10;            border-color: rgba(72, 187, 120, 0.3);&#10;        }&#10;&#10;        /* Responsive */&#10;        @media (max-width: 768px) {&#10;            .checkout-container {&#10;                grid-template-columns: 1fr;&#10;                gap: 1rem;&#10;                padding: 0 1rem 1rem 1rem;&#10;            }&#10;&#10;            .form-row {&#10;                grid-template-columns: 1fr;&#10;            }&#10;&#10;            .header {&#10;                margin-top: 100px;&#10;                padding: 1.5rem;&#10;            }&#10;&#10;            .header h1 {&#10;                font-size: 2rem;&#10;            }&#10;&#10;            .order-summary {&#10;                position: static;&#10;                top: auto;&#10;            }&#10;        }&#10;&#10;        /* Loading animation */&#10;        .loading {&#10;            position: relative;&#10;            pointer-events: none;&#10;        }&#10;&#10;        .loading::after {&#10;            content: '';&#10;            position: absolute;&#10;            top: 50%;&#10;            left: 50%;&#10;            width: 20px;&#10;            height: 20px;&#10;            margin: -10px 0 0 -10px;&#10;            border: 2px solid transparent;&#10;            border-top: 2px solid white;&#10;            border-radius: 50%;&#10;            animation: spin 1s linear infinite;&#10;        }&#10;&#10;        @keyframes spin {&#10;            0% { transform: rotate(0deg); }&#10;            100% { transform: rotate(360deg); }&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;header&quot;&gt;&#10;        &lt;h1&gt; Thanh toán&lt;/h1&gt;&#10;        &lt;p&gt;Hoàn tất đơn hàng của bạn&lt;/p&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;c:if test=&quot;${not empty error}&quot;&gt;&#10;        &lt;div class=&quot;alert alert-danger&quot;&gt;&#10;            ${error}&#10;        &lt;/div&gt;&#10;    &lt;/c:if&gt;&#10;&#10;    &lt;div class=&quot;checkout-container&quot;&gt;&#10;        &lt;!-- Checkout Form --&gt;&#10;        &lt;div class=&quot;checkout-form&quot;&gt;&#10;            &lt;form method=&quot;post&quot; action=&quot;${pageContext.request.contextPath}/checkout&quot;&gt;&#10;                &lt;!-- Customer Information --&gt;&#10;                &lt;div class=&quot;form-section&quot;&gt;&#10;                    &lt;h3&gt; Thông tin khách hàng&lt;/h3&gt;&#10;                    &lt;div class=&quot;form-row&quot;&gt;&#10;                        &lt;div class=&quot;form-group&quot;&gt;&#10;                            &lt;label class=&quot;form-label&quot; for=&quot;customerName&quot;&gt;Họ và tên *&lt;/label&gt;&#10;                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;customerName&quot; name=&quot;customerName&quot;&#10;                                   value=&quot;${sessionScope.user.fullName}&quot; required&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;form-group&quot;&gt;&#10;                            &lt;label class=&quot;form-label&quot; for=&quot;phoneNumber&quot;&gt;Số điện thoại *&lt;/label&gt;&#10;                            &lt;input type=&quot;tel&quot; class=&quot;form-control&quot; id=&quot;phoneNumber&quot; name=&quot;phoneNumber&quot;&#10;                                   value=&quot;${sessionScope.user.phoneNumber}&quot; required&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;!-- Shipping Information --&gt;&#10;                &lt;div class=&quot;form-section&quot;&gt;&#10;                    &lt;h3&gt; Thông tin giao hàng&lt;/h3&gt;&#10;                    &lt;div class=&quot;form-group&quot;&gt;&#10;                        &lt;label class=&quot;form-label&quot; for=&quot;shippingAddress&quot;&gt;Địa chỉ giao hàng *&lt;/label&gt;&#10;                        &lt;textarea class=&quot;form-control&quot; id=&quot;shippingAddress&quot; name=&quot;shippingAddress&quot;&#10;                                  rows=&quot;3&quot; required placeholder=&quot;Nhập địa chỉ chi tiết...&quot;&gt;&lt;/textarea&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;form-group&quot;&gt;&#10;                        &lt;label class=&quot;form-label&quot; for=&quot;note&quot;&gt;Ghi chú&lt;/label&gt;&#10;                        &lt;textarea class=&quot;form-control&quot; id=&quot;note&quot; name=&quot;note&quot;&#10;                                  rows=&quot;2&quot; placeholder=&quot;Ghi chú đặc biệt cho đơn hàng...&quot;&gt;&lt;/textarea&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;!-- Payment Method --&gt;&#10;                &lt;div class=&quot;form-section&quot;&gt;&#10;                    &lt;h3&gt; Phương thức thanh toán&lt;/h3&gt;&#10;                    &lt;div class=&quot;payment-methods&quot;&gt;&#10;                        &lt;label class=&quot;payment-option&quot;&gt;&#10;                            &lt;input type=&quot;radio&quot; name=&quot;paymentMethod&quot; value=&quot;on_delivery&quot; checked&gt;&#10;                            &lt;div&gt;&#10;                                &lt;div style=&quot;font-weight: 600;&quot;&gt; Thanh toán khi nhận hàng&lt;/div&gt;&#10;                                &lt;div style=&quot;color: var(--gray); font-size: 0.9rem;&quot;&gt;Thanh toán bằng tiền mặt khi nhận hàng&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/label&gt;&#10;                        &lt;label class=&quot;payment-option&quot;&gt;&#10;                            &lt;input type=&quot;radio&quot; name=&quot;paymentMethod&quot; value=&quot;online&quot;&gt;&#10;                            &lt;div&gt;&#10;                                &lt;div style=&quot;font-weight: 600;&quot;&gt; Chuyển khoản ngân hàng&lt;/div&gt;&#10;                                &lt;div style=&quot;color: var(--gray); font-size: 0.9rem;&quot;&gt;Thanh toán qua chuyển khoản&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/label&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary submit-btn&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-shopping-cart&quot;&gt;&lt;/i&gt; Đặt hàng ngay&#10;                &lt;/button&gt;&#10;            &lt;/form&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Order Summary --&gt;&#10;        &lt;div class=&quot;order-summary&quot;&gt;&#10;            &lt;h3&gt; Đơn hàng của bạn&lt;/h3&gt;&#10;&#10;            &lt;div class=&quot;order-items&quot;&gt;&#10;                &lt;c:forEach items=&quot;${cartItems}&quot; var=&quot;item&quot;&gt;&#10;                    &lt;div class=&quot;order-item&quot;&gt;&#10;                        &lt;div class=&quot;item-image&quot;&gt;&#10;                            &lt;c:choose&gt;&#10;                                &lt;c:when test=&quot;${not empty item.product.imageUrl}&quot;&gt;&#10;                                    &lt;img src=&quot;${item.product.imageUrl}&quot; alt=&quot;${item.product.name}&quot;&gt;&#10;                                &lt;/c:when&gt;&#10;                                &lt;c:otherwise&gt;&#10;                                    &lt;img src=&quot;${pageContext.request.contextPath}/images/default-product.jpg&quot; alt=&quot;Default&quot;&gt;&#10;                                &lt;/c:otherwise&gt;&#10;                            &lt;/c:choose&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;item-info&quot;&gt;&#10;                            &lt;div class=&quot;item-name&quot;&gt;${item.product.name}&lt;/div&gt;&#10;                            &lt;div class=&quot;item-category&quot;&gt;${item.product.categoryName}&lt;/div&gt;&#10;                            &lt;div class=&quot;item-price&quot;&gt;&#10;                                &lt;c:choose&gt;&#10;                                    &lt;c:when test=&quot;${item.product.discount != null &amp;&amp; item.product.discount &gt; 0}&quot;&gt;&#10;                                        &lt;span class=&quot;current-price&quot;&gt;&#10;                                            &lt;fmt:formatNumber value=&quot;${item.product.price * (1 - item.product.discount/100)}&quot;&#10;                                                            type=&quot;currency&quot; currencySymbol=&quot;₫&quot; groupingUsed=&quot;true&quot;/&gt;&#10;                                        &lt;/span&gt;&#10;                                        &lt;span class=&quot;original-price&quot;&gt;&#10;                                            &lt;fmt:formatNumber value=&quot;${item.product.price}&quot;&#10;                                                            type=&quot;currency&quot; currencySymbol=&quot;₫&quot; groupingUsed=&quot;true&quot;/&gt;&#10;                                        &lt;/span&gt;&#10;                                    &lt;/c:when&gt;&#10;                                    &lt;c:otherwise&gt;&#10;                                        &lt;span class=&quot;current-price&quot;&gt;&#10;                                            &lt;fmt:formatNumber value=&quot;${item.product.price}&quot;&#10;                                                            type=&quot;currency&quot; currencySymbol=&quot;₫&quot; groupingUsed=&quot;true&quot;/&gt;&#10;                                        &lt;/span&gt;&#10;                                    &lt;/c:otherwise&gt;&#10;                                &lt;/c:choose&gt;&#10;                                &lt;span class=&quot;item-quantity&quot;&gt;x${item.quantity}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;item-total&quot;&gt;&#10;                                &lt;c:set var=&quot;itemPrice&quot; value=&quot;${item.product.discount != null &amp;&amp; item.product.discount &gt; 0 ?&#10;                                    item.product.price * (1 - item.product.discount/100) : item.product.price}&quot; /&gt;&#10;                                &lt;span class=&quot;total-label&quot;&gt;Thành tiền:&lt;/span&gt;&#10;                                &lt;span class=&quot;total-value&quot;&gt;&#10;                                    &lt;fmt:formatNumber value=&quot;${itemPrice * item.quantity}&quot;&#10;                                                    type=&quot;currency&quot; currencySymbol=&quot;₫&quot; groupingUsed=&quot;true&quot;/&gt;&#10;                                &lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/c:forEach&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;total-section&quot;&gt;&#10;                &lt;div class=&quot;total-row&quot;&gt;&#10;                    &lt;span&gt;Tạm tính:&lt;/span&gt;&#10;                    &lt;span&gt;&lt;fmt:formatNumber value=&quot;${total}&quot; type=&quot;currency&quot; currencySymbol=&quot;₫&quot; groupingUsed=&quot;true&quot;/&gt;&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;total-row&quot;&gt;&#10;                    &lt;span&gt;Phí vận chuyển:&lt;/span&gt;&#10;                    &lt;span&gt;Miễn phí&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;total-row total-final&quot;&gt;&#10;                    &lt;span&gt;Tổng cộng:&lt;/span&gt;&#10;                    &lt;span&gt;&lt;fmt:formatNumber value=&quot;${total}&quot; type=&quot;currency&quot; currencySymbol=&quot;₫&quot; groupingUsed=&quot;true&quot;/&gt;&lt;/span&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script&gt;&#10;        // Payment method selection&#10;        document.querySelectorAll('.payment-option').forEach(option =&gt; {&#10;            option.addEventListener('click', function() {&#10;                document.querySelectorAll('.payment-option').forEach(opt =&gt; opt.classList.remove('selected'));&#10;                this.classList.add('selected');&#10;            });&#10;        });&#10;&#10;        // Form validation&#10;        document.querySelector('form').addEventListener('submit', function(e) {&#10;            const requiredFields = this.querySelectorAll('[required]');&#10;            let isValid = true;&#10;&#10;            requiredFields.forEach(field =&gt; {&#10;                if (!field.value.trim()) {&#10;                    field.style.borderColor = 'var(--danger)';&#10;                    isValid = false;&#10;                } else {&#10;                    field.style.borderColor = 'var(--glass-border)';&#10;                }&#10;            });&#10;&#10;            if (!isValid) {&#10;                e.preventDefault();&#10;                alert('Vui lòng điền đầy đủ thông tin bắt buộc!');&#10;            }&#10;        });&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/webapp/order/confirmation.jsp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/webapp/order/confirmation.jsp" />
              <option name="originalContent" value="&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;&#10;&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;&#10;&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&gt;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Xác nhận đơn hàng - GoMsu Store&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;${pageContext.request.contextPath}/css/style.css&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot;&gt;&#10;    &lt;style&gt;&#10;        :root {&#10;            --primary: #667eea;&#10;            --primary-dark: #5a67d8;&#10;            --secondary: #f093fb;&#10;            --accent: #4ecdc4;&#10;            --success: #48bb78;&#10;            --warning: #ed8936;&#10;            --danger: #f56565;&#10;            --dark: #1a202c;&#10;            --light: #2d3748;&#10;            --glass-bg: rgba(255, 255, 255, 0.1);&#10;            --glass-border: rgba(255, 255, 255, 0.2);&#10;            --text-primary: #ffffff;&#10;            --text-secondary: #e2e8f0;&#10;            --text-muted: #a0aec0;&#10;            --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.3);&#10;            --shadow-md: 0 4px 16px rgba(0, 0, 0, 0.4);&#10;            --shadow-lg: 0 8px 32px rgba(0, 0, 0, 0.5);&#10;            --radius: 8px;&#10;            --radius-md: 12px;&#10;            --radius-lg: 16px;&#10;            --radius-xl: 20px;&#10;        }&#10;&#10;        body {&#10;            font-family: 'Inter', sans-serif;&#10;            background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);&#10;            background-attachment: fixed;&#10;            min-height: 100vh;&#10;            margin: 0;&#10;            padding: 0;&#10;            color: var(--text-primary);&#10;            overflow-x: hidden;&#10;        }&#10;&#10;        .navbar {&#10;            background: rgba(26, 32, 44, 0.95);&#10;            backdrop-filter: blur(10px);&#10;            border-bottom: 1px solid var(--glass-border);&#10;            padding: 1rem 0;&#10;            position: fixed;&#10;            top: 0;&#10;            left: 0;&#10;            right: 0;&#10;            z-index: 1000;&#10;            transition: all 0.3s ease;&#10;        }&#10;&#10;        .navbar-container {&#10;            max-width: 1200px;&#10;            margin: 0 auto;&#10;            padding: 0 2rem;&#10;            display: flex;&#10;            justify-content: space-between;&#10;            align-items: center;&#10;        }&#10;&#10;        .navbar-brand {&#10;            font-size: 1.5rem;&#10;            font-weight: 700;&#10;            color: var(--primary);&#10;            text-decoration: none;&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .confirmation-container {&#10;            max-width: 900px;&#10;            margin: 120px auto 2rem auto;&#10;            padding: 2rem;&#10;        }&#10;&#10;        .success-header {&#10;            text-align: center;&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(20px);&#10;            border: 1px solid var(--glass-border);&#10;            padding: 3rem 2rem;&#10;            border-radius: var(--radius-xl);&#10;            margin-bottom: 2rem;&#10;            box-shadow: var(--shadow-lg);&#10;            position: relative;&#10;            overflow: hidden;&#10;        }&#10;&#10;        .success-header::before {&#10;            content: '';&#10;            position: absolute;&#10;            top: -50%;&#10;            left: -50%;&#10;            width: 200%;&#10;            height: 200%;&#10;            background: radial-gradient(circle, rgba(72, 187, 120, 0.1) 0%, transparent 70%);&#10;            animation: rotate 20s linear infinite;&#10;        }&#10;&#10;        .success-icon {&#10;            font-size: 5rem;&#10;            margin-bottom: 1.5rem;&#10;            background: linear-gradient(135deg, var(--success), var(--accent));&#10;            -webkit-background-clip: text;&#10;            -webkit-text-fill-color: transparent;&#10;            background-clip: text;&#10;            animation: successPulse 2s ease-in-out infinite;&#10;            position: relative;&#10;            z-index: 1;&#10;        }&#10;&#10;        .success-title {&#10;            font-size: 2.5rem;&#10;            font-weight: 700;&#10;            margin-bottom: 1rem;&#10;            background: linear-gradient(135deg, var(--primary), var(--secondary));&#10;            -webkit-background-clip: text;&#10;            -webkit-text-fill-color: transparent;&#10;            background-clip: text;&#10;            position: relative;&#10;            z-index: 1;&#10;        }&#10;&#10;        .success-subtitle {&#10;            color: var(--text-secondary);&#10;            font-size: 1.1rem;&#10;            position: relative;&#10;            z-index: 1;&#10;        }&#10;&#10;        .order-details {&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(20px);&#10;            border: 1px solid var(--glass-border);&#10;            border-radius: var(--radius-xl);&#10;            padding: 2rem;&#10;            box-shadow: var(--shadow-md);&#10;            margin-bottom: 2rem;&#10;        }&#10;&#10;        .order-number {&#10;            background: linear-gradient(135deg, var(--primary), var(--primary-dark));&#10;            color: white;&#10;            padding: 1.5rem;&#10;            border-radius: var(--radius-lg);&#10;            text-align: center;&#10;            font-weight: 700;&#10;            font-size: 1.3rem;&#10;            margin-bottom: 2rem;&#10;            box-shadow: var(--shadow-md);&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .detail-grid {&#10;            display: grid;&#10;            grid-template-columns: 1fr 1fr;&#10;            gap: 2rem;&#10;            margin-bottom: 2rem;&#10;        }&#10;&#10;        .detail-section h4 {&#10;            color: var(--primary);&#10;            margin-bottom: 1rem;&#10;            font-weight: 700;&#10;            font-size: 1.1rem;&#10;            border-bottom: 2px solid var(--glass-border);&#10;            padding-bottom: 0.5rem;&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .detail-item {&#10;            display: flex;&#10;            justify-content: space-between;&#10;            align-items: center;&#10;            padding: 0.75rem 0;&#10;            border-bottom: 1px dashed var(--glass-border);&#10;        }&#10;&#10;        .detail-item:last-child {&#10;            border-bottom: none;&#10;        }&#10;&#10;        .detail-label {&#10;            color: var(--text-secondary);&#10;            font-weight: 500;&#10;        }&#10;&#10;        .detail-value {&#10;            color: var(--text-primary);&#10;            font-weight: 600;&#10;        }&#10;&#10;        .order-items {&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(15px);&#10;            border: 1px solid var(--glass-border);&#10;            border-radius: var(--radius-lg);&#10;            padding: 1.5rem;&#10;            margin-top: 1rem;&#10;        }&#10;&#10;        .order-items h4 {&#10;            color: var(--text-primary);&#10;            margin-bottom: 1rem;&#10;            font-weight: 700;&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .item-row {&#10;            display: flex;&#10;            justify-content: space-between;&#10;            align-items: center;&#10;            padding: 0.75rem 0;&#10;            border-bottom: 1px solid var(--glass-border);&#10;        }&#10;&#10;        .item-row:last-child {&#10;            border-bottom: none;&#10;            margin-top: 0.5rem;&#10;            padding-top: 1rem;&#10;            border-top: 2px solid var(--glass-border);&#10;            font-weight: 700;&#10;        }&#10;&#10;        .item-info {&#10;            flex: 1;&#10;        }&#10;&#10;        .item-name {&#10;            color: var(--text-primary);&#10;            font-weight: 600;&#10;        }&#10;&#10;        .item-details {&#10;            color: var(--text-muted);&#10;            font-size: 0.9rem;&#10;        }&#10;&#10;        .item-price {&#10;            color: var(--primary);&#10;            font-weight: 600;&#10;            text-align: right;&#10;        }&#10;&#10;        .action-buttons {&#10;            display: flex;&#10;            gap: 1rem;&#10;            justify-content: center;&#10;            flex-wrap: wrap;&#10;            margin-top: 2rem;&#10;        }&#10;&#10;        .btn {&#10;            display: inline-flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;            padding: 0.75rem 2rem;&#10;            border-radius: var(--radius-lg);&#10;            text-decoration: none;&#10;            font-weight: 600;&#10;            transition: all 0.3s ease;&#10;            border: none;&#10;            cursor: pointer;&#10;            font-size: 1rem;&#10;        }&#10;&#10;        .btn-primary {&#10;            background: linear-gradient(135deg, var(--primary), var(--primary-dark));&#10;            color: white;&#10;        }&#10;&#10;        .btn-primary:hover {&#10;            transform: translateY(-2px);&#10;            box-shadow: var(--shadow-lg);&#10;        }&#10;&#10;        .btn-secondary {&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(10px);&#10;            border: 1px solid var(--glass-border);&#10;            color: var(--text-primary);&#10;        }&#10;&#10;        .btn-secondary:hover {&#10;            background: rgba(255, 255, 255, 0.15);&#10;            transform: translateY(-2px);&#10;        }&#10;&#10;        .btn-success {&#10;            background: linear-gradient(135deg, var(--success), #38a169);&#10;            color: white;&#10;        }&#10;&#10;        .btn-success:hover {&#10;            transform: translateY(-2px);&#10;            box-shadow: 0 8px 25px rgba(72, 187, 120, 0.3);&#10;        }&#10;&#10;        /* Status badge */&#10;        .status-badge {&#10;            display: inline-flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;            padding: 0.5rem 1rem;&#10;            border-radius: var(--radius-lg);&#10;            font-weight: 600;&#10;            font-size: 0.9rem;&#10;        }&#10;&#10;        .status-pending {&#10;            background: rgba(237, 137, 54, 0.2);&#10;            color: var(--warning);&#10;            border: 1px solid rgba(237, 137, 54, 0.3);&#10;        }&#10;&#10;        .status-confirmed {&#10;            background: rgba(72, 187, 120, 0.2);&#10;            color: var(--success);&#10;            border: 1px solid rgba(72, 187, 120, 0.3);&#10;        }&#10;&#10;        /* Animations */&#10;        @keyframes successPulse {&#10;            0%, 100% { transform: scale(1); }&#10;            50% { transform: scale(1.05); }&#10;        }&#10;&#10;        @keyframes rotate {&#10;            from { transform: rotate(0deg); }&#10;            to { transform: rotate(360deg); }&#10;        }&#10;&#10;        @keyframes fadeInUp {&#10;            from {&#10;                opacity: 0;&#10;                transform: translateY(30px);&#10;            }&#10;            to {&#10;                opacity: 1;&#10;                transform: translateY(0);&#10;            }&#10;        }&#10;&#10;        .order-details {&#10;            animation: fadeInUp 0.6s ease-out;&#10;        }&#10;&#10;        .success-header {&#10;            animation: fadeInUp 0.4s ease-out;&#10;        }&#10;&#10;        /* Responsive */&#10;        @media (max-width: 768px) {&#10;            .confirmation-container {&#10;                padding: 1rem;&#10;                margin-top: 100px;&#10;            }&#10;&#10;            .detail-grid {&#10;                grid-template-columns: 1fr;&#10;                gap: 1rem;&#10;            }&#10;&#10;            .action-buttons {&#10;                flex-direction: column;&#10;            }&#10;&#10;            .btn {&#10;                width: 100%;&#10;                justify-content: center;&#10;            }&#10;&#10;            .success-title {&#10;                font-size: 2rem;&#10;            }&#10;&#10;            .success-icon {&#10;                font-size: 4rem;&#10;            }&#10;        }&#10;&#10;        /* Print styles */&#10;        @media print {&#10;            body {&#10;                background: white;&#10;                color: black;&#10;            }&#10;&#10;            .navbar, .action-buttons {&#10;                display: none;&#10;            }&#10;&#10;            .success-header, .order-details {&#10;                background: white;&#10;                box-shadow: none;&#10;                border: 1px solid #ccc;&#10;            }&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;confirmation-container&quot;&gt;&#10;        &lt;!-- Success Header --&gt;&#10;        &lt;div class=&quot;success-header&quot;&gt;&#10;            &lt;div class=&quot;success-icon&quot;&gt;✅&lt;/div&gt;&#10;            &lt;h1 class=&quot;success-title&quot;&gt;Đặt hàng thành công!&lt;/h1&gt;&#10;            &lt;p class=&quot;success-subtitle&quot;&gt;Cảm ơn bạn đã tin tương và mua hàng tại GoMsu Store&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Order Details --&gt;&#10;        &lt;div class=&quot;order-details&quot;&gt;&#10;            &lt;div class=&quot;order-number&quot;&gt;&#10;                 Mã đơn hàng: #${order.orderId}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;detail-grid&quot;&gt;&#10;                &lt;!-- Customer Information --&gt;&#10;                &lt;div class=&quot;detail-section&quot;&gt;&#10;                    &lt;h4&gt; Thông tin khách hàng&lt;/h4&gt;&#10;                    &lt;div class=&quot;detail-item&quot;&gt;&#10;                        &lt;div class=&quot;detail-label&quot;&gt; Họ tên:&lt;/div&gt;&#10;                        &lt;div class=&quot;detail-value&quot;&gt;${order.customerName}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;detail-item&quot;&gt;&#10;                        &lt;div class=&quot;detail-label&quot;&gt; Email:&lt;/div&gt;&#10;                        &lt;div class=&quot;detail-value&quot;&gt;&#10;                            &lt;c:choose&gt;&#10;                                &lt;c:when test=&quot;${not empty order.email}&quot;&gt;&#10;                                    ${order.email}&#10;                                &lt;/c:when&gt;&#10;                                &lt;c:otherwise&gt;&#10;                                    ${sessionScope.user.email}&#10;                                &lt;/c:otherwise&gt;&#10;                            &lt;/c:choose&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;detail-item&quot;&gt;&#10;                        &lt;div class=&quot;detail-label&quot;&gt; Số điện thoại:&lt;/div&gt;&#10;                        &lt;div class=&quot;detail-value&quot;&gt;${order.phoneNumber}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;!-- Order Information --&gt;&#10;                &lt;div class=&quot;detail-section&quot;&gt;&#10;                    &lt;h4&gt; Thông tin đơn hàng&lt;/h4&gt;&#10;                    &lt;div class=&quot;detail-item&quot;&gt;&#10;                        &lt;div class=&quot;detail-label&quot;&gt; Ngày đặt:&lt;/div&gt;&#10;                        &lt;div class=&quot;detail-value&quot;&gt;&#10;                            &lt;fmt:formatDate value=&quot;${order.createdAt}&quot; pattern=&quot;dd/MM/yyyy HH:mm&quot;/&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;detail-item&quot;&gt;&#10;                        &lt;div class=&quot;detail-label&quot;&gt; Tổng tiền:&lt;/div&gt;&#10;                        &lt;div class=&quot;detail-value&quot; style=&quot;color: var(--primary); font-weight: 700;&quot;&gt;&#10;                            &lt;fmt:formatNumber value=&quot;${order.totalPrice}&quot; type=&quot;currency&quot; currencySymbol=&quot;₫&quot; groupingUsed=&quot;true&quot;/&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;detail-item&quot;&gt;&#10;                        &lt;div class=&quot;detail-label&quot;&gt; Trạng thái:&lt;/div&gt;&#10;                        &lt;div class=&quot;detail-value&quot;&gt;&#10;                            &lt;span class=&quot;status ${order.status}&quot;&gt;${order.status}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;detail-item&quot;&gt;&#10;                        &lt;div class=&quot;detail-label&quot;&gt; Phương thức thanh toán:&lt;/div&gt;&#10;                        &lt;div class=&quot;detail-value&quot;&gt;&#10;                            &lt;c:choose&gt;&#10;                                &lt;c:when test=&quot;${order.paymentMethod == 'on_delivery'}&quot;&gt;&#10;                                     Thanh toán khi nhận hàng&#10;                                &lt;/c:when&gt;&#10;                                &lt;c:when test=&quot;${order.paymentMethod == 'online'}&quot;&gt;&#10;                                     Chuyển khoản ngân hàng&#10;                                &lt;/c:when&gt;&#10;                                &lt;c:otherwise&gt;&#10;                                     Thanh toán khi nhận hàng&#10;                                &lt;/c:otherwise&gt;&#10;                            &lt;/c:choose&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Shipping Information --&gt;&#10;            &lt;div class=&quot;detail-section&quot; style=&quot;margin-top: 2rem;&quot;&gt;&#10;                &lt;h4&gt; Thông tin giao hàng&lt;/h4&gt;&#10;                &lt;div class=&quot;detail-item&quot;&gt;&#10;                    &lt;div class=&quot;detail-label&quot;&gt; Địa chỉ giao hàng:&lt;/div&gt;&#10;                    &lt;div class=&quot;detail-value&quot;&gt;${order.shippingAddress}&lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;c:if test=&quot;${not empty order.note}&quot;&gt;&#10;                    &lt;div class=&quot;detail-item&quot;&gt;&#10;                        &lt;div class=&quot;detail-label&quot;&gt; Ghi chú:&lt;/div&gt;&#10;                        &lt;div class=&quot;detail-value&quot;&gt;${order.note}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/c:if&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Ordered Items --&gt;&#10;            &lt;div class=&quot;order-items&quot;&gt;&#10;                &lt;h4&gt; Sản phẩm đã đặt&lt;/h4&gt;&#10;                &lt;c:forEach var=&quot;item&quot; items=&quot;${order.items}&quot;&gt;&#10;                    &lt;div class=&quot;item-row&quot;&gt;&#10;                        &lt;div class=&quot;item-info&quot;&gt;&#10;                            &lt;div class=&quot;item-name&quot;&gt;${item.productName}&lt;/div&gt;&#10;                            &lt;div class=&quot;item-details&quot;&gt;&#10;                                &lt;span&gt;Size: ${item.size}&lt;/span&gt;&#10;                                &lt;span&gt;Màu: ${item.color}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;item-price&quot;&gt;&#10;                            &lt;fmt:formatNumber value=&quot;${item.price}&quot; type=&quot;currency&quot; currencySymbol=&quot;₫&quot; groupingUsed=&quot;true&quot;/&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/c:forEach&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Action Buttons --&gt;&#10;        &lt;div class=&quot;action-buttons&quot;&gt;&#10;            &lt;a href=&quot;${pageContext.request.contextPath}/orders/detail?id=${order.orderId}&quot;&#10;               class=&quot;btn btn-primary&quot;&gt;&#10;                 Xem chi tiết đơn hàng&#10;            &lt;/a&gt;&#10;            &lt;a href=&quot;${pageContext.request.contextPath}/shop&quot; class=&quot;btn btn-secondary&quot;&gt;&#10;                ️ Tiếp tục mua sắm&#10;            &lt;/a&gt;&#10;            &lt;a href=&quot;${pageContext.request.contextPath}/orders&quot; class=&quot;btn btn-secondary&quot;&gt;&#10;                 Đơn hàng của tôi&#10;            &lt;/a&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Additional Information --&gt;&#10;        &lt;div class=&quot;card&quot; style=&quot;margin-top: 2rem; background: linear-gradient(135deg, var(--light) 0%, var(--secondary) 100%);&quot;&gt;&#10;            &lt;h4 style=&quot;color: var(--primary); margin-bottom: 1rem;&quot;&gt; Thông tin quan trọng&lt;/h4&gt;&#10;            &lt;ul style=&quot;color: var(--gray); line-height: 1.8;&quot;&gt;&#10;                &lt;li&gt;✅ Đơn hàng của bạn đã được tiếp nhận và đang được xử lý&lt;/li&gt;&#10;                &lt;li&gt; Chúng tôi sẽ gửi email xác nhận và cập nhật trạng thái đơn hàng&lt;/li&gt;&#10;                &lt;li&gt; Thời gian giao hàng dự kiến: 2-3 ngày làm việc&lt;/li&gt;&#10;                &lt;li&gt; Liên hệ hotline: 1900-xxxx nếu có thắc mắc&lt;/li&gt;&#10;            &lt;/ul&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script&gt;&#10;        // Auto redirect after 30 seconds&#10;        setTimeout(function() {&#10;            if (confirm('Bạn có muốn chuyển đến trang đơn hàng của mình không?')) {&#10;                window.location.href = '${pageContext.request.contextPath}/orders';&#10;            }&#10;        }, 30000);&#10;&#10;        // Print functionality&#10;        function printOrder() {&#10;            window.print();&#10;        }&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;&#10;&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;&#10;&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&gt;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Xác nhận đơn hàng - GoMsu Store&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;${pageContext.request.contextPath}/css/style.css&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot;&gt;&#10;    &lt;style&gt;&#10;        :root {&#10;            --primary: #667eea;&#10;            --primary-dark: #5a67d8;&#10;            --secondary: #f093fb;&#10;            --accent: #4ecdc4;&#10;            --success: #48bb78;&#10;            --warning: #ed8936;&#10;            --danger: #f56565;&#10;            --dark: #1a202c;&#10;            --light: #2d3748;&#10;            --glass-bg: rgba(255, 255, 255, 0.1);&#10;            --glass-border: rgba(255, 255, 255, 0.2);&#10;            --text-primary: #ffffff;&#10;            --text-secondary: #e2e8f0;&#10;            --text-muted: #a0aec0;&#10;            --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.3);&#10;            --shadow-md: 0 4px 16px rgba(0, 0, 0, 0.4);&#10;            --shadow-lg: 0 8px 32px rgba(0, 0, 0, 0.5);&#10;            --radius: 8px;&#10;            --radius-md: 12px;&#10;            --radius-lg: 16px;&#10;            --radius-xl: 20px;&#10;        }&#10;&#10;        body {&#10;            font-family: 'Inter', sans-serif;&#10;            background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);&#10;            background-attachment: fixed;&#10;            min-height: 100vh;&#10;            margin: 0;&#10;            padding: 0;&#10;            color: var(--text-primary);&#10;            overflow-x: hidden;&#10;        }&#10;&#10;        .navbar {&#10;            background: rgba(26, 32, 44, 0.95);&#10;            backdrop-filter: blur(10px);&#10;            border-bottom: 1px solid var(--glass-border);&#10;            padding: 1rem 0;&#10;            position: fixed;&#10;            top: 0;&#10;            left: 0;&#10;            right: 0;&#10;            z-index: 1000;&#10;            transition: all 0.3s ease;&#10;        }&#10;&#10;        .navbar-container {&#10;            max-width: 1200px;&#10;            margin: 0 auto;&#10;            padding: 0 2rem;&#10;            display: flex;&#10;            justify-content: space-between;&#10;            align-items: center;&#10;        }&#10;&#10;        .navbar-brand {&#10;            font-size: 1.5rem;&#10;            font-weight: 700;&#10;            color: var(--primary);&#10;            text-decoration: none;&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .navbar-nav {&#10;            display: flex;&#10;            list-style: none;&#10;            margin: 0;&#10;            padding: 0;&#10;            gap: 2rem;&#10;        }&#10;&#10;        .nav-link {&#10;            color: var(--text-secondary);&#10;            text-decoration: none;&#10;            font-weight: 500;&#10;            padding: 0.5rem 1rem;&#10;            border-radius: var(--radius);&#10;            transition: all 0.3s ease;&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .nav-link:hover {&#10;            background: var(--primary);&#10;            color: white;&#10;            transform: translateY(-2px);&#10;        }&#10;&#10;        .confirmation-container {&#10;            max-width: 900px;&#10;            margin: 120px auto 2rem auto;&#10;            padding: 2rem;&#10;        }&#10;&#10;        .success-header {&#10;            text-align: center;&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(20px);&#10;            border: 1px solid var(--glass-border);&#10;            padding: 3rem 2rem;&#10;            border-radius: var(--radius-xl);&#10;            margin-bottom: 2rem;&#10;            box-shadow: var(--shadow-lg);&#10;            position: relative;&#10;            overflow: hidden;&#10;        }&#10;&#10;        .success-icon {&#10;            font-size: 5rem;&#10;            margin-bottom: 1.5rem;&#10;            color: var(--success);&#10;            animation: successPulse 2s ease-in-out infinite;&#10;        }&#10;&#10;        .success-title {&#10;            font-size: 2.5rem;&#10;            font-weight: 700;&#10;            margin-bottom: 1rem;&#10;            background: linear-gradient(135deg, var(--primary), var(--secondary));&#10;            -webkit-background-clip: text;&#10;            -webkit-text-fill-color: transparent;&#10;            background-clip: text;&#10;        }&#10;&#10;        .success-subtitle {&#10;            color: var(--text-secondary);&#10;            font-size: 1.1rem;&#10;        }&#10;&#10;        .order-details {&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(20px);&#10;            border: 1px solid var(--glass-border);&#10;            border-radius: var(--radius-xl);&#10;            padding: 2rem;&#10;            box-shadow: var(--shadow-md);&#10;            margin-bottom: 2rem;&#10;        }&#10;&#10;        .order-number {&#10;            background: linear-gradient(135deg, var(--primary), var(--primary-dark));&#10;            color: white;&#10;            padding: 1.5rem;&#10;            border-radius: var(--radius-lg);&#10;            text-align: center;&#10;            font-weight: 700;&#10;            font-size: 1.3rem;&#10;            margin-bottom: 2rem;&#10;            box-shadow: var(--shadow-md);&#10;        }&#10;&#10;        .detail-grid {&#10;            display: grid;&#10;            grid-template-columns: 1fr 1fr;&#10;            gap: 2rem;&#10;            margin-bottom: 2rem;&#10;        }&#10;&#10;        .detail-section h4 {&#10;            color: var(--primary);&#10;            margin-bottom: 1rem;&#10;            font-weight: 700;&#10;            font-size: 1.1rem;&#10;            border-bottom: 2px solid var(--glass-border);&#10;            padding-bottom: 0.5rem;&#10;        }&#10;&#10;        .detail-item {&#10;            display: flex;&#10;            justify-content: space-between;&#10;            align-items: center;&#10;            padding: 0.75rem 0;&#10;            border-bottom: 1px dashed var(--glass-border);&#10;        }&#10;&#10;        .detail-item:last-child {&#10;            border-bottom: none;&#10;        }&#10;&#10;        .detail-label {&#10;            color: var(--text-secondary);&#10;            font-weight: 500;&#10;        }&#10;&#10;        .detail-value {&#10;            color: var(--text-primary);&#10;            font-weight: 600;&#10;        }&#10;&#10;        .action-buttons {&#10;            display: flex;&#10;            gap: 1rem;&#10;            justify-content: center;&#10;            flex-wrap: wrap;&#10;            margin-top: 2rem;&#10;        }&#10;&#10;        .btn {&#10;            display: inline-flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;            padding: 0.75rem 2rem;&#10;            border-radius: var(--radius-lg);&#10;            text-decoration: none;&#10;            font-weight: 600;&#10;            transition: all 0.3s ease;&#10;            border: none;&#10;            cursor: pointer;&#10;            font-size: 1rem;&#10;        }&#10;&#10;        .btn-primary {&#10;            background: linear-gradient(135deg, var(--primary), var(--primary-dark));&#10;            color: white;&#10;        }&#10;&#10;        .btn-primary:hover {&#10;            transform: translateY(-2px);&#10;            box-shadow: var(--shadow-lg);&#10;        }&#10;&#10;        .btn-secondary {&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(10px);&#10;            border: 1px solid var(--glass-border);&#10;            color: var(--text-primary);&#10;        }&#10;&#10;        .btn-secondary:hover {&#10;            background: rgba(255, 255, 255, 0.15);&#10;            transform: translateY(-2px);&#10;        }&#10;&#10;        /* Info box */&#10;        .info-box {&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(15px);&#10;            border: 1px solid var(--glass-border);&#10;            border-radius: var(--radius-lg);&#10;            padding: 1.5rem;&#10;            margin-top: 2rem;&#10;        }&#10;&#10;        .info-box h4 {&#10;            color: var(--primary);&#10;            margin-bottom: 1rem;&#10;            font-weight: 700;&#10;        }&#10;&#10;        .info-box ul {&#10;            color: var(--text-secondary);&#10;            line-height: 1.8;&#10;            padding-left: 1rem;&#10;        }&#10;&#10;        .info-box li {&#10;            margin-bottom: 0.5rem;&#10;        }&#10;&#10;        /* Animations */&#10;        @keyframes successPulse {&#10;            0%, 100% { transform: scale(1); }&#10;            50% { transform: scale(1.05); }&#10;        }&#10;&#10;        /* Responsive */&#10;        @media (max-width: 768px) {&#10;            .confirmation-container {&#10;                padding: 1rem;&#10;                margin-top: 100px;&#10;            }&#10;&#10;            .detail-grid {&#10;                grid-template-columns: 1fr;&#10;                gap: 1rem;&#10;            }&#10;&#10;            .action-buttons {&#10;                flex-direction: column;&#10;            }&#10;&#10;            .btn {&#10;                width: 100%;&#10;                justify-content: center;&#10;            }&#10;&#10;            .success-title {&#10;                font-size: 2rem;&#10;            }&#10;&#10;            .success-icon {&#10;                font-size: 4rem;&#10;            }&#10;&#10;            .navbar-nav {&#10;                display: none;&#10;            }&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;!-- Navbar --&gt;&#10;    &lt;nav class=&quot;navbar&quot;&gt;&#10;        &lt;div class=&quot;navbar-container&quot;&gt;&#10;            &lt;a href=&quot;${pageContext.request.contextPath}/&quot; class=&quot;navbar-brand&quot;&gt;&#10;                &lt;i class=&quot;fas fa-store&quot;&gt;&lt;/i&gt;&#10;                GoMsu Store&#10;            &lt;/a&gt;&#10;            &lt;ul class=&quot;navbar-nav&quot;&gt;&#10;                &lt;li&gt;&lt;a href=&quot;${pageContext.request.contextPath}/&quot; class=&quot;nav-link&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-home&quot;&gt;&lt;/i&gt; Trang Chủ&#10;                &lt;/a&gt;&lt;/li&gt;&#10;                &lt;li&gt;&lt;a href=&quot;${pageContext.request.contextPath}/shop&quot; class=&quot;nav-link&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-shopping-bag&quot;&gt;&lt;/i&gt; Cửa Hàng&#10;                &lt;/a&gt;&lt;/li&gt;&#10;                &lt;li&gt;&lt;a href=&quot;${pageContext.request.contextPath}/cart&quot; class=&quot;nav-link&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-shopping-cart&quot;&gt;&lt;/i&gt; Giỏ Hàng&#10;                &lt;/a&gt;&lt;/li&gt;&#10;            &lt;/ul&gt;&#10;        &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;&#10;    &lt;div class=&quot;confirmation-container&quot;&gt;&#10;        &lt;!-- Success Header --&gt;&#10;        &lt;div class=&quot;success-header&quot;&gt;&#10;            &lt;div class=&quot;success-icon&quot;&gt;&#10;                &lt;i class=&quot;fas fa-check-circle&quot;&gt;&lt;/i&gt;&#10;            &lt;/div&gt;&#10;            &lt;h1 class=&quot;success-title&quot;&gt;Đặt hàng thành công!&lt;/h1&gt;&#10;            &lt;p class=&quot;success-subtitle&quot;&gt;Cảm ơn bạn đã tin tưởng và mua hàng tại GoMsu Store&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Order Details --&gt;&#10;        &lt;div class=&quot;order-details&quot;&gt;&#10;            &lt;div class=&quot;order-number&quot;&gt;&#10;                &lt;i class=&quot;fas fa-receipt&quot;&gt;&lt;/i&gt; Mã đơn hàng: #${order.orderId}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;detail-grid&quot;&gt;&#10;                &lt;!-- Customer Information --&gt;&#10;                &lt;div class=&quot;detail-section&quot;&gt;&#10;                    &lt;h4&gt;&lt;i class=&quot;fas fa-user&quot;&gt;&lt;/i&gt; Thông tin khách hàng&lt;/h4&gt;&#10;                    &lt;div class=&quot;detail-item&quot;&gt;&#10;                        &lt;div class=&quot;detail-label&quot;&gt;Họ tên:&lt;/div&gt;&#10;                        &lt;div class=&quot;detail-value&quot;&gt;${order.customerName}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;detail-item&quot;&gt;&#10;                        &lt;div class=&quot;detail-label&quot;&gt;Email:&lt;/div&gt;&#10;                        &lt;div class=&quot;detail-value&quot;&gt;&#10;                            &lt;c:choose&gt;&#10;                                &lt;c:when test=&quot;${not empty order.email}&quot;&gt;&#10;                                    ${order.email}&#10;                                &lt;/c:when&gt;&#10;                                &lt;c:otherwise&gt;&#10;                                    ${sessionScope.user.email}&#10;                                &lt;/c:otherwise&gt;&#10;                            &lt;/c:choose&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;detail-item&quot;&gt;&#10;                        &lt;div class=&quot;detail-label&quot;&gt;Số điện thoại:&lt;/div&gt;&#10;                        &lt;div class=&quot;detail-value&quot;&gt;${order.phoneNumber}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;!-- Order Information --&gt;&#10;                &lt;div class=&quot;detail-section&quot;&gt;&#10;                    &lt;h4&gt;&lt;i class=&quot;fas fa-box&quot;&gt;&lt;/i&gt; Thông tin đơn hàng&lt;/h4&gt;&#10;                    &lt;div class=&quot;detail-item&quot;&gt;&#10;                        &lt;div class=&quot;detail-label&quot;&gt;Ngày đặt:&lt;/div&gt;&#10;                        &lt;div class=&quot;detail-value&quot;&gt;&#10;                            &lt;fmt:formatDate value=&quot;${order.createdAt}&quot; pattern=&quot;dd/MM/yyyy HH:mm&quot;/&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;detail-item&quot;&gt;&#10;                        &lt;div class=&quot;detail-label&quot;&gt;Tổng tiền:&lt;/div&gt;&#10;                        &lt;div class=&quot;detail-value&quot; style=&quot;color: var(--primary); font-weight: 700; font-size: 1.1rem;&quot;&gt;&#10;                            &lt;fmt:formatNumber value=&quot;${order.totalPrice}&quot; type=&quot;currency&quot; currencySymbol=&quot;₫&quot; groupingUsed=&quot;true&quot;/&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;detail-item&quot;&gt;&#10;                        &lt;div class=&quot;detail-label&quot;&gt;Trạng thái:&lt;/div&gt;&#10;                        &lt;div class=&quot;detail-value&quot;&gt;&#10;                            &lt;span style=&quot;background: rgba(237, 137, 54, 0.2); color: var(--warning); padding: 0.25rem 0.75rem; border-radius: var(--radius); font-size: 0.9rem;&quot;&gt;&#10;                                ${order.status}&#10;                            &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;detail-item&quot;&gt;&#10;                        &lt;div class=&quot;detail-label&quot;&gt;Thanh toán:&lt;/div&gt;&#10;                        &lt;div class=&quot;detail-value&quot;&gt;&#10;                            &lt;c:choose&gt;&#10;                                &lt;c:when test=&quot;${order.paymentMethod == 'on_delivery'}&quot;&gt;&#10;                                    Thanh toán khi nhận hàng&#10;                                &lt;/c:when&gt;&#10;                                &lt;c:when test=&quot;${order.paymentMethod == 'online'}&quot;&gt;&#10;                                    Chuyển khoản ngân hàng&#10;                                &lt;/c:when&gt;&#10;                                &lt;c:otherwise&gt;&#10;                                    Thanh toán khi nhận hàng&#10;                                &lt;/c:otherwise&gt;&#10;                            &lt;/c:choose&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Shipping Information --&gt;&#10;            &lt;div class=&quot;detail-section&quot;&gt;&#10;                &lt;h4&gt;&lt;i class=&quot;fas fa-truck&quot;&gt;&lt;/i&gt; Thông tin giao hàng&lt;/h4&gt;&#10;                &lt;div class=&quot;detail-item&quot;&gt;&#10;                    &lt;div class=&quot;detail-label&quot;&gt;Địa chỉ:&lt;/div&gt;&#10;                    &lt;div class=&quot;detail-value&quot;&gt;${order.shippingAddress}&lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;c:if test=&quot;${not empty order.note}&quot;&gt;&#10;                    &lt;div class=&quot;detail-item&quot;&gt;&#10;                        &lt;div class=&quot;detail-label&quot;&gt;Ghi chú:&lt;/div&gt;&#10;                        &lt;div class=&quot;detail-value&quot;&gt;${order.note}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/c:if&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Action Buttons --&gt;&#10;        &lt;div class=&quot;action-buttons&quot;&gt;&#10;            &lt;a href=&quot;${pageContext.request.contextPath}/orders&quot; class=&quot;btn btn-primary&quot;&gt;&#10;                &lt;i class=&quot;fas fa-list&quot;&gt;&lt;/i&gt; Đơn hàng của tôi&#10;            &lt;/a&gt;&#10;            &lt;a href=&quot;${pageContext.request.contextPath}/shop&quot; class=&quot;btn btn-secondary&quot;&gt;&#10;                &lt;i class=&quot;fas fa-shopping-bag&quot;&gt;&lt;/i&gt; Tiếp tục mua sắm&#10;            &lt;/a&gt;&#10;            &lt;a href=&quot;${pageContext.request.contextPath}/&quot; class=&quot;btn btn-secondary&quot;&gt;&#10;                &lt;i class=&quot;fas fa-home&quot;&gt;&lt;/i&gt; Về trang chủ&#10;            &lt;/a&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Info Box --&gt;&#10;        &lt;div class=&quot;info-box&quot;&gt;&#10;            &lt;h4&gt;&lt;i class=&quot;fas fa-info-circle&quot;&gt;&lt;/i&gt; Thông tin quan trọng&lt;/h4&gt;&#10;            &lt;ul&gt;&#10;                &lt;li&gt;✅ Đơn hàng của bạn đã được tiếp nhận và đang được xử lý&lt;/li&gt;&#10;                &lt;li&gt; Chúng tôi sẽ gửi email xác nhận và cập nhật trạng thái đơn hàng&lt;/li&gt;&#10;                &lt;li&gt; Thời gian giao hàng dự kiến: 2-3 ngày làm việc&lt;/li&gt;&#10;                &lt;li&gt; Liên hệ hotline: 1900-xxxx nếu có thắc mắc&lt;/li&gt;&#10;            &lt;/ul&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/webapp/order/detail.jsp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/webapp/order/detail.jsp" />
              <option name="originalContent" value="&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;&#10;&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;  &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;  &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;  &lt;title&gt;Chi tiết đơn hàng&lt;/title&gt;&#10;  &lt;link rel=&quot;stylesheet&quot; href=&quot;${pageContext.request.contextPath}/css/style.css&quot;&gt;&#10;" />
              <option name="updatedContent" value="&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;&#10;&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;&#10;&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&gt;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Chi tiết đơn hàng - GoMsu Store&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;${pageContext.request.contextPath}/css/style.css&quot;&gt;&#10;    &lt;style&gt;&#10;        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&amp;display=swap');&#10;        &#10;        * {&#10;            margin: 0;&#10;            padding: 0;&#10;            box-sizing: border-box;&#10;        }&#10;&#10;        body {&#10;            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;&#10;            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&#10;            min-height: 100vh;&#10;            position: relative;&#10;            overflow-x: hidden;&#10;        }&#10;&#10;        /* Animated background */&#10;        body::before {&#10;            content: '';&#10;            position: fixed;&#10;            top: 0;&#10;            left: 0;&#10;            width: 100%;&#10;            height: 100%;&#10;            background: url('data:image/svg+xml,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 100 100&quot;&gt;&lt;defs&gt;&lt;radialGradient id=&quot;g&quot;&gt;&lt;stop offset=&quot;20%&quot; stop-color=&quot;%23ffffff&quot; stop-opacity=&quot;0.1&quot;/&gt;&lt;stop offset=&quot;50%&quot; stop-color=&quot;%23ffffff&quot; stop-opacity=&quot;0.05&quot;/&gt;&lt;stop offset=&quot;100%&quot; stop-color=&quot;%23ffffff&quot; stop-opacity=&quot;0&quot;/&gt;&lt;/radialGradient&gt;&lt;/defs&gt;&lt;circle cx=&quot;20&quot; cy=&quot;20&quot; r=&quot;20&quot; fill=&quot;url(%23g)&quot;&gt;&lt;animateTransform attributeName=&quot;transform&quot; type=&quot;translate&quot; values=&quot;0,0;80,80;0,0&quot; dur=&quot;8s&quot; repeatCount=&quot;indefinite&quot;/&gt;&lt;/circle&gt;&lt;circle cx=&quot;80&quot; cy=&quot;20&quot; r=&quot;15&quot; fill=&quot;url(%23g)&quot;&gt;&lt;animateTransform attributeName=&quot;transform&quot; type=&quot;translate&quot; values=&quot;0,0;-80,80;0,0&quot; dur=&quot;10s&quot; repeatCount=&quot;indefinite&quot;/&gt;&lt;/circle&gt;&lt;/svg&gt;');&#10;            animation: backgroundMove 20s ease-in-out infinite;&#10;            pointer-events: none;&#10;            z-index: -1;&#10;        }&#10;&#10;        @keyframes backgroundMove {&#10;            0%, 100% { transform: translateY(0px) rotate(0deg); }&#10;            50% { transform: translateY(-20px) rotate(180deg); }&#10;        }&#10;&#10;        .container {&#10;            max-width: 1200px;&#10;            margin: 0 auto;&#10;            padding: 2rem;&#10;            position: relative;&#10;            z-index: 1;&#10;        }&#10;&#10;        /* Glass morphism header */&#10;        .header {&#10;            background: rgba(255, 255, 255, 0.15);&#10;            backdrop-filter: blur(20px);&#10;            -webkit-backdrop-filter: blur(20px);&#10;            border: 1px solid rgba(255, 255, 255, 0.2);&#10;            border-radius: 25px;&#10;            padding: 3rem 2rem;&#10;            text-align: center;&#10;            margin-bottom: 2rem;&#10;            box-shadow: 0 25px 45px rgba(0, 0, 0, 0.1);&#10;            animation: slideInDown 0.8s ease-out;&#10;            position: relative;&#10;            overflow: hidden;&#10;        }&#10;&#10;        .header::before {&#10;            content: '';&#10;            position: absolute;&#10;            top: -50%;&#10;            left: -50%;&#10;            width: 200%;&#10;            height: 200%;&#10;            background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);&#10;            animation: shimmer 3s linear infinite;&#10;            pointer-events: none;&#10;        }&#10;&#10;        @keyframes shimmer {&#10;            0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }&#10;            100% { transform: translateX(100%) translateY(100%) rotate(45deg); }&#10;        }&#10;&#10;        @keyframes slideInDown {&#10;            from {&#10;                opacity: 0;&#10;                transform: translateY(-100px);&#10;            }&#10;            to {&#10;                opacity: 1;&#10;                transform: translateY(0);&#10;            }&#10;        }&#10;&#10;        .header h1 {&#10;            font-size: 3rem;&#10;            font-weight: 800;&#10;            color: white;&#10;            margin-bottom: 0.5rem;&#10;            text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);&#10;            animation: textGlow 2s ease-in-out infinite alternate;&#10;        }&#10;&#10;        @keyframes textGlow {&#10;            from { text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3), 0 0 20px rgba(255, 255, 255, 0.5); }&#10;            to { text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3), 0 0 30px rgba(255, 255, 255, 0.8); }&#10;        }&#10;&#10;        .header p {&#10;            font-size: 1.2rem;&#10;            color: rgba(255, 255, 255, 0.9);&#10;            font-weight: 300;&#10;        }&#10;&#10;        /* Glass morphism cards */&#10;        .detail-card, .products-card {&#10;            background: rgba(255, 255, 255, 0.1);&#10;            backdrop-filter: blur(15px);&#10;            -webkit-backdrop-filter: blur(15px);&#10;            border: 1px solid rgba(255, 255, 255, 0.2);&#10;            border-radius: 20px;&#10;            padding: 2rem;&#10;            margin-bottom: 2rem;&#10;            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);&#10;            animation: slideInUp 0.8s ease-out;&#10;            animation-delay: 0.2s;&#10;            animation-fill-mode: both;&#10;            position: relative;&#10;            overflow: hidden;&#10;        }&#10;&#10;        .products-card {&#10;            animation-delay: 0.4s;&#10;        }&#10;&#10;        @keyframes slideInUp {&#10;            from {&#10;                opacity: 0;&#10;                transform: translateY(50px);&#10;            }&#10;            to {&#10;                opacity: 1;&#10;                transform: translateY(0);&#10;            }&#10;        }&#10;&#10;        .detail-item {&#10;            display: flex;&#10;            justify-content: space-between;&#10;            align-items: center;&#10;            padding: 1.2rem 0;&#10;            border-bottom: 1px solid rgba(255, 255, 255, 0.1);&#10;            transition: all 0.3s ease;&#10;        }&#10;&#10;        .detail-item:hover {&#10;            background: rgba(255, 255, 255, 0.05);&#10;            border-radius: 10px;&#10;            padding-left: 1rem;&#10;            padding-right: 1rem;&#10;        }&#10;&#10;        .detail-item:last-child {&#10;            border-bottom: none;&#10;        }&#10;&#10;        .detail-label {&#10;            font-weight: 600;&#10;            color: rgba(255, 255, 255, 0.8);&#10;            font-size: 1.1rem;&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .detail-value {&#10;            font-weight: 500;&#10;            color: white;&#10;            font-size: 1.1rem;&#10;            text-align: right;&#10;        }&#10;&#10;        /* Status badge with animation */&#10;        .status-badge {&#10;            padding: 0.5rem 1rem;&#10;            border-radius: 50px;&#10;            font-weight: 600;&#10;            font-size: 0.9rem;&#10;            text-transform: uppercase;&#10;            letter-spacing: 0.5px;&#10;            animation: pulse 2s infinite;&#10;            display: inline-flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .status-pending {&#10;            background: linear-gradient(45deg, #ffa726, #ff9800);&#10;            color: white;&#10;            box-shadow: 0 4px 15px rgba(255, 152, 0, 0.4);&#10;        }&#10;&#10;        .status-delivered {&#10;            background: linear-gradient(45deg, #42a5f5, #2196f3);&#10;            color: white;&#10;            box-shadow: 0 4px 15px rgba(33, 150, 243, 0.4);&#10;        }&#10;&#10;        .status-success, .status-completed {&#10;            background: linear-gradient(45deg, #66bb6a, #4caf50);&#10;            color: white;&#10;            box-shadow: 0 4px 15px rgba(76, 175, 80, 0.4);&#10;        }&#10;&#10;        .status-cancel, .status-error {&#10;            background: linear-gradient(45deg, #ef5350, #f44336);&#10;            color: white;&#10;            box-shadow: 0 4px 15px rgba(244, 67, 54, 0.4);&#10;        }&#10;&#10;        @keyframes pulse {&#10;            0% { transform: scale(1); }&#10;            50% { transform: scale(1.05); }&#10;            100% { transform: scale(1); }&#10;        }&#10;&#10;        /* Beautiful table */&#10;        .table-container {&#10;            background: rgba(255, 255, 255, 0.1);&#10;            backdrop-filter: blur(10px);&#10;            border-radius: 15px;&#10;            overflow: hidden;&#10;            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);&#10;        }&#10;&#10;        .table {&#10;            width: 100%;&#10;            border-collapse: collapse;&#10;        }&#10;&#10;        .table th {&#10;            background: rgba(255, 255, 255, 0.2);&#10;            color: white;&#10;            font-weight: 600;&#10;            padding: 1.5rem 1rem;&#10;            text-align: left;&#10;            font-size: 1.1rem;&#10;        }&#10;&#10;        .table td {&#10;            padding: 1.2rem 1rem;&#10;            color: rgba(255, 255, 255, 0.9);&#10;            border-bottom: 1px solid rgba(255, 255, 255, 0.1);&#10;            transition: all 0.3s ease;&#10;        }&#10;&#10;        .table tr:hover td {&#10;            background: rgba(255, 255, 255, 0.05);&#10;            color: white;&#10;        }&#10;&#10;        /* Floating action buttons */&#10;        .actions {&#10;            display: flex;&#10;            gap: 1rem;&#10;            margin-top: 2rem;&#10;            flex-wrap: wrap;&#10;            justify-content: center;&#10;            animation: slideInUp 0.8s ease-out;&#10;            animation-delay: 0.6s;&#10;            animation-fill-mode: both;&#10;        }&#10;&#10;        .btn {&#10;            padding: 1rem 2rem;&#10;            border: none;&#10;            border-radius: 50px;&#10;            font-weight: 600;&#10;            font-size: 1rem;&#10;            text-decoration: none;&#10;            cursor: pointer;&#10;            transition: all 0.3s ease;&#10;            position: relative;&#10;            overflow: hidden;&#10;            backdrop-filter: blur(10px);&#10;            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);&#10;            display: inline-flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;            min-width: 180px;&#10;            justify-content: center;&#10;        }&#10;&#10;        .btn::before {&#10;            content: '';&#10;            position: absolute;&#10;            top: 0;&#10;            left: -100%;&#10;            width: 100%;&#10;            height: 100%;&#10;            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);&#10;            transition: left 0.5s;&#10;        }&#10;&#10;        .btn:hover::before {&#10;            left: 100%;&#10;        }&#10;&#10;        .btn:hover {&#10;            transform: translateY(-2px);&#10;            box-shadow: 0 12px 35px rgba(0, 0, 0, 0.3);&#10;        }&#10;&#10;        .btn-primary {&#10;            background: linear-gradient(45deg, #667eea, #764ba2);&#10;            color: white;&#10;        }&#10;&#10;        .btn-warning {&#10;            background: linear-gradient(45deg, #ffa726, #ff9800);&#10;            color: white;&#10;        }&#10;&#10;        .btn-danger {&#10;            background: linear-gradient(45deg, #ef5350, #f44336);&#10;            color: white;&#10;        }&#10;&#10;        .btn-success {&#10;            background: linear-gradient(45deg, #66bb6a, #4caf50);&#10;            color: white;&#10;        }&#10;&#10;        .btn-secondary {&#10;            background: rgba(255, 255, 255, 0.2);&#10;            color: white;&#10;            border: 1px solid rgba(255, 255, 255, 0.3);&#10;        }&#10;&#10;        /* Section headers */&#10;        .section-header {&#10;            color: white;&#10;            font-size: 2rem;&#10;            font-weight: 700;&#10;            margin: 3rem 0 1.5rem 0;&#10;            text-align: center;&#10;            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);&#10;            animation: fadeIn 1s ease-out;&#10;            animation-delay: 0.3s;&#10;            animation-fill-mode: both;&#10;        }&#10;&#10;        @keyframes fadeIn {&#10;            from { opacity: 0; }&#10;            to { opacity: 1; }&#10;        }&#10;&#10;        /* Responsive design */&#10;        @media (max-width: 768px) {&#10;            .container {&#10;                padding: 1rem;&#10;            }&#10;&#10;            .header h1 {&#10;                font-size: 2rem;&#10;            }&#10;&#10;            .detail-item {&#10;                flex-direction: column;&#10;                align-items: flex-start;&#10;                gap: 0.5rem;&#10;            }&#10;&#10;            .detail-value {&#10;                text-align: left;&#10;            }&#10;&#10;            .actions {&#10;                flex-direction: column;&#10;            }&#10;&#10;            .btn {&#10;                width: 100%;&#10;            }&#10;&#10;            .table {&#10;                font-size: 0.9rem;&#10;            }&#10;&#10;            .table th,&#10;            .table td {&#10;                padding: 1rem 0.5rem;&#10;            }&#10;        }&#10;&#10;        /* Loading animation for page entrance */&#10;        .container &gt; * {&#10;            opacity: 0;&#10;            animation: slideInFromLeft 0.8s ease-out forwards;&#10;        }&#10;&#10;        .container &gt; *:nth-child(1) { animation-delay: 0.1s; }&#10;        .container &gt; *:nth-child(2) { animation-delay: 0.2s; }&#10;        .container &gt; *:nth-child(3) { animation-delay: 0.3s; }&#10;        .container &gt; *:nth-child(4) { animation-delay: 0.4s; }&#10;&#10;        @keyframes slideInFromLeft {&#10;            from {&#10;                opacity: 0;&#10;                transform: translateX(-50px);&#10;            }&#10;            to {&#10;                opacity: 1;&#10;                transform: translateX(0);&#10;            }&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;container&quot;&gt;&#10;        &lt;div class=&quot;header&quot;&gt;&#10;            &lt;h1&gt; Chi tiết đơn hàng&lt;/h1&gt;&#10;            &lt;p&gt;Thông tin chi tiết đơn hàng #${order.orderId}&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;detail-card&quot;&gt;&#10;            &lt;div class=&quot;detail-item&quot;&gt;&#10;                &lt;div class=&quot;detail-label&quot;&gt; Mã đơn hàng:&lt;/div&gt;&#10;                &lt;div class=&quot;detail-value&quot;&gt;#${order.orderId}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;detail-item&quot;&gt;&#10;                &lt;div class=&quot;detail-label&quot;&gt; Khách hàng:&lt;/div&gt;&#10;                &lt;div class=&quot;detail-value&quot;&gt;${order.customerName}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;detail-item&quot;&gt;&#10;                &lt;div class=&quot;detail-label&quot;&gt; Số điện thoại:&lt;/div&gt;&#10;                &lt;div class=&quot;detail-value&quot;&gt;${order.phoneNumber}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;detail-item&quot;&gt;&#10;                &lt;div class=&quot;detail-label&quot;&gt; Địa chỉ giao hàng:&lt;/div&gt;&#10;                &lt;div class=&quot;detail-value&quot;&gt;${order.shippingAddress}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;detail-item&quot;&gt;&#10;                &lt;div class=&quot;detail-label&quot;&gt; Tổng tiền:&lt;/div&gt;&#10;                &lt;div class=&quot;detail-value&quot;&gt;&#10;                    &lt;fmt:formatNumber value=&quot;${order.totalPrice}&quot; type=&quot;currency&quot; currencySymbol=&quot;₫&quot; groupingUsed=&quot;true&quot;/&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;detail-item&quot;&gt;&#10;                &lt;div class=&quot;detail-label&quot;&gt; Trạng thái:&lt;/div&gt;&#10;                &lt;div class=&quot;detail-value&quot;&gt;&#10;                    &lt;span class=&quot;status-badge status-${order.status}&quot;&gt;&#10;                        &lt;c:choose&gt;&#10;                            &lt;c:when test=&quot;${order.status == 'pending'}&quot;&gt;⏳ Chờ xử lý&lt;/c:when&gt;&#10;                            &lt;c:when test=&quot;${order.status == 'delivered'}&quot;&gt; Đã giao hàng&lt;/c:when&gt;&#10;                            &lt;c:when test=&quot;${order.status == 'completed'}&quot;&gt;✅ Hoàn thành&lt;/c:when&gt;&#10;                            &lt;c:when test=&quot;${order.status == 'success'}&quot;&gt;✅ Thành công&lt;/c:when&gt;&#10;                            &lt;c:when test=&quot;${order.status == 'cancel'}&quot;&gt;❌ Đã hủy&lt;/c:when&gt;&#10;                            &lt;c:when test=&quot;${order.status == 'error'}&quot;&gt;⚠️ Lỗi&lt;/c:when&gt;&#10;                            &lt;c:otherwise&gt; ${order.status}&lt;/c:otherwise&gt;&#10;                        &lt;/c:choose&gt;&#10;                    &lt;/span&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;detail-item&quot;&gt;&#10;                &lt;div class=&quot;detail-label&quot;&gt; Ngày đặt hàng:&lt;/div&gt;&#10;                &lt;div class=&quot;detail-value&quot;&gt;&#10;                    &lt;fmt:formatDate value=&quot;${order.createdAt}&quot; pattern=&quot;dd/MM/yyyy HH:mm&quot;/&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;c:if test=&quot;${not empty order.note}&quot;&gt;&#10;                &lt;div class=&quot;detail-item&quot;&gt;&#10;                    &lt;div class=&quot;detail-label&quot;&gt; Ghi chú:&lt;/div&gt;&#10;                    &lt;div class=&quot;detail-value&quot;&gt;${order.note}&lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/c:if&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;h2 class=&quot;section-header&quot;&gt;️ Danh sách sản phẩm&lt;/h2&gt;&#10;        &#10;        &lt;div class=&quot;products-card&quot;&gt;&#10;            &lt;div class=&quot;table-container&quot;&gt;&#10;                &lt;table class=&quot;table&quot;&gt;&#10;                    &lt;thead&gt;&#10;                        &lt;tr&gt;&#10;                            &lt;th&gt; Sản phẩm&lt;/th&gt;&#10;                            &lt;th&gt; Đơn giá&lt;/th&gt;&#10;                            &lt;th&gt; Số lượng&lt;/th&gt;&#10;                            &lt;th&gt; Thành tiền&lt;/th&gt;&#10;                        &lt;/tr&gt;&#10;                    &lt;/thead&gt;&#10;                    &lt;tbody&gt;&#10;                        &lt;c:forEach items=&quot;${orderItems}&quot; var=&quot;item&quot;&gt;&#10;                            &lt;tr&gt;&#10;                                &lt;td style=&quot;font-weight: 600;&quot;&gt;${item.productName}&lt;/td&gt;&#10;                                &lt;td&gt;&#10;                                    &lt;fmt:formatNumber value=&quot;${item.price}&quot; type=&quot;currency&quot; currencySymbol=&quot;₫&quot; groupingUsed=&quot;true&quot;/&gt;&#10;                                &lt;/td&gt;&#10;                                &lt;td style=&quot;text-align: center; font-weight: 600;&quot;&gt;${item.quantity}&lt;/td&gt;&#10;                                &lt;td style=&quot;font-weight: 700; color: #66bb6a;&quot;&gt;&#10;                                    &lt;fmt:formatNumber value=&quot;${item.total}&quot; type=&quot;currency&quot; currencySymbol=&quot;₫&quot; groupingUsed=&quot;true&quot;/&gt;&#10;                                &lt;/td&gt;&#10;                            &lt;/tr&gt;&#10;                        &lt;/c:forEach&gt;&#10;                    &lt;/tbody&gt;&#10;                &lt;/table&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;actions&quot;&gt;&#10;            &lt;c:if test=&quot;${order.status == 'pending'}&quot;&gt;&#10;                &lt;a href=&quot;${pageContext.request.contextPath}/orders/update-status?id=${order.orderId}&amp;status=delivered&quot;&#10;                   class=&quot;btn btn-warning&quot;&gt;✅ Xác nhận đơn hàng&lt;/a&gt;&#10;                &lt;a href=&quot;${pageContext.request.contextPath}/orders/update-status?id=${order.orderId}&amp;status=cancel&quot;&#10;                   class=&quot;btn btn-danger&quot;&#10;                   onclick=&quot;return confirm('Bạn có chắc chắn muốn hủy đơn hàng này?')&quot;&gt;❌ Hủy đơn hàng&lt;/a&gt;&#10;            &lt;/c:if&gt;&#10;&#10;            &lt;c:if test=&quot;${order.status == 'delivered'}&quot;&gt;&#10;                &lt;a href=&quot;${pageContext.request.contextPath}/orders/update-status?id=${order.orderId}&amp;status=success&quot;&#10;                   class=&quot;btn btn-primary&quot;&gt; Xác nhận đã giao hàng&lt;/a&gt;&#10;            &lt;/c:if&gt;&#10;&#10;            &lt;c:if test=&quot;${order.status == 'success' || order.status == 'delivered'}&quot;&gt;&#10;                &lt;a href=&quot;${pageContext.request.contextPath}/orders/update-status?id=${order.orderId}&amp;status=completed&quot;&#10;                   class=&quot;btn btn-success&quot;&gt;✓ Xác nhận hoàn thành&lt;/a&gt;&#10;            &lt;/c:if&gt;&#10;&#10;            &lt;a href=&quot;${pageContext.request.contextPath}/orders&quot; class=&quot;btn btn-secondary&quot;&gt;↩️ Quay lại danh sách&lt;/a&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script&gt;&#10;        // Add interactive hover effects&#10;        document.querySelectorAll('.detail-item').forEach(item =&gt; {&#10;            item.addEventListener('mouseenter', function() {&#10;                this.style.transform = 'translateX(5px)';&#10;            });&#10;            &#10;            item.addEventListener('mouseleave', function() {&#10;                this.style.transform = 'translateX(0)';&#10;            });&#10;        });&#10;&#10;        // Add click animation to buttons&#10;        document.querySelectorAll('.btn').forEach(btn =&gt; {&#10;            btn.addEventListener('click', function(e) {&#10;                let ripple = document.createElement('span');&#10;                ripple.style.position = 'absolute';&#10;                ripple.style.borderRadius = '50%';&#10;                ripple.style.background = 'rgba(255, 255, 255, 0.6)';&#10;                ripple.style.transform = 'scale(0)';&#10;                ripple.style.animation = 'ripple 0.6s linear';&#10;                ripple.style.left = (e.offsetX - 10) + 'px';&#10;                ripple.style.top = (e.offsetY - 10) + 'px';&#10;                ripple.style.width = ripple.style.height = '20px';&#10;                &#10;                this.appendChild(ripple);&#10;                &#10;                setTimeout(() =&gt; {&#10;                    ripple.remove();&#10;                }, 600);&#10;            });&#10;        });&#10;&#10;        // Add CSS for ripple animation&#10;        const style = document.createElement('style');&#10;        style.textContent = `&#10;            @keyframes ripple {&#10;                to {&#10;                    transform: scale(4);&#10;                    opacity: 0;&#10;                }&#10;            }&#10;        `;&#10;        document.head.appendChild(style);&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/webapp/order/list.jsp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/webapp/order/list.jsp" />
              <option name="updatedContent" value="&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&#10;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;&#10;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; prefix=&quot;fmt&quot; %&gt;&#10;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/functions&quot; prefix=&quot;fn&quot; %&gt;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;vi&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Đơn Hàng Của Tôi - GoMsu Store&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;${pageContext.request.contextPath}/css/style.css&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;!-- Fixed Navbar --&gt;&#10;    &lt;nav class=&quot;navbar&quot; id=&quot;navbar&quot;&gt;&#10;        &lt;div class=&quot;navbar-container&quot;&gt;&#10;            &lt;a href=&quot;${pageContext.request.contextPath}/&quot; class=&quot;navbar-brand&quot;&gt;&#10;                &lt;i class=&quot;fas fa-store&quot;&gt;&lt;/i&gt;&#10;                GoMsu Store&#10;            &lt;/a&gt;&#10;            &#10;            &lt;ul class=&quot;navbar-nav&quot; id=&quot;navbarNav&quot;&gt;&#10;                &lt;li class=&quot;nav-item&quot;&gt;&#10;                    &lt;a href=&quot;${pageContext.request.contextPath}/&quot; class=&quot;nav-link&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-home&quot;&gt;&lt;/i&gt; Trang Chủ&#10;                    &lt;/a&gt;&#10;                &lt;/li&gt;&#10;                &lt;li class=&quot;nav-item&quot;&gt;&#10;                    &lt;a href=&quot;${pageContext.request.contextPath}/shop&quot; class=&quot;nav-link&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-shopping-bag&quot;&gt;&lt;/i&gt; Cửa Hàng&#10;                    &lt;/a&gt;&#10;                &lt;/li&gt;&#10;                &lt;li class=&quot;nav-item&quot;&gt;&#10;                    &lt;a href=&quot;${pageContext.request.contextPath}/orders&quot; class=&quot;nav-link active&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-box&quot;&gt;&lt;/i&gt; Đơn Hàng&#10;                    &lt;/a&gt;&#10;                &lt;/li&gt;&#10;                &lt;li class=&quot;nav-item&quot;&gt;&#10;                    &lt;a href=&quot;${pageContext.request.contextPath}/cart&quot; class=&quot;nav-link&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-shopping-cart&quot;&gt;&lt;/i&gt; Giỏ Hàng&#10;                    &lt;/a&gt;&#10;                &lt;/li&gt;&#10;            &lt;/ul&gt;&#10;&#10;            &lt;div class=&quot;user-menu&quot;&gt;&#10;                &lt;c:choose&gt;&#10;                    &lt;c:when test=&quot;${sessionScope.user != null}&quot;&gt;&#10;                        &lt;div class=&quot;dropdown&quot;&gt;&#10;                            &lt;a href=&quot;#&quot; class=&quot;nav-link&quot;&gt;&#10;                                &lt;i class=&quot;fas fa-user&quot;&gt;&lt;/i&gt; ${sessionScope.user.username}&#10;                            &lt;/a&gt;&#10;                            &lt;div class=&quot;dropdown-menu&quot;&gt;&#10;                                &lt;a href=&quot;${pageContext.request.contextPath}/profile&quot; class=&quot;dropdown-item&quot;&gt;Hồ Sơ&lt;/a&gt;&#10;                                &lt;a href=&quot;${pageContext.request.contextPath}/orders&quot; class=&quot;dropdown-item&quot;&gt;Đơn Hàng&lt;/a&gt;&#10;                                &lt;a href=&quot;${pageContext.request.contextPath}/logout&quot; class=&quot;dropdown-item&quot;&gt;Đăng Xuất&lt;/a&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/c:when&gt;&#10;                    &lt;c:otherwise&gt;&#10;                        &lt;a href=&quot;${pageContext.request.contextPath}/login&quot; class=&quot;btn btn-primary&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-sign-in-alt&quot;&gt;&lt;/i&gt; Đăng Nhập&#10;                        &lt;/a&gt;&#10;                    &lt;/c:otherwise&gt;&#10;                &lt;/c:choose&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;&#10;    &lt;!-- Main Content --&gt;&#10;    &lt;div class=&quot;main-content&quot;&gt;&#10;        &lt;div class=&quot;container&quot;&gt;&#10;            &lt;!-- Orders Header --&gt;&#10;            &lt;div class=&quot;orders-header&quot;&gt;&#10;                &lt;h1 class=&quot;orders-title&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-box&quot;&gt;&lt;/i&gt;&#10;                    Đơn Hàng Của Tôi&#10;                &lt;/h1&gt;&#10;                &lt;p class=&quot;orders-subtitle&quot;&gt;&#10;                    &lt;c:choose&gt;&#10;                        &lt;c:when test=&quot;${fn:length(orders) &gt; 0}&quot;&gt;&#10;                            Bạn có ${fn:length(orders)} đơn hàng&#10;                        &lt;/c:when&gt;&#10;                        &lt;c:otherwise&gt;&#10;                            Bạn chưa có đơn hàng nào&#10;                        &lt;/c:otherwise&gt;&#10;                    &lt;/c:choose&gt;&#10;                &lt;/p&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Order Status Filter --&gt;&#10;            &lt;div class=&quot;order-filters&quot;&gt;&#10;                &lt;div class=&quot;filter-tabs&quot;&gt;&#10;                    &lt;button class=&quot;filter-tab ${empty param.status ? 'active' : ''}&quot; data-status=&quot;&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-list&quot;&gt;&lt;/i&gt;&#10;                        Tất cả&#10;                    &lt;/button&gt;&#10;                    &lt;button class=&quot;filter-tab ${param.status == 'pending' ? 'active' : ''}&quot; data-status=&quot;pending&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-clock&quot;&gt;&lt;/i&gt;&#10;                        Chờ xử lý&#10;                    &lt;/button&gt;&#10;                    &lt;button class=&quot;filter-tab ${param.status == 'processing' ? 'active' : ''}&quot; data-status=&quot;processing&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-cog&quot;&gt;&lt;/i&gt;&#10;                        Đang xử lý&#10;                    &lt;/button&gt;&#10;                    &lt;button class=&quot;filter-tab ${param.status == 'shipped' ? 'active' : ''}&quot; data-status=&quot;shipped&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-truck&quot;&gt;&lt;/i&gt;&#10;                        Đang giao&#10;                    &lt;/button&gt;&#10;                    &lt;button class=&quot;filter-tab ${param.status == 'delivered' ? 'active' : ''}&quot; data-status=&quot;delivered&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-check-circle&quot;&gt;&lt;/i&gt;&#10;                        Đã giao&#10;                    &lt;/button&gt;&#10;                    &lt;button class=&quot;filter-tab ${param.status == 'cancelled' ? 'active' : ''}&quot; data-status=&quot;cancelled&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-times-circle&quot;&gt;&lt;/i&gt;&#10;                        Đã hủy&#10;                    &lt;/button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Orders List --&gt;&#10;            &lt;c:choose&gt;&#10;                &lt;c:when test=&quot;${fn:length(orders) &gt; 0}&quot;&gt;&#10;                    &lt;div class=&quot;orders-list&quot;&gt;&#10;                        &lt;c:forEach var=&quot;order&quot; items=&quot;${orders}&quot;&gt;&#10;                            &lt;div class=&quot;order-card&quot; data-order-id=&quot;${order.orderId}&quot;&gt;&#10;                                &lt;div class=&quot;order-header&quot;&gt;&#10;                                    &lt;div class=&quot;order-info&quot;&gt;&#10;                                        &lt;div class=&quot;order-id&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-receipt&quot;&gt;&lt;/i&gt;&#10;                                            Đơn hàng #${order.orderId}&#10;                                        &lt;/div&gt;&#10;                                        &lt;div class=&quot;order-date&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-calendar&quot;&gt;&lt;/i&gt;&#10;                                            &lt;fmt:formatDate value=&quot;${order.createdAt}&quot; pattern=&quot;dd/MM/yyyy HH:mm&quot;/&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;order-status&quot;&gt;&#10;                                        &lt;span class=&quot;status-badge status-${order.status}&quot;&gt;&#10;                                            &lt;c:choose&gt;&#10;                                                &lt;c:when test=&quot;${order.status == 'pending'}&quot;&gt;&#10;                                                    &lt;i class=&quot;fas fa-clock&quot;&gt;&lt;/i&gt; Chờ xử lý&#10;                                                &lt;/c:when&gt;&#10;                                                &lt;c:when test=&quot;${order.status == 'processing'}&quot;&gt;&#10;                                                    &lt;i class=&quot;fas fa-cog&quot;&gt;&lt;/i&gt; Đang xử lý&#10;                                                &lt;/c:when&gt;&#10;                                                &lt;c:when test=&quot;${order.status == 'shipped'}&quot;&gt;&#10;                                                    &lt;i class=&quot;fas fa-truck&quot;&gt;&lt;/i&gt; Đang giao&#10;                                                &lt;/c:when&gt;&#10;                                                &lt;c:when test=&quot;${order.status == 'delivered'}&quot;&gt;&#10;                                                    &lt;i class=&quot;fas fa-check-circle&quot;&gt;&lt;/i&gt; Đã giao&#10;                                                &lt;/c:when&gt;&#10;                                                &lt;c:when test=&quot;${order.status == 'cancelled'}&quot;&gt;&#10;                                                    &lt;i class=&quot;fas fa-times-circle&quot;&gt;&lt;/i&gt; Đã hủy&#10;                                                &lt;/c:when&gt;&#10;                                                &lt;c:otherwise&gt;&#10;                                                    &lt;i class=&quot;fas fa-question-circle&quot;&gt;&lt;/i&gt; ${order.status}&#10;                                                &lt;/c:otherwise&gt;&#10;                                            &lt;/c:choose&gt;&#10;                                        &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div class=&quot;order-content&quot;&gt;&#10;                                    &lt;div class=&quot;order-items&quot;&gt;&#10;                                        &lt;c:forEach var=&quot;item&quot; items=&quot;${order.orderItems}&quot; varStatus=&quot;status&quot;&gt;&#10;                                            &lt;c:if test=&quot;${status.index &lt; 3}&quot;&gt;&#10;                                                &lt;div class=&quot;order-item&quot;&gt;&#10;                                                    &lt;div class=&quot;item-image&quot;&gt;&#10;                                                        &lt;img src=&quot;${not empty item.product.imageUrl ? item.product.imageUrl : '/images/no-image.jpg'}&quot; &#10;                                                             alt=&quot;${item.product.name}&quot; loading=&quot;lazy&quot;&gt;&#10;                                                    &lt;/div&gt;&#10;                                                    &lt;div class=&quot;item-details&quot;&gt;&#10;                                                        &lt;h4 class=&quot;item-name&quot;&gt;${item.product.name}&lt;/h4&gt;&#10;                                                        &lt;p class=&quot;item-category&quot;&gt;${item.product.categoryName}&lt;/p&gt;&#10;                                                        &lt;div class=&quot;item-quantity&quot;&gt;Số lượng: ${item.quantity}&lt;/div&gt;&#10;                                                        &lt;div class=&quot;item-price&quot;&gt;&#10;                                                            &lt;fmt:formatNumber value=&quot;${item.price}&quot; type=&quot;currency&quot; currencyCode=&quot;VND&quot;/&gt;&#10;                                                        &lt;/div&gt;&#10;                                                    &lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/c:if&gt;&#10;                                        &lt;/c:forEach&gt;&#10;                                        &#10;                                        &lt;c:if test=&quot;${fn:length(order.orderItems) &gt; 3}&quot;&gt;&#10;                                            &lt;div class=&quot;more-items&quot;&gt;&#10;                                                &lt;i class=&quot;fas fa-ellipsis-h&quot;&gt;&lt;/i&gt;&#10;                                                và ${fn:length(order.orderItems) - 3} sản phẩm khác&#10;                                            &lt;/div&gt;&#10;                                        &lt;/c:if&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;div class=&quot;order-summary&quot;&gt;&#10;                                        &lt;div class=&quot;delivery-info&quot;&gt;&#10;                                            &lt;div class=&quot;delivery-address&quot;&gt;&#10;                                                &lt;i class=&quot;fas fa-map-marker-alt&quot;&gt;&lt;/i&gt;&#10;                                                &lt;div&gt;&#10;                                                    &lt;strong&gt;${order.customerName}&lt;/strong&gt;&lt;br&gt;&#10;                                                    ${order.phoneNumber}&lt;br&gt;&#10;                                                    ${order.shippingAddress}&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;&#10;                                        &lt;div class=&quot;order-total&quot;&gt;&#10;                                            &lt;div class=&quot;total-label&quot;&gt;Tổng tiền:&lt;/div&gt;&#10;                                            &lt;div class=&quot;total-amount&quot;&gt;&#10;                                                &lt;fmt:formatNumber value=&quot;${order.totalPrice}&quot; type=&quot;currency&quot; currencyCode=&quot;VND&quot;/&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div class=&quot;order-actions&quot;&gt;&#10;                                    &lt;a href=&quot;${pageContext.request.contextPath}/orders/detail?id=${order.orderId}&quot; &#10;                                       class=&quot;btn btn-secondary&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;                                        Xem chi tiết&#10;                                    &lt;/a&gt;&#10;                                    &#10;                                    &lt;c:if test=&quot;${order.status == 'pending'}&quot;&gt;&#10;                                        &lt;button class=&quot;btn btn-danger&quot; onclick=&quot;cancelOrder(${order.orderId})&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-times&quot;&gt;&lt;/i&gt;&#10;                                            Hủy đơn&#10;                                        &lt;/button&gt;&#10;                                    &lt;/c:if&gt;&#10;                                    &#10;                                    &lt;c:if test=&quot;${order.status == 'delivered'}&quot;&gt;&#10;                                        &lt;a href=&quot;${pageContext.request.contextPath}/orders/reorder?id=${order.orderId}&quot; &#10;                                           class=&quot;btn btn-primary&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-redo&quot;&gt;&lt;/i&gt;&#10;                                            Mua lại&#10;                                        &lt;/a&gt;&#10;                                    &lt;/c:if&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/c:forEach&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;!-- Pagination --&gt;&#10;                    &lt;c:if test=&quot;${totalPages &gt; 1}&quot;&gt;&#10;                        &lt;div class=&quot;pagination&quot;&gt;&#10;                            &lt;c:if test=&quot;${currentPage &gt; 1}&quot;&gt;&#10;                                &lt;a href=&quot;?page=${currentPage - 1}${not empty param.status ? '&amp;status=' : ''}${param.status}&quot; &#10;                                   class=&quot;pagination-btn&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-chevron-left&quot;&gt;&lt;/i&gt;&#10;                                &lt;/a&gt;&#10;                            &lt;/c:if&gt;&#10;                            &#10;                            &lt;c:forEach begin=&quot;1&quot; end=&quot;${totalPages}&quot; var=&quot;i&quot;&gt;&#10;                                &lt;a href=&quot;?page=${i}${not empty param.status ? '&amp;status=' : ''}${param.status}&quot; &#10;                                   class=&quot;pagination-btn ${currentPage == i ? 'active' : ''}&quot;&gt;${i}&lt;/a&gt;&#10;                            &lt;/c:forEach&gt;&#10;                            &#10;                            &lt;c:if test=&quot;${currentPage &lt; totalPages}&quot;&gt;&#10;                                &lt;a href=&quot;?page=${currentPage + 1}${not empty param.status ? '&amp;status=' : ''}${param.status}&quot; &#10;                                   class=&quot;pagination-btn&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-chevron-right&quot;&gt;&lt;/i&gt;&#10;                                &lt;/a&gt;&#10;                            &lt;/c:if&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/c:if&gt;&#10;                &lt;/c:when&gt;&#10;                &lt;c:otherwise&gt;&#10;                    &lt;div class=&quot;empty-orders&quot;&gt;&#10;                        &lt;div class=&quot;empty-orders-icon&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-box-open&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h2 class=&quot;empty-orders-title&quot;&gt;Chưa có đơn hàng nào&lt;/h2&gt;&#10;                        &lt;p class=&quot;empty-orders-message&quot;&gt;&#10;                            &lt;c:choose&gt;&#10;                                &lt;c:when test=&quot;${sessionScope.user != null}&quot;&gt;&#10;                                    Hãy khám phá các sản phẩm tuyệt vời và đặt hàng ngay!&#10;                                &lt;/c:when&gt;&#10;                                &lt;c:otherwise&gt;&#10;                                    Hãy đăng nhập để xem đơn hàng của bạn&#10;                                &lt;/c:otherwise&gt;&#10;                            &lt;/c:choose&gt;&#10;                        &lt;/p&gt;&#10;                        &lt;div class=&quot;empty-orders-actions&quot;&gt;&#10;                            &lt;c:choose&gt;&#10;                                &lt;c:when test=&quot;${sessionScope.user != null}&quot;&gt;&#10;                                    &lt;a href=&quot;${pageContext.request.contextPath}/shop&quot; class=&quot;btn btn-primary&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-shopping-bag&quot;&gt;&lt;/i&gt;&#10;                                        Bắt Đầu Mua Sắm&#10;                                    &lt;/a&gt;&#10;                                &lt;/c:when&gt;&#10;                                &lt;c:otherwise&gt;&#10;                                    &lt;a href=&quot;${pageContext.request.contextPath}/login&quot; class=&quot;btn btn-primary&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-sign-in-alt&quot;&gt;&lt;/i&gt;&#10;                                        Đăng Nhập&#10;                                    &lt;/a&gt;&#10;                                &lt;/c:otherwise&gt;&#10;                            &lt;/c:choose&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/c:otherwise&gt;&#10;            &lt;/c:choose&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script&gt;&#10;        // Fixed navbar on scroll&#10;        window.addEventListener('scroll', function() {&#10;            const navbar = document.getElementById('navbar');&#10;            if (window.scrollY &gt; 50) {&#10;                navbar.classList.add('scrolled');&#10;            } else {&#10;                navbar.classList.remove('scrolled');&#10;            }&#10;        });&#10;&#10;        // Filter tabs functionality&#10;        document.querySelectorAll('.filter-tab').forEach(tab =&gt; {&#10;            tab.addEventListener('click', function() {&#10;                const status = this.getAttribute('data-status');&#10;                const url = new URL(window.location);&#10;                &#10;                if (status) {&#10;                    url.searchParams.set('status', status);&#10;                } else {&#10;                    url.searchParams.delete('status');&#10;                }&#10;                url.searchParams.delete('page'); // Reset to first page&#10;                &#10;                window.location.href = url.toString();&#10;            });&#10;        });&#10;&#10;        // Cancel order function&#10;        function cancelOrder(orderId) {&#10;            if (!confirm('Bạn có chắc muốn hủy đơn hàng này?')) {&#10;                return;&#10;            }&#10;&#10;            fetch('${pageContext.request.contextPath}/orders/cancel', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/x-www-form-urlencoded',&#10;                },&#10;                body: 'orderId=' + orderId&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.success) {&#10;                    showNotification('Đơn hàng đã được hủy thành công!', 'success');&#10;                    setTimeout(() =&gt; location.reload(), 1500);&#10;                } else {&#10;                    showNotification(data.message || 'Có lỗi xảy ra!', 'error');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Error:', error);&#10;                showNotification('Có lỗi xảy ra khi hủy đơn hàng!', 'error');&#10;            });&#10;        }&#10;&#10;        // Notification function&#10;        function showNotification(message, type) {&#10;            const notification = document.createElement('div');&#10;            notification.className = 'notification notification-' + type;&#10;            notification.innerHTML = '&lt;i class=&quot;fas fa-info-circle&quot;&gt;&lt;/i&gt;' + message;&#10;            &#10;            document.body.appendChild(notification);&#10;            &#10;            setTimeout(() =&gt; {&#10;                notification.classList.add('show');&#10;            }, 100);&#10;            &#10;            setTimeout(() =&gt; {&#10;                notification.classList.remove('show');&#10;                setTimeout(() =&gt; notification.remove(), 300);&#10;            }, 3000);&#10;        }&#10;    &lt;/script&gt;&#10;&#10;    &lt;style&gt;&#10;        /* Orders Page Styles */&#10;        .orders-header {&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(20px);&#10;            border: 2px solid var(--glass-border);&#10;            border-radius: 32px;&#10;            padding: 3rem 2rem;&#10;            margin-bottom: 3rem;&#10;            text-align: center;&#10;            position: relative;&#10;            overflow: hidden;&#10;        }&#10;&#10;        .orders-title {&#10;            font-size: 3rem;&#10;            font-weight: 800;&#10;            margin-bottom: 1.5rem;&#10;            background: linear-gradient(135deg, var(--primary), var(--secondary), var(--accent));&#10;            -webkit-background-clip: text;&#10;            -webkit-text-fill-color: transparent;&#10;            background-clip: text;&#10;        }&#10;&#10;        .orders-subtitle {&#10;            color: var(--text-secondary);&#10;            font-size: 1.2rem;&#10;            line-height: 1.6;&#10;        }&#10;&#10;        /* Filter Tabs */&#10;        .order-filters {&#10;            margin-bottom: 2rem;&#10;        }&#10;&#10;        .filter-tabs {&#10;            display: flex;&#10;            gap: 0.5rem;&#10;            flex-wrap: wrap;&#10;            justify-content: center;&#10;        }&#10;&#10;        .filter-tab {&#10;            padding: 0.75rem 1.5rem;&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(10px);&#10;            border: 2px solid var(--glass-border);&#10;            border-radius: 12px;&#10;            color: var(--text-secondary);&#10;            cursor: pointer;&#10;            transition: all 0.3s ease;&#10;            font-size: 0.9rem;&#10;            font-weight: 500;&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .filter-tab:hover {&#10;            background: rgba(255, 255, 255, 0.15);&#10;            border-color: var(--primary);&#10;            transform: translateY(-2px);&#10;        }&#10;&#10;        .filter-tab.active {&#10;            background: linear-gradient(135deg, var(--primary), var(--primary-dark));&#10;            border-color: var(--primary);&#10;            color: white;&#10;            transform: translateY(-2px);&#10;            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);&#10;        }&#10;&#10;        /* Order Cards */&#10;        .orders-list {&#10;            display: flex;&#10;            flex-direction: column;&#10;            gap: 2rem;&#10;        }&#10;&#10;        .order-card {&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(15px);&#10;            border: 2px solid var(--glass-border);&#10;            border-radius: 24px;&#10;            overflow: hidden;&#10;            transition: all 0.3s ease;&#10;            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);&#10;        }&#10;&#10;        .order-card:hover {&#10;            transform: translateY(-5px);&#10;            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);&#10;            border-color: var(--primary);&#10;        }&#10;&#10;        .order-header {&#10;            padding: 1.5rem 2rem;&#10;            border-bottom: 1px solid var(--glass-border);&#10;            display: flex;&#10;            justify-content: space-between;&#10;            align-items: center;&#10;            background: rgba(255, 255, 255, 0.05);&#10;        }&#10;&#10;        .order-info {&#10;            display: flex;&#10;            gap: 2rem;&#10;            align-items: center;&#10;        }&#10;&#10;        .order-id {&#10;            font-weight: 700;&#10;            font-size: 1.1rem;&#10;            color: var(--text-primary);&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        .order-date {&#10;            color: var(--text-secondary);&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        /* Status Badges */&#10;        .status-badge {&#10;            display: inline-flex;&#10;            align-items: center;&#10;            gap: 0.5rem;&#10;            padding: 0.5rem 1rem;&#10;            border-radius: 20px;&#10;            font-size: 0.9rem;&#10;            font-weight: 600;&#10;            text-transform: uppercase;&#10;            letter-spacing: 0.5px;&#10;        }&#10;&#10;        .status-pending {&#10;            background: linear-gradient(135deg, #ffc107, #ffb300);&#10;            color: #000;&#10;            box-shadow: 0 4px 15px rgba(255, 193, 7, 0.3);&#10;        }&#10;&#10;        .status-processing {&#10;            background: linear-gradient(135deg, #17a2b8, #138496);&#10;            color: white;&#10;            box-shadow: 0 4px 15px rgba(23, 162, 184, 0.3);&#10;        }&#10;&#10;        .status-shipped {&#10;            background: linear-gradient(135deg, #6f42c1, #5a32a3);&#10;            color: white;&#10;            box-shadow: 0 4px 15px rgba(111, 66, 193, 0.3);&#10;        }&#10;&#10;        .status-delivered {&#10;            background: linear-gradient(135deg, #28a745, #218838);&#10;            color: white;&#10;            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);&#10;        }&#10;&#10;        .status-cancelled {&#10;            background: linear-gradient(135deg, #dc3545, #c82333);&#10;            color: white;&#10;            box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);&#10;        }&#10;&#10;        /* Order Content */&#10;        .order-content {&#10;            padding: 2rem;&#10;            display: grid;&#10;            grid-template-columns: 1fr 300px;&#10;            gap: 2rem;&#10;        }&#10;&#10;        .order-items {&#10;            display: flex;&#10;            flex-direction: column;&#10;            gap: 1rem;&#10;        }&#10;&#10;        .order-item {&#10;            display: flex;&#10;            gap: 1rem;&#10;            padding: 1rem;&#10;            background: rgba(255, 255, 255, 0.05);&#10;            border-radius: 12px;&#10;            border: 1px solid var(--glass-border);&#10;        }&#10;&#10;        .item-image {&#10;            width: 80px;&#10;            height: 80px;&#10;            border-radius: 8px;&#10;            overflow: hidden;&#10;            flex-shrink: 0;&#10;        }&#10;&#10;        .item-image img {&#10;            width: 100%;&#10;            height: 100%;&#10;            object-fit: cover;&#10;        }&#10;&#10;        .item-details {&#10;            flex: 1;&#10;        }&#10;&#10;        .item-name {&#10;            font-weight: 600;&#10;            color: var(--text-primary);&#10;            margin-bottom: 0.25rem;&#10;        }&#10;&#10;        .item-category {&#10;            color: var(--text-muted);&#10;            font-size: 0.9rem;&#10;            margin-bottom: 0.5rem;&#10;        }&#10;&#10;        .item-quantity {&#10;            color: var(--text-secondary);&#10;            font-size: 0.9rem;&#10;            margin-bottom: 0.25rem;&#10;        }&#10;&#10;        .item-price {&#10;            font-weight: 700;&#10;            color: var(--primary);&#10;            font-size: 1.1rem;&#10;        }&#10;&#10;        .more-items {&#10;            text-align: center;&#10;            padding: 1rem;&#10;            color: var(--text-muted);&#10;            font-style: italic;&#10;            border: 2px dashed var(--glass-border);&#10;            border-radius: 12px;&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            gap: 0.5rem;&#10;        }&#10;&#10;        /* Order Summary */&#10;        .order-summary {&#10;            display: flex;&#10;            flex-direction: column;&#10;            gap: 1.5rem;&#10;        }&#10;&#10;        .delivery-info {&#10;            padding: 1.5rem;&#10;            background: rgba(255, 255, 255, 0.05);&#10;            border-radius: 16px;&#10;            border: 1px solid var(--glass-border);&#10;        }&#10;&#10;        .delivery-address {&#10;            display: flex;&#10;            gap: 1rem;&#10;            align-items: flex-start;&#10;        }&#10;&#10;        .delivery-address i {&#10;            color: var(--primary);&#10;            margin-top: 0.25rem;&#10;            font-size: 1.1rem;&#10;        }&#10;&#10;        .order-total {&#10;            padding: 1.5rem;&#10;            background: linear-gradient(135deg, var(--primary), var(--primary-dark));&#10;            border-radius: 16px;&#10;            text-align: center;&#10;            color: white;&#10;        }&#10;&#10;        .total-label {&#10;            font-size: 1rem;&#10;            margin-bottom: 0.5rem;&#10;            opacity: 0.9;&#10;        }&#10;&#10;        .total-amount {&#10;            font-size: 1.75rem;&#10;            font-weight: 800;&#10;        }&#10;&#10;        /* Order Actions */&#10;        .order-actions {&#10;            padding: 1.5rem 2rem;&#10;            border-top: 1px solid var(--glass-border);&#10;            display: flex;&#10;            gap: 1rem;&#10;            justify-content: flex-end;&#10;            background: rgba(255, 255, 255, 0.05);&#10;        }&#10;&#10;        /* Empty State */&#10;        .empty-orders {&#10;            text-align: center;&#10;            padding: 5rem 3rem;&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(15px);&#10;            border-radius: 32px;&#10;            border: 2px solid var(--glass-border);&#10;        }&#10;&#10;        .empty-orders-icon {&#10;            font-size: 5rem;&#10;            color: var(--text-muted);&#10;            margin-bottom: 2rem;&#10;            opacity: 0.7;&#10;        }&#10;&#10;        .empty-orders-title {&#10;            font-size: 2rem;&#10;            font-weight: 700;&#10;            margin-bottom: 1rem;&#10;            color: var(--text-primary);&#10;        }&#10;&#10;        .empty-orders-message {&#10;            color: var(--text-secondary);&#10;            margin-bottom: 3rem;&#10;            font-size: 1.1rem;&#10;            line-height: 1.5;&#10;        }&#10;&#10;        /* Responsive Design */&#10;        @media (max-width: 768px) {&#10;            .order-content {&#10;                grid-template-columns: 1fr;&#10;                gap: 1.5rem;&#10;            }&#10;&#10;            .order-header {&#10;                flex-direction: column;&#10;                gap: 1rem;&#10;                text-align: center;&#10;            }&#10;&#10;            .order-info {&#10;                flex-direction: column;&#10;                gap: 0.5rem;&#10;            }&#10;&#10;            .order-actions {&#10;                flex-direction: column;&#10;            }&#10;&#10;            .filter-tabs {&#10;                justify-content: flex-start;&#10;                overflow-x: auto;&#10;                padding-bottom: 0.5rem;&#10;            }&#10;&#10;            .orders-title {&#10;                font-size: 2rem;&#10;            }&#10;&#10;            .orders-header {&#10;                padding: 2rem 1.5rem;&#10;            }&#10;        }&#10;&#10;        /* Notification styles */&#10;        .notification {&#10;            position: fixed;&#10;            top: 100px;&#10;            right: 20px;&#10;            background: var(--glass-bg);&#10;            backdrop-filter: blur(15px);&#10;            border: 1px solid var(--glass-border);&#10;            border-radius: 16px;&#10;            padding: 1.25rem 1.75rem;&#10;            color: var(--text-primary);&#10;            transform: translateX(400px);&#10;            transition: all 0.4s ease;&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 0.75rem;&#10;            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.4);&#10;            z-index: 10000;&#10;        }&#10;&#10;        .notification.show {&#10;            transform: translateX(0);&#10;        }&#10;&#10;        .notification-success {&#10;            border-left: 4px solid var(--success);&#10;        }&#10;&#10;        .notification-error {&#10;            border-left: 4px solid var(--danger);&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>